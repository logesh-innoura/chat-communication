{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, invokeAsync, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SilentCacheClient extends StandardInteractionClient {\n  /**\r\n   * Returns unexpired tokens from the cache, if available\r\n   * @param silentRequest\r\n   */\n  async acquireToken(silentRequest) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n    // Telemetry manager only used to increment cacheHits here\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n    this.logger.verbose(\"Silent auth client created\");\n    try {\n      const response = await invokeAsync(silentAuthClient.acquireCachedToken.bind(silentAuthClient), PerformanceEvents.SilentFlowClientAcquireCachedToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n      const authResponse = response[0];\n      this.performanceClient.addFields({\n        fromCache: true\n      }, silentRequest.correlationId);\n      return authResponse;\n    } catch (error) {\n      if (error instanceof BrowserAuthError && error.errorCode === cryptoKeyNotFound) {\n        this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n      }\n      throw error;\n    }\n  }\n  /**\r\n   * API to silenty clear the browser cache.\r\n   * @param logoutRequest\r\n   */\n  logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    return this.clearCacheOnLogout(validLogoutRequest?.account);\n  }\n  /**\r\n   * Creates an Silent Flow Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  async createSilentFlowClient(serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    // Create auth module.\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, authorityUrl, azureCloudOptions);\n    return new SilentFlowClient(clientConfig, this.performanceClient);\n  }\n  async initializeSilentRequest(request, account) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\n    const baseRequest = await invokeAsync(this.initializeBaseRequest.bind(this), PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)(request, account);\n    return {\n      ...request,\n      ...baseRequest,\n      account: account,\n      forceRefresh: request.forceRefresh || false\n    };\n  }\n}\nexport { SilentCacheClient };","map":{"version":3,"names":["SilentCacheClient","StandardInteractionClient","acquireToken","silentRequest","performanceClient","addQueueMeasurement","PerformanceEvents","SilentCacheClientAcquireToken","correlationId","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","silentAuthClient","createSilentFlowClient","authority","azureCloudOptions","logger","verbose","response","invokeAsync","acquireCachedToken","bind","SilentFlowClientAcquireCachedToken","authResponse","addFields","fromCache","error","BrowserAuthError","errorCode","cryptoKeyNotFound","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","clearCacheOnLogout","account","authorityUrl","clientConfig","getClientConfiguration","StandardInteractionClientGetClientConfiguration","SilentFlowClient","initializeSilentRequest","request","InitializeSilentRequest","baseRequest","initializeBaseRequest","InitializeBaseRequest","forceRefresh"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentCacheClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport {\r\n    CommonSilentFlowRequest,\r\n    SilentFlowClient,\r\n    ServerTelemetryManager,\r\n    AccountInfo,\r\n    AzureCloudOptions,\r\n    PerformanceEvents,\r\n    invokeAsync,\r\n} from \"@azure/msal-common\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport {\r\n    BrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\r\n\r\nexport class SilentCacheClient extends StandardInteractionClient {\r\n    /**\r\n     * Returns unexpired tokens from the cache, if available\r\n     * @param silentRequest\r\n     */\r\n    async acquireToken(\r\n        silentRequest: CommonSilentFlowRequest\r\n    ): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(\r\n            PerformanceEvents.SilentCacheClientAcquireToken,\r\n            silentRequest.correlationId\r\n        );\r\n        // Telemetry manager only used to increment cacheHits here\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\r\n            ApiId.acquireTokenSilent_silentFlow\r\n        );\r\n\r\n        const silentAuthClient = await this.createSilentFlowClient(\r\n            serverTelemetryManager,\r\n            silentRequest.authority,\r\n            silentRequest.azureCloudOptions\r\n        );\r\n        this.logger.verbose(\"Silent auth client created\");\r\n\r\n        try {\r\n            const response = await invokeAsync(\r\n                silentAuthClient.acquireCachedToken.bind(silentAuthClient),\r\n                PerformanceEvents.SilentFlowClientAcquireCachedToken,\r\n                this.logger,\r\n                this.performanceClient,\r\n                silentRequest.correlationId\r\n            )(silentRequest);\r\n            const authResponse = response[0] as AuthenticationResult;\r\n\r\n            this.performanceClient.addFields(\r\n                {\r\n                    fromCache: true,\r\n                },\r\n                silentRequest.correlationId\r\n            );\r\n            return authResponse;\r\n        } catch (error) {\r\n            if (\r\n                error instanceof BrowserAuthError &&\r\n                error.errorCode === BrowserAuthErrorCodes.cryptoKeyNotFound\r\n            ) {\r\n                this.logger.verbose(\r\n                    \"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\"\r\n                );\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * API to silenty clear the browser cache.\r\n     * @param logoutRequest\r\n     */\r\n    logout(logoutRequest?: ClearCacheRequest): Promise<void> {\r\n        this.logger.verbose(\"logoutRedirect called\");\r\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\r\n    }\r\n\r\n    /**\r\n     * Creates an Silent Flow Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createSilentFlowClient(\r\n        serverTelemetryManager: ServerTelemetryManager,\r\n        authorityUrl?: string,\r\n        azureCloudOptions?: AzureCloudOptions\r\n    ): Promise<SilentFlowClient> {\r\n        // Create auth module.\r\n        const clientConfig = await invokeAsync(\r\n            this.getClientConfiguration.bind(this),\r\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\r\n            this.logger,\r\n            this.performanceClient,\r\n            this.correlationId\r\n        )(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new SilentFlowClient(clientConfig, this.performanceClient);\r\n    }\r\n\r\n    async initializeSilentRequest(\r\n        request: SilentRequest,\r\n        account: AccountInfo\r\n    ): Promise<CommonSilentFlowRequest> {\r\n        this.performanceClient.addQueueMeasurement(\r\n            PerformanceEvents.InitializeSilentRequest,\r\n            this.correlationId\r\n        );\r\n\r\n        const baseRequest = await invokeAsync(\r\n            this.initializeBaseRequest.bind(this),\r\n            PerformanceEvents.InitializeBaseRequest,\r\n            this.logger,\r\n            this.performanceClient,\r\n            this.correlationId\r\n        )(request, account);\r\n        return {\r\n            ...request,\r\n            ...baseRequest,\r\n            account: account,\r\n            forceRefresh: request.forceRefresh || false,\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}