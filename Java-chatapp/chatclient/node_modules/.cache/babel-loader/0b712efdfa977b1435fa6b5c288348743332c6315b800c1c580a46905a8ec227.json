{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Constants\r\n */\nconst BrowserConstants = {\n  /**\r\n   * Interaction in progress cache value\r\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n  /**\r\n   * Invalid grant error code\r\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  /**\r\n   * Default popup window width\r\n   */\n  POPUP_WIDTH: 483,\n  /**\r\n   * Default popup window height\r\n   */\n  POPUP_HEIGHT: 600,\n  /**\r\n   * Name of the popup window starts with\r\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n  /**\r\n   * Default popup monitor poll interval in milliseconds\r\n   */\n  DEFAULT_POLL_INTERVAL_MS: 30,\n  /**\r\n   * Msal-browser SKU\r\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nconst NativeConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n  MATS_TELEMETRY: \"MATS\"\n};\nconst NativeExtensionMethod = {\n  HandshakeRequest: \"Handshake\",\n  HandshakeResponse: \"HandshakeResponse\",\n  GetToken: \"GetToken\",\n  Response: \"Response\"\n};\nconst BrowserCacheLocation = {\n  LocalStorage: \"localStorage\",\n  SessionStorage: \"sessionStorage\",\n  MemoryStorage: \"memoryStorage\"\n};\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\nconst HTTP_REQUEST_TYPE = {\n  GET: \"GET\",\n  POST: \"POST\"\n};\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\nconst TemporaryCacheKeys = {\n  AUTHORITY: \"authority\",\n  ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n  SESSION_STATE: \"session.state\",\n  REQUEST_STATE: \"request.state\",\n  NONCE_IDTOKEN: \"nonce.id_token\",\n  ORIGIN_URI: \"request.origin\",\n  RENEW_STATUS: \"token.renew.status\",\n  URL_HASH: \"urlHash\",\n  REQUEST_PARAMS: \"request.params\",\n  SCOPES: \"scopes\",\n  INTERACTION_STATUS_KEY: \"interaction.status\",\n  CCS_CREDENTIAL: \"ccs.credential\",\n  CORRELATION_ID: \"request.correlationId\",\n  NATIVE_REQUEST: \"request.native\",\n  REDIRECT_CONTEXT: \"request.redirect.context\"\n};\nconst StaticCacheKeys = {\n  ACCOUNT_KEYS: \"msal.account.keys\",\n  TOKEN_KEYS: \"msal.token.keys\"\n};\n/**\r\n * Cache keys stored in-memory\r\n */\nconst InMemoryCacheKeys = {\n  WRAPPER_SKU: \"wrapper.sku\",\n  WRAPPER_VER: \"wrapper.version\"\n};\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\nconst ApiId = {\n  acquireTokenRedirect: 861,\n  acquireTokenPopup: 862,\n  ssoSilent: 863,\n  acquireTokenSilent_authCode: 864,\n  handleRedirectPromise: 865,\n  acquireTokenByCode: 866,\n  acquireTokenSilent_silentFlow: 61,\n  logout: 961,\n  logoutPopup: 962\n};\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\nvar InteractionType;\n(function (InteractionType) {\n  InteractionType[\"Redirect\"] = \"redirect\";\n  InteractionType[\"Popup\"] = \"popup\";\n  InteractionType[\"Silent\"] = \"silent\";\n  InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\nconst InteractionStatus = {\n  /**\r\n   * Initial status before interaction occurs\r\n   */\n  Startup: \"startup\",\n  /**\r\n   * Status set when all login calls occuring\r\n   */\n  Login: \"login\",\n  /**\r\n   * Status set when logout call occuring\r\n   */\n  Logout: \"logout\",\n  /**\r\n   * Status set for acquireToken calls\r\n   */\n  AcquireToken: \"acquireToken\",\n  /**\r\n   * Status set for ssoSilent calls\r\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\r\n   * Status set when handleRedirect in progress\r\n   */\n  HandleRedirect: \"handleRedirect\",\n  /**\r\n   * Status set when interaction is complete\r\n   */\n  None: \"none\"\n};\nconst DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\nconst KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n  React: \"@azure/msal-react\",\n  Angular: \"@azure/msal-angular\"\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n   * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n   * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n   */\n  Default: 0,\n  /*\r\n   * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n   * refresh tokens.\r\n   */\n  AccessToken: 1,\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n   * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n   * will not be renewed and acquireTokenSilent will fail.\r\n   */\n  AccessTokenAndRefreshToken: 2,\n  /*\r\n   * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n   * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n   * renewed and acquireTokenSilent will fail.\r\n   */\n  RefreshToken: 3,\n  /*\r\n   * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n   * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n   * setting \"forceRefresh: true\".\r\n   */\n  RefreshTokenAndNetwork: 4,\n  /*\r\n   * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n   * always fail if 3rd party cookies are blocked by the browser.\r\n   */\n  Skip: 5\n};\nconst iFrameRenewalPolicies = [CacheLookupPolicy.Default, CacheLookupPolicy.Skip, CacheLookupPolicy.RefreshTokenAndNetwork];\nconst LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\nconst LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\nconst BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\nexport { ApiId, BROWSER_PERF_ENABLED_KEY, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, LOG_LEVEL_CACHE_KEY, LOG_PII_CACHE_KEY, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU, iFrameRenewalPolicies };","map":{"version":3,"names":["BrowserConstants","INTERACTION_IN_PROGRESS_VALUE","INVALID_GRANT_ERROR","POPUP_WIDTH","POPUP_HEIGHT","POPUP_NAME_PREFIX","DEFAULT_POLL_INTERVAL_MS","MSAL_SKU","NativeConstants","CHANNEL_ID","PREFERRED_EXTENSION_ID","MATS_TELEMETRY","NativeExtensionMethod","HandshakeRequest","HandshakeResponse","GetToken","Response","BrowserCacheLocation","LocalStorage","SessionStorage","MemoryStorage","HTTP_REQUEST_TYPE","GET","POST","TemporaryCacheKeys","AUTHORITY","ACQUIRE_TOKEN_ACCOUNT","SESSION_STATE","REQUEST_STATE","NONCE_IDTOKEN","ORIGIN_URI","RENEW_STATUS","URL_HASH","REQUEST_PARAMS","SCOPES","INTERACTION_STATUS_KEY","CCS_CREDENTIAL","CORRELATION_ID","NATIVE_REQUEST","REDIRECT_CONTEXT","StaticCacheKeys","ACCOUNT_KEYS","TOKEN_KEYS","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","ApiId","acquireTokenRedirect","acquireTokenPopup","ssoSilent","acquireTokenSilent_authCode","handleRedirectPromise","acquireTokenByCode","acquireTokenSilent_silentFlow","logout","logoutPopup","InteractionType","InteractionStatus","Startup","Login","Logout","AcquireToken","SsoSilent","HandleRedirect","None","DEFAULT_REQUEST","scopes","OIDC_DEFAULT_SCOPES","KEY_FORMAT_JWK","WrapperSKU","React","Angular","DB_NAME","DB_VERSION","DB_TABLE_NAME","CacheLookupPolicy","Default","AccessToken","AccessTokenAndRefreshToken","RefreshToken","RefreshTokenAndNetwork","Skip","iFrameRenewalPolicies","LOG_LEVEL_CACHE_KEY","LOG_PII_CACHE_KEY","BROWSER_PERF_ENABLED_KEY"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserConstants.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { OIDC_DEFAULT_SCOPES } from \"@azure/msal-common\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const BrowserConstants = {\r\n    /**\r\n     * Interaction in progress cache value\r\n     */\r\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\r\n    /**\r\n     * Invalid grant error code\r\n     */\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    /**\r\n     * Default popup window width\r\n     */\r\n    POPUP_WIDTH: 483,\r\n    /**\r\n     * Default popup window height\r\n     */\r\n    POPUP_HEIGHT: 600,\r\n    /**\r\n     * Name of the popup window starts with\r\n     */\r\n    POPUP_NAME_PREFIX: \"msal\",\r\n    /**\r\n     * Default popup monitor poll interval in milliseconds\r\n     */\r\n    DEFAULT_POLL_INTERVAL_MS: 30,\r\n    /**\r\n     * Msal-browser SKU\r\n     */\r\n    MSAL_SKU: \"msal.js.browser\",\r\n};\r\n\r\nexport const NativeConstants = {\r\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\r\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\r\n    MATS_TELEMETRY: \"MATS\",\r\n};\r\n\r\nexport const NativeExtensionMethod = {\r\n    HandshakeRequest: \"Handshake\",\r\n    HandshakeResponse: \"HandshakeResponse\",\r\n    GetToken: \"GetToken\",\r\n    Response: \"Response\",\r\n} as const;\r\nexport type NativeExtensionMethod =\r\n    (typeof NativeExtensionMethod)[keyof typeof NativeExtensionMethod];\r\n\r\nexport const BrowserCacheLocation = {\r\n    LocalStorage: \"localStorage\",\r\n    SessionStorage: \"sessionStorage\",\r\n    MemoryStorage: \"memoryStorage\",\r\n} as const;\r\nexport type BrowserCacheLocation =\r\n    (typeof BrowserCacheLocation)[keyof typeof BrowserCacheLocation];\r\n\r\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\r\nexport const HTTP_REQUEST_TYPE = {\r\n    GET: \"GET\",\r\n    POST: \"POST\",\r\n} as const;\r\nexport type HTTP_REQUEST_TYPE =\r\n    (typeof HTTP_REQUEST_TYPE)[keyof typeof HTTP_REQUEST_TYPE];\r\n\r\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\r\nexport const TemporaryCacheKeys = {\r\n    AUTHORITY: \"authority\",\r\n    ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\r\n    SESSION_STATE: \"session.state\",\r\n    REQUEST_STATE: \"request.state\",\r\n    NONCE_IDTOKEN: \"nonce.id_token\",\r\n    ORIGIN_URI: \"request.origin\",\r\n    RENEW_STATUS: \"token.renew.status\",\r\n    URL_HASH: \"urlHash\",\r\n    REQUEST_PARAMS: \"request.params\",\r\n    SCOPES: \"scopes\",\r\n    INTERACTION_STATUS_KEY: \"interaction.status\",\r\n    CCS_CREDENTIAL: \"ccs.credential\",\r\n    CORRELATION_ID: \"request.correlationId\",\r\n    NATIVE_REQUEST: \"request.native\",\r\n    REDIRECT_CONTEXT: \"request.redirect.context\",\r\n} as const;\r\nexport type TemporaryCacheKeys =\r\n    (typeof TemporaryCacheKeys)[keyof typeof TemporaryCacheKeys];\r\n\r\nexport const StaticCacheKeys = {\r\n    ACCOUNT_KEYS: \"msal.account.keys\",\r\n    TOKEN_KEYS: \"msal.token.keys\",\r\n} as const;\r\nexport type StaticCacheKeys =\r\n    (typeof StaticCacheKeys)[keyof typeof StaticCacheKeys];\r\n\r\n/**\r\n * Cache keys stored in-memory\r\n */\r\nexport const InMemoryCacheKeys = {\r\n    WRAPPER_SKU: \"wrapper.sku\",\r\n    WRAPPER_VER: \"wrapper.version\",\r\n} as const;\r\nexport type InMemoryCacheKeys =\r\n    (typeof InMemoryCacheKeys)[keyof typeof InMemoryCacheKeys];\r\n\r\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\r\nexport const ApiId = {\r\n    acquireTokenRedirect: 861,\r\n    acquireTokenPopup: 862,\r\n    ssoSilent: 863,\r\n    acquireTokenSilent_authCode: 864,\r\n    handleRedirectPromise: 865,\r\n    acquireTokenByCode: 866,\r\n    acquireTokenSilent_silentFlow: 61,\r\n    logout: 961,\r\n    logoutPopup: 962,\r\n} as const;\r\nexport type ApiId = (typeof ApiId)[keyof typeof ApiId];\r\n\r\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\r\nexport enum InteractionType {\r\n    Redirect = \"redirect\",\r\n    Popup = \"popup\",\r\n    Silent = \"silent\",\r\n    None = \"none\",\r\n}\r\n\r\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\r\nexport const InteractionStatus = {\r\n    /**\r\n     * Initial status before interaction occurs\r\n     */\r\n    Startup: \"startup\",\r\n    /**\r\n     * Status set when all login calls occuring\r\n     */\r\n    Login: \"login\",\r\n    /**\r\n     * Status set when logout call occuring\r\n     */\r\n    Logout: \"logout\",\r\n    /**\r\n     * Status set for acquireToken calls\r\n     */\r\n    AcquireToken: \"acquireToken\",\r\n    /**\r\n     * Status set for ssoSilent calls\r\n     */\r\n    SsoSilent: \"ssoSilent\",\r\n    /**\r\n     * Status set when handleRedirect in progress\r\n     */\r\n    HandleRedirect: \"handleRedirect\",\r\n    /**\r\n     * Status set when interaction is complete\r\n     */\r\n    None: \"none\",\r\n} as const;\r\nexport type InteractionStatus =\r\n    (typeof InteractionStatus)[keyof typeof InteractionStatus];\r\n\r\nexport const DEFAULT_REQUEST: RedirectRequest | PopupRequest = {\r\n    scopes: OIDC_DEFAULT_SCOPES,\r\n};\r\n\r\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\r\nexport const KEY_FORMAT_JWK = \"jwk\";\r\n\r\n// Supported wrapper SKUs\r\nexport const WrapperSKU = {\r\n    React: \"@azure/msal-react\",\r\n    Angular: \"@azure/msal-angular\",\r\n} as const;\r\nexport type WrapperSKU = (typeof WrapperSKU)[keyof typeof WrapperSKU];\r\n\r\n// DatabaseStorage Constants\r\nexport const DB_NAME = \"msal.db\";\r\nexport const DB_VERSION = 1;\r\nexport const DB_TABLE_NAME = `${DB_NAME}.keys`;\r\n\r\nexport const CacheLookupPolicy = {\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n     */\r\n    Default: 0, // 0 is falsy, is equivalent to not passing in a CacheLookupPolicy\r\n    /*\r\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n     * refresh tokens.\r\n     */\r\n    AccessToken: 1,\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n     * will not be renewed and acquireTokenSilent will fail.\r\n     */\r\n    AccessTokenAndRefreshToken: 2,\r\n    /*\r\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n     * renewed and acquireTokenSilent will fail.\r\n     */\r\n    RefreshToken: 3,\r\n    /*\r\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n     * setting \"forceRefresh: true\".\r\n     */\r\n    RefreshTokenAndNetwork: 4,\r\n    /*\r\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n     * always fail if 3rd party cookies are blocked by the browser.\r\n     */\r\n    Skip: 5,\r\n} as const;\r\nexport type CacheLookupPolicy =\r\n    (typeof CacheLookupPolicy)[keyof typeof CacheLookupPolicy];\r\n\r\nexport const iFrameRenewalPolicies: CacheLookupPolicy[] = [\r\n    CacheLookupPolicy.Default,\r\n    CacheLookupPolicy.Skip,\r\n    CacheLookupPolicy.RefreshTokenAndNetwork,\r\n];\r\n\r\nexport const LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\r\nexport const LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\r\n\r\nexport const BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}