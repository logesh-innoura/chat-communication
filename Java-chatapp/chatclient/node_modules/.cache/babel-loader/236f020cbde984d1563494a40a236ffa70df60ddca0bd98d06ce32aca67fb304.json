{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */\nfunction getTenantIdFromIdTokenClaims(idTokenClaims) {\n  if (idTokenClaims) {\n    const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\n    return tenantId || null;\n  }\n  return null;\n}\nexport { getTenantIdFromIdTokenClaims };","map":{"version":3,"names":["getTenantIdFromIdTokenClaims","idTokenClaims","tenantId","tid","tfp","acr"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\account\\TokenClaims.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Type which describes Id Token claims known by MSAL.\r\n */\r\nexport type TokenClaims = {\r\n    /**\r\n     * Audience\r\n     */\r\n    aud?: string;\r\n    /**\r\n     * Issuer\r\n     */\r\n    iss?: string;\r\n    /**\r\n     * Issued at\r\n     */\r\n    iat?: number;\r\n    /**\r\n     * Not valid before\r\n     */\r\n    nbf?: number;\r\n    /**\r\n     * Immutable object identifier, this ID uniquely identifies the user across applications\r\n     */\r\n    oid?: string;\r\n    /**\r\n     * Immutable subject identifier, this is a pairwise identifier - it is unique to a particular application ID\r\n     */\r\n    sub?: string;\r\n    /**\r\n     * Users' tenant or '9188040d-6c67-4c5b-b112-36a304b66dad' for personal accounts.\r\n     */\r\n    tid?: string;\r\n    /**\r\n     * Trusted Framework Policy (B2C) The name of the policy that was used to acquire the ID token.\r\n     */\r\n    tfp?: string;\r\n    /**\r\n     * Authentication Context Class Reference (B2C) Used only with older policies.\r\n     */\r\n    acr?: string;\r\n    ver?: string;\r\n    upn?: string;\r\n    preferred_username?: string;\r\n    login_hint?: string;\r\n    emails?: string[];\r\n    name?: string;\r\n    nonce?: string;\r\n    /**\r\n     * Expiration\r\n     */\r\n    exp?: number;\r\n    home_oid?: string;\r\n    sid?: string;\r\n    cloud_instance_host_name?: string;\r\n    cnf?: {\r\n        kid: string;\r\n    };\r\n    x5c_ca?: string[];\r\n    ts?: number;\r\n    at?: string;\r\n    u?: string;\r\n    p?: string;\r\n    m?: string;\r\n    roles?: string[];\r\n    amr?: string[];\r\n    idp?: string;\r\n    auth_time?: number;\r\n    /**\r\n     * \tRegion of the resource tenant\r\n     */\r\n    tenant_region_scope?: string;\r\n    tenant_region_sub_scope?: string;\r\n};\r\n\r\n/**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nexport function getTenantIdFromIdTokenClaims(\r\n    idTokenClaims?: TokenClaims\r\n): string | null {\r\n    if (idTokenClaims) {\r\n        const tenantId =\r\n            idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\r\n        return tenantId || null;\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":";;;AAAA;;;AAGG;AA4EH;;;;;;;;AAQG;AACG,SAAUA,4BAA4BA,CACxCC,aAA2B;EAE3B,IAAIA,aAAa,EAAE;IACf,MAAMC,QAAQ,GACVD,aAAa,CAACE,GAAG,IAAIF,aAAa,CAACG,GAAG,IAAIH,aAAa,CAACI,GAAG;IAC/D,OAAOH,QAAQ,IAAI,IAAI;EAC1B;EACD,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}