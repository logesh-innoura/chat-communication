{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { EventType } from './EventType.mjs';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass EventMessageUtils {\n  /**\r\n   * Gets interaction status from event message\r\n   * @param message\r\n   * @param currentStatus\r\n   */\n  static getInteractionStatusFromEvent(message, currentStatus) {\n    switch (message.eventType) {\n      case EventType.LOGIN_START:\n        return InteractionStatus.Login;\n      case EventType.SSO_SILENT_START:\n        return InteractionStatus.SsoSilent;\n      case EventType.ACQUIRE_TOKEN_START:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          return InteractionStatus.AcquireToken;\n        }\n        break;\n      case EventType.HANDLE_REDIRECT_START:\n        return InteractionStatus.HandleRedirect;\n      case EventType.LOGOUT_START:\n        return InteractionStatus.Logout;\n      case EventType.SSO_SILENT_SUCCESS:\n      case EventType.SSO_SILENT_FAILURE:\n        if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n          // Prevent this event from clearing any status other than ssoSilent\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGOUT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n          // Prevent this event from clearing any status other than logout\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.HANDLE_REDIRECT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n          // Prevent this event from clearing any status other than handleRedirect\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGIN_SUCCESS:\n      case EventType.LOGIN_FAILURE:\n      case EventType.ACQUIRE_TOKEN_SUCCESS:\n      case EventType.ACQUIRE_TOKEN_FAILURE:\n      case EventType.RESTORE_FROM_BFCACHE:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n            // Prevent this event from clearing any status other than login or acquireToken\n            break;\n          }\n          return InteractionStatus.None;\n        }\n        break;\n    }\n    return null;\n  }\n}\nexport { EventMessageUtils };","map":{"version":3,"names":["EventMessageUtils","getInteractionStatusFromEvent","message","currentStatus","eventType","EventType","LOGIN_START","InteractionStatus","Login","SSO_SILENT_START","SsoSilent","ACQUIRE_TOKEN_START","interactionType","InteractionType","Redirect","Popup","AcquireToken","HANDLE_REDIRECT_START","HandleRedirect","LOGOUT_START","Logout","SSO_SILENT_SUCCESS","SSO_SILENT_FAILURE","None","LOGOUT_END","HANDLE_REDIRECT_END","LOGIN_SUCCESS","LOGIN_FAILURE","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE","RESTORE_FROM_BFCACHE"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\event\\EventMessage.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError, AccountInfo } from \"@azure/msal-common\";\r\nimport { EventType } from \"./EventType\";\r\nimport { InteractionStatus, InteractionType } from \"../utils/BrowserConstants\";\r\nimport {\r\n    PopupRequest,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    SsoSilentRequest,\r\n    EndSessionRequest,\r\n    AuthenticationResult,\r\n} from \"..\";\r\n\r\nexport type EventMessage = {\r\n    eventType: EventType;\r\n    interactionType: InteractionType | null;\r\n    payload: EventPayload;\r\n    error: EventError;\r\n    timestamp: number;\r\n};\r\n\r\nexport type PopupEvent = {\r\n    popupWindow: Window;\r\n};\r\n\r\nexport type EventPayload =\r\n    | AccountInfo\r\n    | PopupRequest\r\n    | RedirectRequest\r\n    | SilentRequest\r\n    | SsoSilentRequest\r\n    | EndSessionRequest\r\n    | AuthenticationResult\r\n    | PopupEvent\r\n    | null;\r\n\r\nexport type EventError = AuthError | Error | null;\r\n\r\nexport type EventCallbackFunction = (message: EventMessage) => void;\r\n\r\nexport class EventMessageUtils {\r\n    /**\r\n     * Gets interaction status from event message\r\n     * @param message\r\n     * @param currentStatus\r\n     */\r\n    static getInteractionStatusFromEvent(\r\n        message: EventMessage,\r\n        currentStatus?: InteractionStatus\r\n    ): InteractionStatus | null {\r\n        switch (message.eventType) {\r\n            case EventType.LOGIN_START:\r\n                return InteractionStatus.Login;\r\n            case EventType.SSO_SILENT_START:\r\n                return InteractionStatus.SsoSilent;\r\n            case EventType.ACQUIRE_TOKEN_START:\r\n                if (\r\n                    message.interactionType === InteractionType.Redirect ||\r\n                    message.interactionType === InteractionType.Popup\r\n                ) {\r\n                    return InteractionStatus.AcquireToken;\r\n                }\r\n                break;\r\n            case EventType.HANDLE_REDIRECT_START:\r\n                return InteractionStatus.HandleRedirect;\r\n            case EventType.LOGOUT_START:\r\n                return InteractionStatus.Logout;\r\n            case EventType.SSO_SILENT_SUCCESS:\r\n            case EventType.SSO_SILENT_FAILURE:\r\n                if (\r\n                    currentStatus &&\r\n                    currentStatus !== InteractionStatus.SsoSilent\r\n                ) {\r\n                    // Prevent this event from clearing any status other than ssoSilent\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGOUT_END:\r\n                if (\r\n                    currentStatus &&\r\n                    currentStatus !== InteractionStatus.Logout\r\n                ) {\r\n                    // Prevent this event from clearing any status other than logout\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.HANDLE_REDIRECT_END:\r\n                if (\r\n                    currentStatus &&\r\n                    currentStatus !== InteractionStatus.HandleRedirect\r\n                ) {\r\n                    // Prevent this event from clearing any status other than handleRedirect\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGIN_SUCCESS:\r\n            case EventType.LOGIN_FAILURE:\r\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\r\n            case EventType.ACQUIRE_TOKEN_FAILURE:\r\n            case EventType.RESTORE_FROM_BFCACHE:\r\n                if (\r\n                    message.interactionType === InteractionType.Redirect ||\r\n                    message.interactionType === InteractionType.Popup\r\n                ) {\r\n                    if (\r\n                        currentStatus &&\r\n                        currentStatus !== InteractionStatus.Login &&\r\n                        currentStatus !== InteractionStatus.AcquireToken\r\n                    ) {\r\n                        // Prevent this event from clearing any status other than login or acquireToken\r\n                        break;\r\n                    }\r\n                    return InteractionStatus.None;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA;;;AAGG;MAyCUA,iBAAiB;EAC1B;;;;AAIG;EACH,OAAOC,6BAA6BA,CAChCC,OAAqB,EACrBC,aAAiC;IAEjC,QAAQD,OAAO,CAACE,SAAS;MACrB,KAAKC,SAAS,CAACC,WAAW;QACtB,OAAOC,iBAAiB,CAACC,KAAK;MAClC,KAAKH,SAAS,CAACI,gBAAgB;QAC3B,OAAOF,iBAAiB,CAACG,SAAS;MACtC,KAAKL,SAAS,CAACM,mBAAmB;QAC9B,IACIT,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACC,QAAQ,IACpDZ,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACE,KAAK,EACnD;UACE,OAAOR,iBAAiB,CAACS,YAAY;QACxC;QACD;MACJ,KAAKX,SAAS,CAACY,qBAAqB;QAChC,OAAOV,iBAAiB,CAACW,cAAc;MAC3C,KAAKb,SAAS,CAACc,YAAY;QACvB,OAAOZ,iBAAiB,CAACa,MAAM;MACnC,KAAKf,SAAS,CAACgB,kBAAkB;MACjC,KAAKhB,SAAS,CAACiB,kBAAkB;QAC7B,IACInB,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACG,SAAS,EAC/C;;UAEE;QACH;QACD,OAAOH,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACmB,UAAU;QACrB,IACIrB,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACa,MAAM,EAC5C;;UAEE;QACH;QACD,OAAOb,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACoB,mBAAmB;QAC9B,IACItB,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACW,cAAc,EACpD;;UAEE;QACH;QACD,OAAOX,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACqB,aAAa;MAC5B,KAAKrB,SAAS,CAACsB,aAAa;MAC5B,KAAKtB,SAAS,CAACuB,qBAAqB;MACpC,KAAKvB,SAAS,CAACwB,qBAAqB;MACpC,KAAKxB,SAAS,CAACyB,oBAAoB;QAC/B,IACI5B,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACC,QAAQ,IACpDZ,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACE,KAAK,EACnD;UACE,IACIZ,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACC,KAAK,IACzCL,aAAa,KAAKI,iBAAiB,CAACS,YAAY,EAClD;;YAEE;UACH;UACD,OAAOT,iBAAiB,CAACgB,IAAI;QAChC;QACD;IAGP;IACD,OAAO,IAAI;;AAElB"},"metadata":{},"sourceType":"module","externalDependencies":[]}