{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst KeyLocation = {\n  SW: \"sw\",\n  UHW: \"uhw\"\n};\n/** @internal */\nclass PopTokenGenerator {\n  constructor(cryptoUtils, performanceClient) {\n    this.cryptoUtils = cryptoUtils;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n   * @param request\r\n   * @returns\r\n   */\n  async generateCnf(request, logger) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n    const reqCnf = await invokeAsync(this.generateKid.bind(this), PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\n    const reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n    return {\n      kid: reqCnf.kid,\n      reqCnfString,\n      reqCnfHash: await this.cryptoUtils.hashString(reqCnfString)\n    };\n  }\n  /**\r\n   * Generates key_id for a SHR token request\r\n   * @param request\r\n   * @returns\r\n   */\n  async generateKid(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n    const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n    return {\n      kid: kidThumbprint,\n      xms_ksl: KeyLocation.SW\n    };\n  }\n  /**\r\n   * Signs the POP access_token with the local generated key-pair\r\n   * @param accessToken\r\n   * @param request\r\n   * @returns\r\n   */\n  async signPopToken(accessToken, keyId, request) {\n    return this.signPayload(accessToken, keyId, request);\n  }\n  /**\r\n   * Utility function to generate the signed JWT for an access_token\r\n   * @param payload\r\n   * @param kid\r\n   * @param request\r\n   * @param claims\r\n   * @returns\r\n   */\n  async signPayload(payload, keyId, request, claims) {\n    // Deconstruct request to extract SHR parameters\n    const {\n      resourceRequestMethod,\n      resourceRequestUri,\n      shrClaims,\n      shrNonce,\n      shrOptions\n    } = request;\n    const resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n    const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n    return this.cryptoUtils.signJwt({\n      at: payload,\n      ts: TimeUtils.nowSeconds(),\n      m: resourceRequestMethod?.toUpperCase(),\n      u: resourceUrlComponents?.HostNameAndPort,\n      nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n      p: resourceUrlComponents?.AbsolutePath,\n      q: resourceUrlComponents?.QueryString ? [[], resourceUrlComponents.QueryString] : undefined,\n      client_claims: shrClaims || undefined,\n      ...claims\n    }, keyId, shrOptions, request.correlationId);\n  }\n}\nexport { PopTokenGenerator };","map":{"version":3,"names":["KeyLocation","SW","UHW","PopTokenGenerator","constructor","cryptoUtils","performanceClient","generateCnf","request","logger","addQueueMeasurement","PerformanceEvents","PopTokenGenerateCnf","correlationId","reqCnf","invokeAsync","generateKid","bind","reqCnfString","base64Encode","JSON","stringify","kid","reqCnfHash","hashString","PopTokenGenerateKid","kidThumbprint","getPublicKeyThumbprint","xms_ksl","signPopToken","accessToken","keyId","signPayload","payload","claims","resourceRequestMethod","resourceRequestUri","shrClaims","shrNonce","shrOptions","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","signJwt","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\crypto\\PopTokenGenerator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\r\nimport { Logger } from \"../logger/Logger\";\r\n\r\n/**\r\n * See eSTS docs for more info.\r\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\r\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\r\n *      - sw: software storage\r\n *      - uhw: hardware storage\r\n */\r\ntype ReqCnf = {\r\n    kid: string;\r\n    xms_ksl: KeyLocation;\r\n};\r\n\r\nexport type ReqCnfData = {\r\n    kid: string;\r\n    reqCnfString: string;\r\n    reqCnfHash: string;\r\n};\r\n\r\nconst KeyLocation = {\r\n    SW: \"sw\",\r\n    UHW: \"uhw\",\r\n} as const;\r\nexport type KeyLocation = (typeof KeyLocation)[keyof typeof KeyLocation];\r\n\r\n/** @internal */\r\nexport class PopTokenGenerator {\r\n    private cryptoUtils: ICrypto;\r\n    private performanceClient?: IPerformanceClient;\r\n\r\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient) {\r\n        this.cryptoUtils = cryptoUtils;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateCnf(\r\n        request: SignedHttpRequestParameters,\r\n        logger: Logger\r\n    ): Promise<ReqCnfData> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.PopTokenGenerateCnf,\r\n            request.correlationId\r\n        );\r\n\r\n        const reqCnf = await invokeAsync(\r\n            this.generateKid.bind(this),\r\n            PerformanceEvents.PopTokenGenerateCnf,\r\n            logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request);\r\n        const reqCnfString: string = this.cryptoUtils.base64Encode(\r\n            JSON.stringify(reqCnf)\r\n        );\r\n\r\n        return {\r\n            kid: reqCnf.kid,\r\n            reqCnfString,\r\n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.PopTokenGenerateKid,\r\n            request.correlationId\r\n        );\r\n\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(\r\n            request\r\n        );\r\n\r\n        return {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async signPopToken(\r\n        accessToken: string,\r\n        keyId: string,\r\n        request: SignedHttpRequestParameters\r\n    ): Promise<string> {\r\n        return this.signPayload(accessToken, keyId, request);\r\n    }\r\n\r\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */\r\n    async signPayload(\r\n        payload: string,\r\n        keyId: string,\r\n        request: SignedHttpRequestParameters,\r\n        claims?: object\r\n    ): Promise<string> {\r\n        // Deconstruct request to extract SHR parameters\r\n        const {\r\n            resourceRequestMethod,\r\n            resourceRequestUri,\r\n            shrClaims,\r\n            shrNonce,\r\n            shrOptions,\r\n        } = request;\r\n\r\n        const resourceUrlString = resourceRequestUri\r\n            ? new UrlString(resourceRequestUri)\r\n            : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n        return this.cryptoUtils.signJwt(\r\n            {\r\n                at: payload,\r\n                ts: TimeUtils.nowSeconds(),\r\n                m: resourceRequestMethod?.toUpperCase(),\r\n                u: resourceUrlComponents?.HostNameAndPort,\r\n                nonce: shrNonce || this.cryptoUtils.createNewGuid(),\r\n                p: resourceUrlComponents?.AbsolutePath,\r\n                q: resourceUrlComponents?.QueryString\r\n                    ? [[], resourceUrlComponents.QueryString]\r\n                    : undefined,\r\n                client_claims: shrClaims || undefined,\r\n                ...claims,\r\n            },\r\n            keyId,\r\n            shrOptions,\r\n            request.correlationId\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AA4BH,MAAMA,WAAW,GAAG;EAChBC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE;CACC;AAGV;MACaC,iBAAiB;EAI1BC,WAAYA,CAAAC,WAAoB,EAAEC,iBAAsC;IACpE,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;;EAG9C;;;;;AAKG;EACH,MAAMC,WAAWA,CACbC,OAAoC,EACpCC,MAAc;IAEd,IAAI,CAACH,iBAAiB,EAAEI,mBAAmB,CACvCC,iBAAiB,CAACC,mBAAmB,EACrCJ,OAAO,CAACK,aAAa,CACxB;IAED,MAAMC,MAAM,GAAG,MAAMC,WAAW,CAC5B,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC,EAC3BN,iBAAiB,CAACC,mBAAmB,EACrCH,MAAM,EACN,IAAI,CAACH,iBAAiB,EACtBE,OAAO,CAACK,aAAa,CACxB,CAACL,OAAO,CAAC;IACV,MAAMU,YAAY,GAAW,IAAI,CAACb,WAAW,CAACc,YAAY,CACtDC,IAAI,CAACC,SAAS,CAACP,MAAM,CAAC,CACzB;IAED,OAAO;MACHQ,GAAG,EAAER,MAAM,CAACQ,GAAG;MACfJ,YAAY;MACZK,UAAU,EAAE,MAAM,IAAI,CAAClB,WAAW,CAACmB,UAAU,CAACN,YAAY;KAC7D;;EAGL;;;;AAIG;EACH,MAAMF,WAAWA,CAACR,OAAoC;IAClD,IAAI,CAACF,iBAAiB,EAAEI,mBAAmB,CACvCC,iBAAiB,CAACc,mBAAmB,EACrCjB,OAAO,CAACK,aAAa,CACxB;IAED,MAAMa,aAAa,GAAG,MAAM,IAAI,CAACrB,WAAW,CAACsB,sBAAsB,CAC/DnB,OAAO,CACV;IAED,OAAO;MACHc,GAAG,EAAEI,aAAa;MAClBE,OAAO,EAAE5B,WAAW,CAACC;KACxB;;EAGL;;;;;AAKG;EACH,MAAM4B,YAAYA,CACdC,WAAmB,EACnBC,KAAa,EACbvB,OAAoC;IAEpC,OAAO,IAAI,CAACwB,WAAW,CAACF,WAAW,EAAEC,KAAK,EAAEvB,OAAO,CAAC;;EAGxD;;;;;;;AAOG;EACH,MAAMwB,WAAWA,CACbC,OAAe,EACfF,KAAa,EACbvB,OAAoC,EACpC0B,MAAe;;IAGf,MAAM;MACFC,qBAAqB;MACrBC,kBAAkB;MAClBC,SAAS;MACTC,QAAQ;MACRC;IAAU,CACb,GAAG/B,OAAO;IAEX,MAAMgC,iBAAiB,GAAGJ,kBAAkB,GACtC,IAAIK,SAAS,CAACL,kBAAkB,CAAC,GACjCM,SAAS;IACf,MAAMC,qBAAqB,GAAGH,iBAAiB,EAAEI,gBAAgB,EAAE;IACnE,OAAO,IAAI,CAACvC,WAAW,CAACwC,OAAO,CAC3B;MACIC,EAAE,EAAEb,OAAO;MACXc,EAAE,EAAEC,SAAS,CAACC,UAAU,EAAE;MAC1BC,CAAC,EAAEf,qBAAqB,EAAEgB,WAAW,EAAE;MACvCC,CAAC,EAAET,qBAAqB,EAAEU,eAAe;MACzCC,KAAK,EAAEhB,QAAQ,IAAI,IAAI,CAACjC,WAAW,CAACkD,aAAa,EAAE;MACnDC,CAAC,EAAEb,qBAAqB,EAAEc,YAAY;MACtCC,CAAC,EAAEf,qBAAqB,EAAEgB,WAAW,GAC/B,CAAC,EAAE,EAAEhB,qBAAqB,CAACgB,WAAW,CAAC,GACvCjB,SAAS;MACfkB,aAAa,EAAEvB,SAAS,IAAIK,SAAS;MACrC,GAAGR;KACN,EACDH,KAAK,EACLQ,UAAU,EACV/B,OAAO,CAACK,aAAa,CACxB;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}