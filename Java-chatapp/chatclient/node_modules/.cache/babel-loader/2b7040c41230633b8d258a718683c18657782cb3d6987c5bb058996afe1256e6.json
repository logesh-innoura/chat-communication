{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { ThrottlingUtils } from './ThrottlingUtils.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { networkError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/** @internal */\nclass NetworkManager {\n  constructor(networkClient, cacheManager) {\n    this.networkClient = networkClient;\n    this.cacheManager = cacheManager;\n  }\n  /**\r\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n   * @param thumbprint\r\n   * @param tokenEndpoint\r\n   * @param options\r\n   */\n  async sendPostRequest(thumbprint, tokenEndpoint, options) {\n    ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n    let response;\n    try {\n      response = await this.networkClient.sendPostRequestAsync(tokenEndpoint, options);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        throw e;\n      } else {\n        throw createClientAuthError(networkError);\n      }\n    }\n    ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n    return response;\n  }\n}\nexport { NetworkManager };","map":{"version":3,"names":["NetworkManager","constructor","networkClient","cacheManager","sendPostRequest","thumbprint","tokenEndpoint","options","ThrottlingUtils","preProcess","response","sendPostRequestAsync","e","AuthError","createClientAuthError","networkError","postProcess"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\network\\NetworkManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\r\nimport { RequestThumbprint } from \"./RequestThumbprint\";\r\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { AuthError } from \"../error/AuthError\";\r\nimport {\r\n    ClientAuthErrorCodes,\r\n    createClientAuthError,\r\n} from \"../error/ClientAuthError\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\n\r\nexport type NetworkResponse<T> = {\r\n    headers: Record<string, string>;\r\n    body: T;\r\n    status: number;\r\n};\r\n\r\nexport type UrlToHttpRequestOptions = {\r\n    protocol: string;\r\n    hostname: string;\r\n    hash: string;\r\n    search: string;\r\n    pathname: string;\r\n    path: string;\r\n    href: string;\r\n    port?: number;\r\n    auth?: string;\r\n};\r\n\r\n/** @internal */\r\nexport class NetworkManager {\r\n    private networkClient: INetworkModule;\r\n    private cacheManager: CacheManager;\r\n\r\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\r\n        this.networkClient = networkClient;\r\n        this.cacheManager = cacheManager;\r\n    }\r\n\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint\r\n     * @param tokenEndpoint\r\n     * @param options\r\n     */\r\n    async sendPostRequest<T extends ServerAuthorizationTokenResponse>(\r\n        thumbprint: RequestThumbprint,\r\n        tokenEndpoint: string,\r\n        options: NetworkRequestOptions\r\n    ): Promise<NetworkResponse<T>> {\r\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\r\n\r\n        let response;\r\n        try {\r\n            response = await this.networkClient.sendPostRequestAsync<T>(\r\n                tokenEndpoint,\r\n                options\r\n            );\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            } else {\r\n                throw createClientAuthError(ClientAuthErrorCodes.networkError);\r\n            }\r\n        }\r\n\r\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\r\n\r\n        return response;\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AA+BH;MACaA,cAAc;EAIvBC,WAAYA,CAAAC,aAA6B,EAAEC,YAA0B;IACjE,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,YAAY,GAAGA,YAAY;;EAGpC;;;;;AAKG;EACH,MAAMC,eAAeA,CACjBC,UAA6B,EAC7BC,aAAqB,EACrBC,OAA8B;IAE9BC,eAAe,CAACC,UAAU,CAAC,IAAI,CAACN,YAAY,EAAEE,UAAU,CAAC;IAEzD,IAAIK,QAAQ;IACZ,IAAI;MACAA,QAAQ,GAAG,MAAM,IAAI,CAACR,aAAa,CAACS,oBAAoB,CACpDL,aAAa,EACbC,OAAO,CACV;IACJ,EAAC,OAAOK,CAAC,EAAE;MACR,IAAIA,CAAC,YAAYC,SAAS,EAAE;QACxB,MAAMD,CAAC;MACV,OAAM;QACH,MAAME,qBAAqB,CAACC,YAAiC,CAAC;MACjE;IACJ;IAEDP,eAAe,CAACQ,WAAW,CAAC,IAAI,CAACb,YAAY,EAAEE,UAAU,EAAEK,QAAQ,CAAC;IAEpE,OAAOA,QAAQ;;AAEtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}