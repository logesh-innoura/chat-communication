{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { PerformanceEvents, invoke, invokeAsync } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { getRandomValues, sha256Digest } from './BrowserCrypto.mjs';\nimport { pkceNotCreated } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * This file defines APIs to generate PKCE codes and code verifiers.\r\n */\n/**\r\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n */\nasync function generatePkceCodes(performanceClient, logger, correlationId) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.GeneratePkceCodes, correlationId);\n  const codeVerifier = invoke(generateCodeVerifier, PerformanceEvents.GenerateCodeVerifier, logger, performanceClient, correlationId)(performanceClient, logger, correlationId);\n  const codeChallenge = await invokeAsync(generateCodeChallengeFromVerifier, PerformanceEvents.GenerateCodeChallengeFromVerifier, logger, performanceClient, correlationId)(codeVerifier, performanceClient, logger, correlationId);\n  return {\n    verifier: codeVerifier,\n    challenge: codeChallenge\n  };\n}\n/**\r\n * Generates a random 32 byte buffer and returns the base64\r\n * encoded string to be used as a PKCE Code Verifier\r\n */\nfunction generateCodeVerifier(performanceClient, logger, correlationId) {\n  try {\n    // Generate random values as utf-8\n    const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n    invoke(getRandomValues, PerformanceEvents.GetRandomValues, logger, performanceClient, correlationId)(buffer);\n    // encode verifier as base64\n    const pkceCodeVerifierB64 = urlEncodeArr(buffer);\n    return pkceCodeVerifierB64;\n  } catch (e) {\n    throw createBrowserAuthError(pkceNotCreated);\n  }\n}\n/**\r\n * Creates a base64 encoded PKCE Code Challenge string from the\r\n * hash created from the PKCE Code Verifier supplied\r\n */\nasync function generateCodeChallengeFromVerifier(pkceCodeVerifier, performanceClient, logger, correlationId) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.GenerateCodeChallengeFromVerifier, correlationId);\n  try {\n    // hashed verifier\n    const pkceHashedCodeVerifier = await invokeAsync(sha256Digest, PerformanceEvents.Sha256Digest, logger, performanceClient, correlationId)(pkceCodeVerifier, performanceClient, correlationId);\n    // encode hash as base64\n    return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n  } catch (e) {\n    throw createBrowserAuthError(pkceNotCreated);\n  }\n}\nexport { generatePkceCodes };","map":{"version":3,"names":["RANDOM_BYTE_ARR_LENGTH","generatePkceCodes","performanceClient","logger","correlationId","addQueueMeasurement","PerformanceEvents","GeneratePkceCodes","codeVerifier","invoke","generateCodeVerifier","GenerateCodeVerifier","codeChallenge","invokeAsync","generateCodeChallengeFromVerifier","GenerateCodeChallengeFromVerifier","verifier","challenge","buffer","Uint8Array","getRandomValues","GetRandomValues","pkceCodeVerifierB64","urlEncodeArr","e","createBrowserAuthError","pkceNotCreated","pkceCodeVerifier","pkceHashedCodeVerifier","sha256Digest","Sha256Digest"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\crypto\\PkceGenerator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    IPerformanceClient,\r\n    Logger,\r\n    PerformanceEvents,\r\n    PkceCodes,\r\n    invoke,\r\n    invokeAsync,\r\n} from \"@azure/msal-common\";\r\nimport {\r\n    createBrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError\";\r\nimport { urlEncodeArr } from \"../encode/Base64Encode\";\r\nimport { getRandomValues, sha256Digest } from \"./BrowserCrypto\";\r\n\r\n// Constant byte array length\r\nconst RANDOM_BYTE_ARR_LENGTH = 32;\r\n\r\n/**\r\n * This file defines APIs to generate PKCE codes and code verifiers.\r\n */\r\n\r\n/**\r\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n */\r\nexport async function generatePkceCodes(\r\n    performanceClient: IPerformanceClient,\r\n    logger: Logger,\r\n    correlationId: string\r\n): Promise<PkceCodes> {\r\n    performanceClient.addQueueMeasurement(\r\n        PerformanceEvents.GeneratePkceCodes,\r\n        correlationId\r\n    );\r\n    const codeVerifier = invoke(\r\n        generateCodeVerifier,\r\n        PerformanceEvents.GenerateCodeVerifier,\r\n        logger,\r\n        performanceClient,\r\n        correlationId\r\n    )(performanceClient, logger, correlationId);\r\n    const codeChallenge = await invokeAsync(\r\n        generateCodeChallengeFromVerifier,\r\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\r\n        logger,\r\n        performanceClient,\r\n        correlationId\r\n    )(codeVerifier, performanceClient, logger, correlationId);\r\n    return {\r\n        verifier: codeVerifier,\r\n        challenge: codeChallenge,\r\n    };\r\n}\r\n\r\n/**\r\n * Generates a random 32 byte buffer and returns the base64\r\n * encoded string to be used as a PKCE Code Verifier\r\n */\r\nfunction generateCodeVerifier(\r\n    performanceClient: IPerformanceClient,\r\n    logger: Logger,\r\n    correlationId: string\r\n): string {\r\n    try {\r\n        // Generate random values as utf-8\r\n        const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\r\n        invoke(\r\n            getRandomValues,\r\n            PerformanceEvents.GetRandomValues,\r\n            logger,\r\n            performanceClient,\r\n            correlationId\r\n        )(buffer);\r\n        // encode verifier as base64\r\n        const pkceCodeVerifierB64: string = urlEncodeArr(buffer);\r\n        return pkceCodeVerifierB64;\r\n    } catch (e) {\r\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a base64 encoded PKCE Code Challenge string from the\r\n * hash created from the PKCE Code Verifier supplied\r\n */\r\nasync function generateCodeChallengeFromVerifier(\r\n    pkceCodeVerifier: string,\r\n    performanceClient: IPerformanceClient,\r\n    logger: Logger,\r\n    correlationId: string\r\n): Promise<string> {\r\n    performanceClient.addQueueMeasurement(\r\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\r\n        correlationId\r\n    );\r\n    try {\r\n        // hashed verifier\r\n        const pkceHashedCodeVerifier = await invokeAsync(\r\n            sha256Digest,\r\n            PerformanceEvents.Sha256Digest,\r\n            logger,\r\n            performanceClient,\r\n            correlationId\r\n        )(pkceCodeVerifier, performanceClient, correlationId);\r\n        // encode hash as base64\r\n        return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\r\n    } catch (e) {\r\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAiBH;AACA,MAAMA,sBAAsB,GAAG,EAAE;AAEjC;;AAEG;AAEH;;AAEG;AACI,eAAeC,iBAAiBA,CACnCC,iBAAqC,EACrCC,MAAc,EACdC,aAAqB;EAErBF,iBAAiB,CAACG,mBAAmB,CACjCC,iBAAiB,CAACC,iBAAiB,EACnCH,aAAa,CAChB;EACD,MAAMI,YAAY,GAAGC,MAAM,CACvBC,oBAAoB,EACpBJ,iBAAiB,CAACK,oBAAoB,EACtCR,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACF,iBAAiB,EAAEC,MAAM,EAAEC,aAAa,CAAC;EAC3C,MAAMQ,aAAa,GAAG,MAAMC,WAAW,CACnCC,iCAAiC,EACjCR,iBAAiB,CAACS,iCAAiC,EACnDZ,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACI,YAAY,EAAEN,iBAAiB,EAAEC,MAAM,EAAEC,aAAa,CAAC;EACzD,OAAO;IACHY,QAAQ,EAAER,YAAY;IACtBS,SAAS,EAAEL;GACd;AACL;AAEA;;;AAGG;AACH,SAASF,oBAAoBA,CACzBR,iBAAqC,EACrCC,MAAc,EACdC,aAAqB;EAErB,IAAI;;IAEA,MAAMc,MAAM,GAAe,IAAIC,UAAU,CAACnB,sBAAsB,CAAC;IACjES,MAAM,CACFW,eAAe,EACfd,iBAAiB,CAACe,eAAe,EACjClB,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACc,MAAM,CAAC;;IAET,MAAMI,mBAAmB,GAAWC,YAAY,CAACL,MAAM,CAAC;IACxD,OAAOI,mBAAmB;EAC7B,EAAC,OAAOE,CAAC,EAAE;IACR,MAAMC,sBAAsB,CAACC,cAAoC,CAAC;EACrE;AACL;AAEA;;;AAGG;AACH,eAAeZ,iCAAiCA,CAC5Ca,gBAAwB,EACxBzB,iBAAqC,EACrCC,MAAc,EACdC,aAAqB;EAErBF,iBAAiB,CAACG,mBAAmB,CACjCC,iBAAiB,CAACS,iCAAiC,EACnDX,aAAa,CAChB;EACD,IAAI;;IAEA,MAAMwB,sBAAsB,GAAG,MAAMf,WAAW,CAC5CgB,YAAY,EACZvB,iBAAiB,CAACwB,YAAY,EAC9B3B,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACuB,gBAAgB,EAAEzB,iBAAiB,EAAEE,aAAa,CAAC;;IAErD,OAAOmB,YAAY,CAAC,IAAIJ,UAAU,CAACS,sBAAsB,CAAC,CAAC;EAC9D,EAAC,OAAOJ,CAAC,EAAE;IACR,MAAMC,sBAAsB,CAACC,cAAoC,CAAC;EACrE;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}