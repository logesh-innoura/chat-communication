{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\nimport { BridgeProxy } from '../naa/BridgeProxy.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass TeamsAppOperatingContext extends BaseOperatingContext {\n  constructor() {\n    super(...arguments);\n    this.bridgeProxy = undefined;\n    this.activeAccount = undefined;\n  }\n  /**\r\n   * Return the module name.  Intended for use with import() to enable dynamic import\r\n   * of the implementation associated with this operating context\r\n   * @returns\r\n   */\n  getModuleName() {\n    return TeamsAppOperatingContext.MODULE_NAME;\n  }\n  /**\r\n   * Returns the unique identifier for this operating context\r\n   * @returns string\r\n   */\n  getId() {\n    return TeamsAppOperatingContext.ID;\n  }\n  getBridgeProxy() {\n    return this.bridgeProxy;\n  }\n  getActiveAccount() {\n    return this.activeAccount;\n  }\n  setActiveAccount(account) {\n    this.activeAccount = account;\n  }\n  /**\r\n   * Checks whether the operating context is available.\r\n   * Confirms that the code is running a browser rather.  This is required.\r\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n   */\n  async initialize() {\n    /*\r\n     * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\r\n     *\r\n     */\n    try {\n      if (typeof window !== \"undefined\") {\n        const bridgeProxy = await BridgeProxy.create();\n        /*\r\n         * Because we want single sign on we need to attempt to\r\n         * grab the active account as part of initialization\r\n         * this.activeAccount = await bridgeProxy.getActiveAccount();\r\n         */\n        try {\n          if (bridgeProxy.getHostCapabilities()?.queryAccount) {\n            this.activeAccount = await bridgeProxy.getActiveAccount();\n          }\n        } catch (e) {\n          this.activeAccount = undefined;\n        }\n        this.bridgeProxy = bridgeProxy;\n        this.available = bridgeProxy !== undefined;\n      } else {\n        this.available = false;\n      }\n    } catch (e) {\n      this.available = false;\n    } finally {\n      return this.available;\n    }\n  }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */\nTeamsAppOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */\nTeamsAppOperatingContext.ID = \"TeamsAppOperatingContext\";\nexport { TeamsAppOperatingContext };","map":{"version":3,"names":["TeamsAppOperatingContext","BaseOperatingContext","constructor","bridgeProxy","undefined","activeAccount","getModuleName","MODULE_NAME","getId","ID","getBridgeProxy","getActiveAccount","setActiveAccount","account","initialize","window","BridgeProxy","create","getHostCapabilities","queryAccount","e","available"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\operatingcontext\\TeamsAppOperatingContext.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\r\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\r\nimport { BridgeProxy } from \"../naa/BridgeProxy\";\r\nimport { AccountInfo } from \"../naa/AccountInfo\";\r\n\r\nexport class TeamsAppOperatingContext extends BaseOperatingContext {\r\n    protected bridgeProxy: IBridgeProxy | undefined = undefined;\r\n    protected activeAccount: AccountInfo | undefined = undefined;\r\n\r\n    /*\r\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n     * containing the implementation for this operating context\r\n     */\r\n    static readonly MODULE_NAME: string = \"\";\r\n\r\n    /**\r\n     * Unique identifier for the operating context\r\n     */\r\n    static readonly ID: string = \"TeamsAppOperatingContext\";\r\n\r\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */\r\n    getModuleName(): string {\r\n        return TeamsAppOperatingContext.MODULE_NAME;\r\n    }\r\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */\r\n    getId(): string {\r\n        return TeamsAppOperatingContext.ID;\r\n    }\r\n\r\n    getBridgeProxy(): IBridgeProxy | undefined {\r\n        return this.bridgeProxy;\r\n    }\r\n\r\n    getActiveAccount(): AccountInfo | undefined {\r\n        return this.activeAccount;\r\n    }\r\n\r\n    setActiveAccount(account: AccountInfo): void {\r\n        this.activeAccount = account;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */\r\n    async initialize(): Promise<boolean> {\r\n        /*\r\n         * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\r\n         *\r\n         */\r\n        try {\r\n            if (typeof window !== \"undefined\") {\r\n                const bridgeProxy: IBridgeProxy = await BridgeProxy.create();\r\n                /*\r\n                 * Because we want single sign on we need to attempt to\r\n                 * grab the active account as part of initialization\r\n                 * this.activeAccount = await bridgeProxy.getActiveAccount();\r\n                 */\r\n                try {\r\n                    if (bridgeProxy.getHostCapabilities()?.queryAccount) {\r\n                        this.activeAccount =\r\n                            await bridgeProxy.getActiveAccount();\r\n                    }\r\n                } catch (e) {\r\n                    this.activeAccount = undefined;\r\n                }\r\n                this.bridgeProxy = bridgeProxy;\r\n                this.available = bridgeProxy !== undefined;\r\n            } else {\r\n                this.available = false;\r\n            }\r\n        } catch (e) {\r\n            this.available = false;\r\n        } finally {\r\n            return this.available;\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA;;;AAGG;AAOG,MAAOA,wBAAyB,SAAQC,oBAAoB;EAAlEC,YAAA;;IACc,IAAW,CAAAC,WAAA,GAA6BC,SAAS;IACjD,IAAa,CAAAC,aAAA,GAA4BD,SAAS;;EAa5D;;;;AAIG;EACHE,aAAaA,CAAA;IACT,OAAON,wBAAwB,CAACO,WAAW;;EAE/C;;;AAGG;EACHC,KAAKA,CAAA;IACD,OAAOR,wBAAwB,CAACS,EAAE;;EAGtCC,cAAcA,CAAA;IACV,OAAO,IAAI,CAACP,WAAW;;EAG3BQ,gBAAgBA,CAAA;IACZ,OAAO,IAAI,CAACN,aAAa;;EAG7BO,gBAAgBA,CAACC,OAAoB;IACjC,IAAI,CAACR,aAAa,GAAGQ,OAAO;;EAGhC;;;;AAIG;EACH,MAAMC,UAAUA,CAAA;IACZ;;;AAGG;IACH,IAAI;MACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;QAC/B,MAAMZ,WAAW,GAAiB,MAAMa,WAAW,CAACC,MAAM,EAAE;QAC5D;;;;AAIG;QACH,IAAI;UACA,IAAId,WAAW,CAACe,mBAAmB,EAAE,EAAEC,YAAY,EAAE;YACjD,IAAI,CAACd,aAAa,GACd,MAAMF,WAAW,CAACQ,gBAAgB,EAAE;UAC3C;QACJ,EAAC,OAAOS,CAAC,EAAE;UACR,IAAI,CAACf,aAAa,GAAGD,SAAS;QACjC;QACD,IAAI,CAACD,WAAW,GAAGA,WAAW;QAC9B,IAAI,CAACkB,SAAS,GAAGlB,WAAW,KAAKC,SAAS;MAC7C,OAAM;QACH,IAAI,CAACiB,SAAS,GAAG,KAAK;MACzB;IACJ,EAAC,OAAOD,CAAC,EAAE;MACR,IAAI,CAACC,SAAS,GAAG,KAAK;IACzB,UAAS;MACN,OAAO,IAAI,CAACA,SAAS;IACxB;;;AA1EL;;;AAGG;AACarB,wBAAW,CAAAO,WAAA,GAAW,EAAE;AAExC;;AAEG;AACaP,wBAAE,CAAAS,EAAA,GAAW,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}