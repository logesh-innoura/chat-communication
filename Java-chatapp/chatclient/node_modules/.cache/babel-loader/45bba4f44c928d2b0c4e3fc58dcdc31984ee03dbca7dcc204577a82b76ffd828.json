{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { ProtocolUtils, createClientAuthError, ClientAuthErrorCodes } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Extracts the BrowserStateObject from the state string.\r\n * @param browserCrypto\r\n * @param state\r\n */\nfunction extractBrowserRequestState(browserCrypto, state) {\n  if (!state) {\n    return null;\n  }\n  try {\n    const requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n    return requestStateObj.libraryState.meta;\n  } catch (e) {\n    throw createClientAuthError(ClientAuthErrorCodes.invalidState);\n  }\n}\nexport { extractBrowserRequestState };","map":{"version":3,"names":["extractBrowserRequestState","browserCrypto","state","requestStateObj","ProtocolUtils","parseRequestState","libraryState","meta","e","createClientAuthError","ClientAuthErrorCodes","invalidState"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserProtocolUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InteractionType } from \"./BrowserConstants\";\r\nimport {\r\n    ICrypto,\r\n    RequestStateObject,\r\n    ProtocolUtils,\r\n    createClientAuthError,\r\n    ClientAuthErrorCodes,\r\n} from \"@azure/msal-common\";\r\n\r\nexport type BrowserStateObject = {\r\n    interactionType: InteractionType;\r\n};\r\n\r\n/**\r\n * Extracts the BrowserStateObject from the state string.\r\n * @param browserCrypto\r\n * @param state\r\n */\r\nexport function extractBrowserRequestState(\r\n    browserCrypto: ICrypto,\r\n    state: string\r\n): BrowserStateObject | null {\r\n    if (!state) {\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        const requestStateObj: RequestStateObject =\r\n            ProtocolUtils.parseRequestState(browserCrypto, state);\r\n        return requestStateObj.libraryState.meta as BrowserStateObject;\r\n    } catch (e) {\r\n        throw createClientAuthError(ClientAuthErrorCodes.invalidState);\r\n    }\r\n}\r\n"],"mappings":";;;;;AAAA;;;AAGG;AAeH;;;;AAIG;AACa,SAAAA,0BAA0BA,CACtCC,aAAsB,EACtBC,KAAa;EAEb,IAAI,CAACA,KAAK,EAAE;IACR,OAAO,IAAI;EACd;EAED,IAAI;IACA,MAAMC,eAAe,GACjBC,aAAa,CAACC,iBAAiB,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACzD,OAAOC,eAAe,CAACG,YAAY,CAACC,IAA0B;EACjE,EAAC,OAAOC,CAAC,EAAE;IACR,MAAMC,qBAAqB,CAACC,oBAAoB,CAACC,YAAY,CAAC;EACjE;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}