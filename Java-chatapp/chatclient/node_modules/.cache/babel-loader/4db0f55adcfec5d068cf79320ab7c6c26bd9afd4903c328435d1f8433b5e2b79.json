{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nconst DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: () => {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n  claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n  async sendGetRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async sendPostRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  }\n};\nconst DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\nfunction buildClientConfiguration({\n  authOptions: userAuthOptions,\n  systemOptions: userSystemOptions,\n  loggerOptions: userLoggerOption,\n  cacheOptions: userCacheOptions,\n  storageInterface: storageImplementation,\n  networkInterface: networkImplementation,\n  cryptoInterface: cryptoImplementation,\n  clientCredentials: clientCredentials,\n  libraryInfo: libraryInfo,\n  telemetry: telemetry,\n  serverTelemetryManager: serverTelemetryManager,\n  persistencePlugin: persistencePlugin,\n  serializableCache: serializableCache\n}) {\n  const loggerOptions = {\n    ...DEFAULT_LOGGER_IMPLEMENTATION,\n    ...userLoggerOption\n  };\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: {\n      ...DEFAULT_SYSTEM_OPTIONS,\n      ...userSystemOptions\n    },\n    loggerOptions: loggerOptions,\n    cacheOptions: {\n      ...DEFAULT_CACHE_OPTIONS,\n      ...userCacheOptions\n    },\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: {\n      ...DEFAULT_LIBRARY_INFO,\n      ...libraryInfo\n    },\n    telemetry: {\n      ...DEFAULT_TELEMETRY_OPTIONS,\n      ...telemetry\n    },\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\nfunction buildAuthOptions(authOptions) {\n  return {\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false,\n    ...authOptions\n  };\n}\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */\nfunction isOidcProtocolMode(config) {\n  return config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC;\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };","map":{"version":3,"names":["DEFAULT_TOKEN_RENEWAL_OFFSET_SEC","DEFAULT_SYSTEM_OPTIONS","tokenRenewalOffsetSeconds","preventCorsPreflight","DEFAULT_LOGGER_IMPLEMENTATION","loggerCallback","piiLoggingEnabled","logLevel","LogLevel","Info","correlationId","Constants","EMPTY_STRING","DEFAULT_CACHE_OPTIONS","claimsBasedCachingEnabled","DEFAULT_NETWORK_IMPLEMENTATION","sendGetRequestAsync","createClientAuthError","methodNotImplemented","sendPostRequestAsync","DEFAULT_LIBRARY_INFO","sku","SKU","version","cpu","os","DEFAULT_CLIENT_CREDENTIALS","clientSecret","clientAssertion","undefined","DEFAULT_AZURE_CLOUD_OPTIONS","azureCloudInstance","AzureCloudInstance","None","tenant","DEFAULT_COMMON_TENANT","DEFAULT_TELEMETRY_OPTIONS","application","appName","appVersion","buildClientConfiguration","authOptions","userAuthOptions","systemOptions","userSystemOptions","loggerOptions","userLoggerOption","cacheOptions","userCacheOptions","storageInterface","storageImplementation","networkInterface","networkImplementation","cryptoInterface","cryptoImplementation","clientCredentials","libraryInfo","telemetry","serverTelemetryManager","persistencePlugin","serializableCache","buildAuthOptions","DefaultStorageClass","clientId","DEFAULT_CRYPTO_IMPLEMENTATION","Logger","clientCapabilities","azureCloudOptions","skipAuthorityMetadataCache","isOidcProtocolMode","config","authority","options","protocolMode","ProtocolMode","OIDC"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\config\\ClientConfiguration.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\r\nimport { ILoggerCallback, Logger, LogLevel } from \"../logger/Logger\";\r\nimport { Constants } from \"../utils/Constants\";\r\nimport { version } from \"../packageMetadata\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { AzureCloudInstance } from \"../authority/AuthorityOptions\";\r\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\r\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\r\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\r\nimport { ClientCredentials } from \"../account/ClientCredentials\";\r\nimport { ProtocolMode } from \"../authority/ProtocolMode\";\r\nimport {\r\n    ClientAuthErrorCodes,\r\n    createClientAuthError,\r\n} from \"../error/ClientAuthError\";\r\n\r\n// Token renewal offset default in seconds\r\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\n\r\n/**\r\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\r\n *\r\n * This object allows you to configure important elements of MSAL functionality:\r\n * - authOptions                - Authentication for application\r\n * - cryptoInterface            - Implementation of crypto functions\r\n * - libraryInfo                - Library metadata\r\n * - telemetry                  - Telemetry options and data\r\n * - loggerOptions              - Logging for application\r\n * - networkInterface           - Network implementation\r\n * - storageInterface           - Storage implementation\r\n * - systemOptions              - Additional library options\r\n * - clientCredentials          - Credentials options for confidential clients\r\n * @internal\r\n */\r\nexport type ClientConfiguration = {\r\n    authOptions: AuthOptions;\r\n    systemOptions?: SystemOptions;\r\n    loggerOptions?: LoggerOptions;\r\n    cacheOptions?: CacheOptions;\r\n    storageInterface?: CacheManager;\r\n    networkInterface?: INetworkModule;\r\n    cryptoInterface?: ICrypto;\r\n    clientCredentials?: ClientCredentials;\r\n    libraryInfo?: LibraryInfo;\r\n    telemetry?: TelemetryOptions;\r\n    serverTelemetryManager?: ServerTelemetryManager | null;\r\n    persistencePlugin?: ICachePlugin | null;\r\n    serializableCache?: ISerializableTokenCache | null;\r\n};\r\n\r\nexport type CommonClientConfiguration = {\r\n    authOptions: Required<AuthOptions>;\r\n    systemOptions: Required<SystemOptions>;\r\n    loggerOptions: Required<LoggerOptions>;\r\n    cacheOptions: Required<CacheOptions>;\r\n    storageInterface: CacheManager;\r\n    networkInterface: INetworkModule;\r\n    cryptoInterface: Required<ICrypto>;\r\n    libraryInfo: LibraryInfo;\r\n    telemetry: Required<TelemetryOptions>;\r\n    serverTelemetryManager: ServerTelemetryManager | null;\r\n    clientCredentials: ClientCredentials;\r\n    persistencePlugin: ICachePlugin | null;\r\n    serializableCache: ISerializableTokenCache | null;\r\n};\r\n\r\n/**\r\n * Use this to configure the auth options in the ClientConfiguration object\r\n *\r\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\r\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\r\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\r\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\r\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\r\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\r\n * - skipAuthorityMetadataCache      - A flag to choose whether to use or not use the local metadata cache during authority initialization. Defaults to false.\r\n * @internal\r\n */\r\nexport type AuthOptions = {\r\n    clientId: string;\r\n    authority: Authority;\r\n    clientCapabilities?: Array<string>;\r\n    azureCloudOptions?: AzureCloudOptions;\r\n    skipAuthorityMetadataCache?: boolean;\r\n};\r\n\r\n/**\r\n * Use this to configure token renewal info in the Configuration object\r\n *\r\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\r\n */\r\nexport type SystemOptions = {\r\n    tokenRenewalOffsetSeconds?: number;\r\n    preventCorsPreflight?: boolean;\r\n};\r\n\r\n/**\r\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\r\n *\r\n * - loggerCallback                - Callback for logger\r\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\r\n * - logLevel                      - Sets the level at which logging happens\r\n * - correlationId                 - Sets the correlationId printed by the logger\r\n */\r\nexport type LoggerOptions = {\r\n    loggerCallback?: ILoggerCallback;\r\n    piiLoggingEnabled?: boolean;\r\n    logLevel?: LogLevel;\r\n    correlationId?: string;\r\n};\r\n\r\n/**\r\n *  Use this to configure credential cache preferences in the ClientConfiguration object\r\n *\r\n * - claimsBasedCachingEnabled   - Sets whether tokens should be cached based on the claims hash. Default is false.\r\n */\r\nexport type CacheOptions = {\r\n    claimsBasedCachingEnabled?: boolean;\r\n};\r\n\r\n/**\r\n * Library-specific options\r\n */\r\nexport type LibraryInfo = {\r\n    sku: string;\r\n    version: string;\r\n    cpu: string;\r\n    os: string;\r\n};\r\n\r\n/**\r\n * AzureCloudInstance specific options\r\n *\r\n * - azureCloudInstance             - string enum providing short notation for soverign and public cloud authorities\r\n * - tenant                         - provision to provide the tenant info\r\n */\r\nexport type AzureCloudOptions = {\r\n    azureCloudInstance: AzureCloudInstance;\r\n    tenant?: string;\r\n};\r\n\r\nexport type TelemetryOptions = {\r\n    application: ApplicationTelemetry;\r\n};\r\n\r\n/**\r\n * Telemetry information sent on request\r\n * - appName: Unique string name of an application\r\n * - appVersion: Version of the application using MSAL\r\n */\r\nexport type ApplicationTelemetry = {\r\n    appName: string;\r\n    appVersion: string;\r\n};\r\n\r\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    preventCorsPreflight: false,\r\n};\r\n\r\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\r\n    loggerCallback: () => {\r\n        // allow users to not set loggerCallback\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n    correlationId: Constants.EMPTY_STRING,\r\n};\r\n\r\nconst DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\r\n    claimsBasedCachingEnabled: false,\r\n};\r\n\r\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\r\n    async sendGetRequestAsync<T>(): Promise<T> {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    async sendPostRequestAsync<T>(): Promise<T> {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n};\r\n\r\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\r\n    sku: Constants.SKU,\r\n    version: version,\r\n    cpu: Constants.EMPTY_STRING,\r\n    os: Constants.EMPTY_STRING,\r\n};\r\n\r\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\r\n    clientSecret: Constants.EMPTY_STRING,\r\n    clientAssertion: undefined,\r\n};\r\n\r\nconst DEFAULT_AZURE_CLOUD_OPTIONS: AzureCloudOptions = {\r\n    azureCloudInstance: AzureCloudInstance.None,\r\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\r\n};\r\n\r\nconst DEFAULT_TELEMETRY_OPTIONS: Required<TelemetryOptions> = {\r\n    application: {\r\n        appName: \"\",\r\n        appVersion: \"\",\r\n    },\r\n};\r\n\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\r\nexport function buildClientConfiguration({\r\n    authOptions: userAuthOptions,\r\n    systemOptions: userSystemOptions,\r\n    loggerOptions: userLoggerOption,\r\n    cacheOptions: userCacheOptions,\r\n    storageInterface: storageImplementation,\r\n    networkInterface: networkImplementation,\r\n    cryptoInterface: cryptoImplementation,\r\n    clientCredentials: clientCredentials,\r\n    libraryInfo: libraryInfo,\r\n    telemetry: telemetry,\r\n    serverTelemetryManager: serverTelemetryManager,\r\n    persistencePlugin: persistencePlugin,\r\n    serializableCache: serializableCache,\r\n}: ClientConfiguration): CommonClientConfiguration {\r\n    const loggerOptions = {\r\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\r\n        ...userLoggerOption,\r\n    };\r\n\r\n    return {\r\n        authOptions: buildAuthOptions(userAuthOptions),\r\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\r\n        loggerOptions: loggerOptions,\r\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\r\n        storageInterface:\r\n            storageImplementation ||\r\n            new DefaultStorageClass(\r\n                userAuthOptions.clientId,\r\n                DEFAULT_CRYPTO_IMPLEMENTATION,\r\n                new Logger(loggerOptions)\r\n            ),\r\n        networkInterface:\r\n            networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\r\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\r\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\r\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\r\n        serverTelemetryManager: serverTelemetryManager || null,\r\n        persistencePlugin: persistencePlugin || null,\r\n        serializableCache: serializableCache || null,\r\n    };\r\n}\r\n\r\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\r\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\r\n    return {\r\n        clientCapabilities: [],\r\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\r\n        skipAuthorityMetadataCache: false,\r\n        ...authOptions,\r\n    };\r\n}\r\n\r\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */\r\nexport function isOidcProtocolMode(config: ClientConfiguration): boolean {\r\n    return (\r\n        config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}