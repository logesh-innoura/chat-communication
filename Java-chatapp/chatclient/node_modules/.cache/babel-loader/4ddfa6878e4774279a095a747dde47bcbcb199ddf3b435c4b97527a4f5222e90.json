{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass EventHandler {\n  constructor(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n    this.listeningToStorageEvents = false;\n    this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n  addEventCallback(callback) {\n    if (typeof window !== \"undefined\") {\n      const callbackId = createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(`Event callback registered with id: ${callbackId}`);\n      return callbackId;\n    }\n    return null;\n  }\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n  removeEventCallback(callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(`Event callback ${callbackId} removed.`);\n  }\n  /**\r\n   * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n  enableAccountStorageEvents() {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    if (!this.listeningToStorageEvents) {\n      this.logger.verbose(\"Adding account storage listener.\");\n      this.listeningToStorageEvents = true;\n      window.addEventListener(\"storage\", this.handleAccountCacheChange);\n    } else {\n      this.logger.verbose(\"Account storage listener already registered.\");\n    }\n  }\n  /**\r\n   * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n  disableAccountStorageEvents() {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    if (this.listeningToStorageEvents) {\n      this.logger.verbose(\"Removing account storage listener.\");\n      window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n      this.listeningToStorageEvents = false;\n    } else {\n      this.logger.verbose(\"No account storage listener registered.\");\n    }\n  }\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n  emitEvent(eventType, interactionType, payload, error) {\n    if (typeof window !== \"undefined\") {\n      const message = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(`Emitting event: ${eventType}`);\n      this.eventCallbacks.forEach((callback, callbackId) => {\n        this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\n        callback.apply(null, [message]);\n      });\n    }\n  }\n  /**\r\n   * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n   */\n  handleAccountCacheChange(e) {\n    try {\n      const cacheValue = e.newValue || e.oldValue;\n      if (!cacheValue) {\n        return;\n      }\n      const parsedValue = JSON.parse(cacheValue);\n      if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n        return;\n      }\n      const accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\n      const accountInfo = accountEntity.getAccountInfo();\n      if (!e.oldValue && e.newValue) {\n        this.logger.info(\"Account was added to cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n      } else if (!e.newValue && e.oldValue) {\n        this.logger.info(\"Account was removed from cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n      }\n    } catch (e) {\n      return;\n    }\n  }\n}\nexport { EventHandler };","map":{"version":3,"names":["EventHandler","constructor","logger","browserCrypto","eventCallbacks","Map","listeningToStorageEvents","handleAccountCacheChange","bind","addEventCallback","callback","window","callbackId","createNewGuid","set","verbose","removeEventCallback","delete","enableAccountStorageEvents","addEventListener","disableAccountStorageEvents","removeEventListener","emitEvent","eventType","interactionType","payload","error","message","timestamp","Date","now","info","forEach","apply","e","cacheValue","newValue","oldValue","parsedValue","JSON","parse","AccountEntity","isAccountEntity","accountEntity","CacheManager","toObject","accountInfo","getAccountInfo","EventType","ACCOUNT_ADDED","undefined","ACCOUNT_REMOVED"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\event\\EventHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    ICrypto,\r\n    Logger,\r\n    AccountEntity,\r\n    CacheManager,\r\n} from \"@azure/msal-common\";\r\nimport { InteractionType } from \"../utils/BrowserConstants\";\r\nimport {\r\n    EventCallbackFunction,\r\n    EventError,\r\n    EventMessage,\r\n    EventPayload,\r\n} from \"./EventMessage\";\r\nimport { EventType } from \"./EventType\";\r\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\r\n\r\nexport class EventHandler {\r\n    // Callback for subscribing to events\r\n    private eventCallbacks: Map<string, EventCallbackFunction>;\r\n    private logger: Logger;\r\n    private browserCrypto: ICrypto;\r\n    private listeningToStorageEvents: boolean;\r\n\r\n    constructor(logger: Logger, browserCrypto: ICrypto) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger;\r\n        this.browserCrypto = browserCrypto;\r\n        this.listeningToStorageEvents = false;\r\n        this.handleAccountCacheChange =\r\n            this.handleAccountCacheChange.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        if (typeof window !== \"undefined\") {\r\n            const callbackId = createNewGuid();\r\n            this.eventCallbacks.set(callbackId, callback);\r\n            this.logger.verbose(\r\n                `Event callback registered with id: ${callbackId}`\r\n            );\r\n\r\n            return callbackId;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\r\n    }\r\n\r\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    enableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (!this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Adding account storage listener.\");\r\n            this.listeningToStorageEvents = true;\r\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\r\n        } else {\r\n            this.logger.verbose(\"Account storage listener already registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    disableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Removing account storage listener.\");\r\n            window.removeEventListener(\r\n                \"storage\",\r\n                this.handleAccountCacheChange\r\n            );\r\n            this.listeningToStorageEvents = false;\r\n        } else {\r\n            this.logger.verbose(\"No account storage listener registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    emitEvent(\r\n        eventType: EventType,\r\n        interactionType?: InteractionType,\r\n        payload?: EventPayload,\r\n        error?: EventError\r\n    ): void {\r\n        if (typeof window !== \"undefined\") {\r\n            const message: EventMessage = {\r\n                eventType: eventType,\r\n                interactionType: interactionType || null,\r\n                payload: payload || null,\r\n                error: error || null,\r\n                timestamp: Date.now(),\r\n            };\r\n\r\n            this.logger.info(`Emitting event: ${eventType}`);\r\n\r\n            this.eventCallbacks.forEach(\r\n                (callback: EventCallbackFunction, callbackId: string) => {\r\n                    this.logger.verbose(\r\n                        `Emitting event to callback ${callbackId}: ${eventType}`\r\n                    );\r\n                    callback.apply(null, [message]);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n     */\r\n    private handleAccountCacheChange(e: StorageEvent): void {\r\n        try {\r\n            const cacheValue = e.newValue || e.oldValue;\r\n            if (!cacheValue) {\r\n                return;\r\n            }\r\n            const parsedValue = JSON.parse(cacheValue);\r\n            if (\r\n                typeof parsedValue !== \"object\" ||\r\n                !AccountEntity.isAccountEntity(parsedValue)\r\n            ) {\r\n                return;\r\n            }\r\n            const accountEntity = CacheManager.toObject<AccountEntity>(\r\n                new AccountEntity(),\r\n                parsedValue\r\n            );\r\n            const accountInfo = accountEntity.getAccountInfo();\r\n            if (!e.oldValue && e.newValue) {\r\n                this.logger.info(\r\n                    \"Account was added to cache in a different window\"\r\n                );\r\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\r\n            } else if (!e.newValue && e.oldValue) {\r\n                this.logger.info(\r\n                    \"Account was removed from cache in a different window\"\r\n                );\r\n                this.emitEvent(\r\n                    EventType.ACCOUNT_REMOVED,\r\n                    undefined,\r\n                    accountInfo\r\n                );\r\n            }\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}