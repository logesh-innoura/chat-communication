{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { Constants } from './Constants.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { noCryptoObject, invalidState } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\nclass ProtocolUtils {\n  /**\r\n   * Appends user state with random guid, or returns random guid.\r\n   * @param userState\r\n   * @param randomGuid\r\n   */\n  static setRequestState(cryptoObj, userState, meta) {\n    const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n    return userState ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}` : libraryState;\n  }\n  /**\r\n   * Generates the state value used by the common library.\r\n   * @param randomGuid\r\n   * @param cryptoObj\r\n   */\n  static generateLibraryState(cryptoObj, meta) {\n    if (!cryptoObj) {\n      throw createClientAuthError(noCryptoObject);\n    }\n    // Create a state object containing a unique id and the timestamp of the request creation\n    const stateObj = {\n      id: cryptoObj.createNewGuid()\n    };\n    if (meta) {\n      stateObj.meta = meta;\n    }\n    const stateString = JSON.stringify(stateObj);\n    return cryptoObj.base64Encode(stateString);\n  }\n  /**\r\n   * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n   * @param state\r\n   * @param cryptoObj\r\n   */\n  static parseRequestState(cryptoObj, state) {\n    if (!cryptoObj) {\n      throw createClientAuthError(noCryptoObject);\n    }\n    if (!state) {\n      throw createClientAuthError(invalidState);\n    }\n    try {\n      // Split the state between library state and user passed state and decode them separately\n      const splitState = state.split(Constants.RESOURCE_DELIM);\n      const libraryState = splitState[0];\n      const userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : Constants.EMPTY_STRING;\n      const libraryStateString = cryptoObj.base64Decode(libraryState);\n      const libraryStateObj = JSON.parse(libraryStateString);\n      return {\n        userRequestState: userState || Constants.EMPTY_STRING,\n        libraryState: libraryStateObj\n      };\n    } catch (e) {\n      throw createClientAuthError(invalidState);\n    }\n  }\n}\nexport { ProtocolUtils };","map":{"version":3,"names":["ProtocolUtils","setRequestState","cryptoObj","userState","meta","libraryState","generateLibraryState","Constants","RESOURCE_DELIM","createClientAuthError","noCryptoObject","stateObj","id","createNewGuid","stateString","JSON","stringify","base64Encode","parseRequestState","state","invalidState","splitState","split","length","slice","join","EMPTY_STRING","libraryStateString","base64Decode","libraryStateObj","parse","userRequestState","e"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\utils\\ProtocolUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants } from \"./Constants\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport {\r\n    ClientAuthErrorCodes,\r\n    createClientAuthError,\r\n} from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * Type which defines the object that is stringified, encoded and sent in the state value.\r\n * Contains the following:\r\n * - id - unique identifier for this request\r\n * - ts - timestamp for the time the request was made. Used to ensure that token expiration is not calculated incorrectly.\r\n * - platformState - string value sent from the platform.\r\n */\r\nexport type LibraryStateObject = {\r\n    id: string;\r\n    meta?: Record<string, string>;\r\n};\r\n\r\n/**\r\n * Type which defines the stringified and encoded object sent to the service in the authorize request.\r\n */\r\nexport type RequestStateObject = {\r\n    userRequestState: string;\r\n    libraryState: LibraryStateObject;\r\n};\r\n\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nexport class ProtocolUtils {\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    static setRequestState(\r\n        cryptoObj: ICrypto,\r\n        userState?: string,\r\n        meta?: Record<string, string>\r\n    ): string {\r\n        const libraryState = ProtocolUtils.generateLibraryState(\r\n            cryptoObj,\r\n            meta\r\n        );\r\n        return userState\r\n            ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}`\r\n            : libraryState;\r\n    }\r\n\r\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */\r\n    static generateLibraryState(\r\n        cryptoObj: ICrypto,\r\n        meta?: Record<string, string>\r\n    ): string {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(ClientAuthErrorCodes.noCryptoObject);\r\n        }\r\n\r\n        // Create a state object containing a unique id and the timestamp of the request creation\r\n        const stateObj: LibraryStateObject = {\r\n            id: cryptoObj.createNewGuid(),\r\n        };\r\n\r\n        if (meta) {\r\n            stateObj.meta = meta;\r\n        }\r\n\r\n        const stateString = JSON.stringify(stateObj);\r\n\r\n        return cryptoObj.base64Encode(stateString);\r\n    }\r\n\r\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */\r\n    static parseRequestState(\r\n        cryptoObj: ICrypto,\r\n        state: string\r\n    ): RequestStateObject {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(ClientAuthErrorCodes.noCryptoObject);\r\n        }\r\n\r\n        if (!state) {\r\n            throw createClientAuthError(ClientAuthErrorCodes.invalidState);\r\n        }\r\n\r\n        try {\r\n            // Split the state between library state and user passed state and decode them separately\r\n            const splitState = state.split(Constants.RESOURCE_DELIM);\r\n            const libraryState = splitState[0];\r\n            const userState =\r\n                splitState.length > 1\r\n                    ? splitState.slice(1).join(Constants.RESOURCE_DELIM)\r\n                    : Constants.EMPTY_STRING;\r\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\r\n            const libraryStateObj = JSON.parse(\r\n                libraryStateString\r\n            ) as LibraryStateObject;\r\n            return {\r\n                userRequestState: userState || Constants.EMPTY_STRING,\r\n                libraryState: libraryStateObj,\r\n            };\r\n        } catch (e) {\r\n            throw createClientAuthError(ClientAuthErrorCodes.invalidState);\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA;;;AAGG;AA6BH;;AAEG;MACUA,aAAa;EACtB;;;;AAIG;EACH,OAAOC,eAAeA,CAClBC,SAAkB,EAClBC,SAAkB,EAClBC,IAA6B;IAE7B,MAAMC,YAAY,GAAGL,aAAa,CAACM,oBAAoB,CACnDJ,SAAS,EACTE,IAAI,CACP;IACD,OAAOD,SAAS,GACV,GAAGE,YAAY,GAAGE,SAAS,CAACC,cAAiB,GAAAL,SAAW,KACxDE,YAAY;;EAGtB;;;;AAIG;EACH,OAAOC,oBAAoBA,CACvBJ,SAAkB,EAClBE,IAA6B;IAE7B,IAAI,CAACF,SAAS,EAAE;MACZ,MAAMO,qBAAqB,CAACC,cAAmC,CAAC;IACnE;;IAGD,MAAMC,QAAQ,GAAuB;MACjCC,EAAE,EAAEV,SAAS,CAACW,aAAa;KAC9B;IAED,IAAIT,IAAI,EAAE;MACNO,QAAQ,CAACP,IAAI,GAAGA,IAAI;IACvB;IAED,MAAMU,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC;IAE5C,OAAOT,SAAS,CAACe,YAAY,CAACH,WAAW,CAAC;;EAG9C;;;;AAIG;EACH,OAAOI,iBAAiBA,CACpBhB,SAAkB,EAClBiB,KAAa;IAEb,IAAI,CAACjB,SAAS,EAAE;MACZ,MAAMO,qBAAqB,CAACC,cAAmC,CAAC;IACnE;IAED,IAAI,CAACS,KAAK,EAAE;MACR,MAAMV,qBAAqB,CAACW,YAAiC,CAAC;IACjE;IAED,IAAI;;MAEA,MAAMC,UAAU,GAAGF,KAAK,CAACG,KAAK,CAACf,SAAS,CAACC,cAAc,CAAC;MACxD,MAAMH,YAAY,GAAGgB,UAAU,CAAC,CAAC,CAAC;MAClC,MAAMlB,SAAS,GACXkB,UAAU,CAACE,MAAM,GAAG,CAAC,GACfF,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAClB,SAAS,CAACC,cAAc,CAAC,GAClDD,SAAS,CAACmB,YAAY;MAChC,MAAMC,kBAAkB,GAAGzB,SAAS,CAAC0B,YAAY,CAACvB,YAAY,CAAC;MAC/D,MAAMwB,eAAe,GAAGd,IAAI,CAACe,KAAK,CAC9BH,kBAAkB,CACC;MACvB,OAAO;QACHI,gBAAgB,EAAE5B,SAAS,IAAII,SAAS,CAACmB,YAAY;QACrDrB,YAAY,EAAEwB;OACjB;IACJ,EAAC,OAAOG,CAAC,EAAE;MACR,MAAMvB,qBAAqB,CAACW,YAAiC,CAAC;IACjE;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}