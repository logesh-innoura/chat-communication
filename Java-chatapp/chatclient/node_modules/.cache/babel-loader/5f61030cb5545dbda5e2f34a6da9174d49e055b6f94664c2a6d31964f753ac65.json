{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { RequestParameterBuilder, StringUtils, AuthenticationScheme, createClientAuthError, ClientAuthErrorCodes, AuthToken, AuthError, InteractionRequiredAuthError, ServerError, ClientAuthError } from '@azure/msal-common';\nimport { isBridgeError } from '../BridgeError.mjs';\nimport { BridgeStatusCode } from '../BridgeStatusCode.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass NestedAppAuthAdapter {\n  constructor(clientId, clientCapabilities, crypto, logger) {\n    this.clientId = clientId;\n    this.clientCapabilities = clientCapabilities;\n    this.crypto = crypto;\n    this.logger = logger;\n  }\n  toNaaTokenRequest(request) {\n    let extraParams;\n    if (request.extraQueryParameters === undefined) {\n      extraParams = new Map();\n    } else {\n      extraParams = new Map(Object.entries(request.extraQueryParameters));\n    }\n    const requestBuilder = new RequestParameterBuilder();\n    const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n    const tokenRequest = {\n      platformBrokerId: request.account?.homeAccountId,\n      clientId: this.clientId,\n      authority: request.authority,\n      scope: request.scopes.join(\" \"),\n      correlationId: request.correlationId !== undefined ? request.correlationId : this.crypto.createNewGuid(),\n      claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n      state: request.state,\n      authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n      extraParameters: extraParams\n    };\n    return tokenRequest;\n  }\n  fromNaaTokenResponse(request, response, reqTimestamp) {\n    if (!response.token.id_token || !response.token.access_token) {\n      throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n    }\n    const expiresOn = new Date((reqTimestamp + (response.token.expires_in || 0)) * 1000);\n    const idTokenClaims = AuthToken.extractTokenClaims(response.token.id_token, this.crypto.base64Decode);\n    const account = this.fromNaaAccountInfo(response.account, idTokenClaims);\n    const scopes = response.token.scope || request.scope;\n    const authenticationResult = {\n      authority: response.token.authority || account.environment,\n      uniqueId: account.localAccountId,\n      tenantId: account.tenantId,\n      scopes: scopes.split(\" \"),\n      account,\n      idToken: response.token.id_token,\n      idTokenClaims,\n      accessToken: response.token.access_token,\n      fromCache: true,\n      expiresOn: expiresOn,\n      tokenType: request.authenticationScheme || AuthenticationScheme.BEARER,\n      correlationId: request.correlationId,\n      extExpiresOn: expiresOn,\n      state: request.state\n    };\n    return authenticationResult;\n  }\n  /*\r\n   *  export type AccountInfo = {\r\n   *     homeAccountId: string;\r\n   *     environment: string;\r\n   *     tenantId: string;\r\n   *     username: string;\r\n   *     localAccountId: string;\r\n   *     name?: string;\r\n   *     idToken?: string;\r\n   *     idTokenClaims?: TokenClaims & {\r\n   *         [key: string]:\r\n   *             | string\r\n   *             | number\r\n   *             | string[]\r\n   *             | object\r\n   *             | undefined\r\n   *             | unknown;\r\n   *     };\r\n   *     nativeAccountId?: string;\r\n   *     authorityType?: string;\r\n   * };\r\n   */\n  fromNaaAccountInfo(fromAccount, idTokenClaims) {\n    const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n    const localAccountId = fromAccount.localAccountId || effectiveIdTokenClaims?.oid || effectiveIdTokenClaims?.sub || \"\";\n    const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n    const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n    const username = fromAccount.username || effectiveIdTokenClaims?.preferred_username || \"\";\n    const name = fromAccount.name || effectiveIdTokenClaims?.name;\n    const account = {\n      homeAccountId,\n      environment: fromAccount.environment,\n      tenantId,\n      username,\n      localAccountId,\n      name,\n      idToken: fromAccount.idToken,\n      idTokenClaims: effectiveIdTokenClaims\n    };\n    return account;\n  }\n  /**\r\n   *\r\n   * @param error BridgeError\r\n   * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\r\n   */\n  fromBridgeError(error) {\n    if (isBridgeError(error)) {\n      switch (error.status) {\n        case BridgeStatusCode.UserCancel:\n          return new ClientAuthError(ClientAuthErrorCodes.userCanceled);\n        case BridgeStatusCode.NoNetwork:\n          return new ClientAuthError(ClientAuthErrorCodes.noNetworkConnectivity);\n        case BridgeStatusCode.AccountUnavailable:\n          return new ClientAuthError(ClientAuthErrorCodes.noAccountFound);\n        case BridgeStatusCode.Disabled:\n          return new ClientAuthError(ClientAuthErrorCodes.nestedAppAuthBridgeDisabled);\n        case BridgeStatusCode.NestedAppAuthUnavailable:\n          return new ClientAuthError(error.code || ClientAuthErrorCodes.nestedAppAuthBridgeDisabled, error.description);\n        case BridgeStatusCode.TransientError:\n        case BridgeStatusCode.PersistentError:\n          return new ServerError(error.code, error.description);\n        case BridgeStatusCode.UserInteractionRequired:\n          return new InteractionRequiredAuthError(error.code, error.description);\n        default:\n          return new AuthError(error.code, error.description);\n      }\n    } else {\n      return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n    }\n  }\n}\nexport { NestedAppAuthAdapter };","map":{"version":3,"names":["NestedAppAuthAdapter","constructor","clientId","clientCapabilities","crypto","logger","toNaaTokenRequest","request","extraParams","extraQueryParameters","undefined","Map","Object","entries","requestBuilder","RequestParameterBuilder","claims","addClientCapabilitiesToClaims","tokenRequest","platformBrokerId","account","homeAccountId","authority","scope","scopes","join","correlationId","createNewGuid","StringUtils","isEmptyObj","state","authenticationScheme","AuthenticationScheme","BEARER","extraParameters","fromNaaTokenResponse","response","reqTimestamp","token","id_token","access_token","createClientAuthError","ClientAuthErrorCodes","nullOrEmptyToken","expiresOn","Date","expires_in","idTokenClaims","AuthToken","extractTokenClaims","base64Decode","fromNaaAccountInfo","authenticationResult","environment","uniqueId","localAccountId","tenantId","split","idToken","accessToken","fromCache","tokenType","extExpiresOn","fromAccount","effectiveIdTokenClaims","oid","sub","tid","username","preferred_username","name","fromBridgeError","error","isBridgeError","status","BridgeStatusCode","UserCancel","ClientAuthError","userCanceled","NoNetwork","noNetworkConnectivity","AccountUnavailable","noAccountFound","Disabled","nestedAppAuthBridgeDisabled","NestedAppAuthUnavailable","code","description","TransientError","PersistentError","ServerError","UserInteractionRequired","InteractionRequiredAuthError","AuthError"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\naa\\mapping\\NestedAppAuthAdapter.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { TokenRequest } from \"../TokenRequest\";\r\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo\";\r\nimport { RedirectRequest } from \"../../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../../request/PopupRequest\";\r\nimport {\r\n    AccountInfo as MsalAccountInfo,\r\n    AuthError,\r\n    ClientAuthError,\r\n    ClientConfigurationError,\r\n    InteractionRequiredAuthError,\r\n    ServerError,\r\n    ICrypto,\r\n    Logger,\r\n    AuthToken,\r\n    TokenClaims,\r\n    ClientAuthErrorCodes,\r\n    AuthenticationScheme,\r\n    RequestParameterBuilder,\r\n    StringUtils,\r\n    createClientAuthError,\r\n} from \"@azure/msal-common\";\r\nimport { isBridgeError } from \"../BridgeError\";\r\nimport { BridgeStatusCode } from \"../BridgeStatusCode\";\r\nimport { AuthenticationResult } from \"../../response/AuthenticationResult\";\r\nimport {} from \"../../error/BrowserAuthErrorCodes\";\r\nimport { AuthResult } from \"../AuthResult\";\r\n\r\nexport class NestedAppAuthAdapter {\r\n    protected crypto: ICrypto;\r\n    protected logger: Logger;\r\n    protected clientId: string;\r\n    protected clientCapabilities: string[];\r\n\r\n    constructor(\r\n        clientId: string,\r\n        clientCapabilities: string[],\r\n        crypto: ICrypto,\r\n        logger: Logger\r\n    ) {\r\n        this.clientId = clientId;\r\n        this.clientCapabilities = clientCapabilities;\r\n        this.crypto = crypto;\r\n        this.logger = logger;\r\n    }\r\n\r\n    public toNaaTokenRequest(\r\n        request: PopupRequest | RedirectRequest\r\n    ): TokenRequest {\r\n        let extraParams: Map<string, string>;\r\n        if (request.extraQueryParameters === undefined) {\r\n            extraParams = new Map<string, string>();\r\n        } else {\r\n            extraParams = new Map<string, string>(\r\n                Object.entries(request.extraQueryParameters)\r\n            );\r\n        }\r\n\r\n        const requestBuilder = new RequestParameterBuilder();\r\n        const claims = requestBuilder.addClientCapabilitiesToClaims(\r\n            request.claims,\r\n            this.clientCapabilities\r\n        );\r\n        const tokenRequest: TokenRequest = {\r\n            platformBrokerId: request.account?.homeAccountId,\r\n            clientId: this.clientId,\r\n            authority: request.authority,\r\n            scope: request.scopes.join(\" \"),\r\n            correlationId:\r\n                request.correlationId !== undefined\r\n                    ? request.correlationId\r\n                    : this.crypto.createNewGuid(),\r\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\r\n            state: request.state,\r\n            authenticationScheme:\r\n                request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            extraParameters: extraParams,\r\n        };\r\n\r\n        return tokenRequest;\r\n    }\r\n\r\n    public fromNaaTokenResponse(\r\n        request: TokenRequest,\r\n        response: AuthResult,\r\n        reqTimestamp: number\r\n    ): AuthenticationResult {\r\n        if (!response.token.id_token || !response.token.access_token) {\r\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\r\n        }\r\n\r\n        const expiresOn = new Date(\r\n            (reqTimestamp + (response.token.expires_in || 0)) * 1000\r\n        );\r\n        const idTokenClaims = AuthToken.extractTokenClaims(\r\n            response.token.id_token,\r\n            this.crypto.base64Decode\r\n        );\r\n        const account = this.fromNaaAccountInfo(\r\n            response.account,\r\n            idTokenClaims\r\n        );\r\n        const scopes = response.token.scope || request.scope;\r\n\r\n        const authenticationResult: AuthenticationResult = {\r\n            authority: response.token.authority || account.environment,\r\n            uniqueId: account.localAccountId,\r\n            tenantId: account.tenantId,\r\n            scopes: scopes.split(\" \"),\r\n            account,\r\n            idToken: response.token.id_token,\r\n            idTokenClaims,\r\n            accessToken: response.token.access_token,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            tokenType:\r\n                request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            correlationId: request.correlationId,\r\n            extExpiresOn: expiresOn,\r\n            state: request.state,\r\n        };\r\n\r\n        return authenticationResult;\r\n    }\r\n\r\n    /*\r\n     *  export type AccountInfo = {\r\n     *     homeAccountId: string;\r\n     *     environment: string;\r\n     *     tenantId: string;\r\n     *     username: string;\r\n     *     localAccountId: string;\r\n     *     name?: string;\r\n     *     idToken?: string;\r\n     *     idTokenClaims?: TokenClaims & {\r\n     *         [key: string]:\r\n     *             | string\r\n     *             | number\r\n     *             | string[]\r\n     *             | object\r\n     *             | undefined\r\n     *             | unknown;\r\n     *     };\r\n     *     nativeAccountId?: string;\r\n     *     authorityType?: string;\r\n     * };\r\n     */\r\n    public fromNaaAccountInfo(\r\n        fromAccount: NaaAccountInfo,\r\n        idTokenClaims?: TokenClaims\r\n    ): MsalAccountInfo {\r\n        const effectiveIdTokenClaims =\r\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\r\n\r\n        const localAccountId =\r\n            fromAccount.localAccountId ||\r\n            effectiveIdTokenClaims?.oid ||\r\n            effectiveIdTokenClaims?.sub ||\r\n            \"\";\r\n\r\n        const tenantId =\r\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\r\n\r\n        const homeAccountId =\r\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\r\n\r\n        const username =\r\n            fromAccount.username ||\r\n            effectiveIdTokenClaims?.preferred_username ||\r\n            \"\";\r\n\r\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\r\n\r\n        const account: MsalAccountInfo = {\r\n            homeAccountId,\r\n            environment: fromAccount.environment,\r\n            tenantId,\r\n            username,\r\n            localAccountId,\r\n            name,\r\n            idToken: fromAccount.idToken,\r\n            idTokenClaims: effectiveIdTokenClaims,\r\n        };\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param error BridgeError\r\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\r\n     */\r\n    public fromBridgeError(\r\n        error: unknown\r\n    ):\r\n        | AuthError\r\n        | ClientAuthError\r\n        | ClientConfigurationError\r\n        | ServerError\r\n        | InteractionRequiredAuthError {\r\n        if (isBridgeError(error)) {\r\n            switch (error.status) {\r\n                case BridgeStatusCode.UserCancel:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.userCanceled\r\n                    );\r\n                case BridgeStatusCode.NoNetwork:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.noNetworkConnectivity\r\n                    );\r\n                case BridgeStatusCode.AccountUnavailable:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.noAccountFound\r\n                    );\r\n                case BridgeStatusCode.Disabled:\r\n                    return new ClientAuthError(\r\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\r\n                    );\r\n                case BridgeStatusCode.NestedAppAuthUnavailable:\r\n                    return new ClientAuthError(\r\n                        error.code ||\r\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\r\n                        error.description\r\n                    );\r\n                case BridgeStatusCode.TransientError:\r\n                case BridgeStatusCode.PersistentError:\r\n                    return new ServerError(error.code, error.description);\r\n                case BridgeStatusCode.UserInteractionRequired:\r\n                    return new InteractionRequiredAuthError(\r\n                        error.code,\r\n                        error.description\r\n                    );\r\n                default:\r\n                    return new AuthError(error.code, error.description);\r\n            }\r\n        } else {\r\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}