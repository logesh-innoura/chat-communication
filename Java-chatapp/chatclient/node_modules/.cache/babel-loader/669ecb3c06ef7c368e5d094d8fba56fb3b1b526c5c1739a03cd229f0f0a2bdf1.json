{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass BrowserPerformanceMeasurement {\n  constructor(name, correlationId) {\n    this.correlationId = correlationId;\n    this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\n    this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\n    this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\n  }\n  static makeMeasureName(name, correlationId) {\n    return `msal.measure.${name}.${correlationId}`;\n  }\n  static makeStartMark(name, correlationId) {\n    return `msal.start.${name}.${correlationId}`;\n  }\n  static makeEndMark(name, correlationId) {\n    return `msal.end.${name}.${correlationId}`;\n  }\n  static supportsBrowserPerformance() {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.mark === \"function\" && typeof window.performance.measure === \"function\" && typeof window.performance.clearMarks === \"function\" && typeof window.performance.clearMeasures === \"function\" && typeof window.performance.getEntriesByName === \"function\";\n  }\n  /**\r\n   * Flush browser marks and measurements.\r\n   * @param {string} correlationId\r\n   * @param {SubMeasurement} measurements\r\n   */\n  static flushMeasurements(correlationId, measurements) {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        measurements.forEach(measurement => {\n          const measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\n          const entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\n          if (entriesForMeasurement.length > 0) {\n            window.performance.clearMeasures(measureName);\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\n          }\n        });\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n  }\n  startMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.startMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  }\n  endMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.endMark);\n        window.performance.measure(this.measureName, this.startMark, this.endMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  }\n  flushMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n        if (entriesForMeasurement.length > 0) {\n          const durationMs = entriesForMeasurement[0].duration;\n          window.performance.clearMeasures(this.measureName);\n          window.performance.clearMarks(this.startMark);\n          window.performance.clearMarks(this.endMark);\n          return durationMs;\n        }\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n    return null;\n  }\n}\nexport { BrowserPerformanceMeasurement };","map":{"version":3,"names":["BrowserPerformanceMeasurement","constructor","name","correlationId","measureName","makeMeasureName","startMark","makeStartMark","endMark","makeEndMark","supportsBrowserPerformance","window","performance","mark","measure","clearMarks","clearMeasures","getEntriesByName","flushMeasurements","measurements","forEach","measurement","entriesForMeasurement","length","e","startMeasurement","endMeasurement","flushMeasurement","durationMs","duration"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\telemetry\\BrowserPerformanceMeasurement.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IPerformanceMeasurement, SubMeasurement } from \"@azure/msal-common\";\r\n\r\nexport class BrowserPerformanceMeasurement implements IPerformanceMeasurement {\r\n    private readonly measureName: string;\r\n    private readonly correlationId: string;\r\n    private readonly startMark: string;\r\n    private readonly endMark: string;\r\n\r\n    constructor(name: string, correlationId: string) {\r\n        this.correlationId = correlationId;\r\n        this.measureName = BrowserPerformanceMeasurement.makeMeasureName(\r\n            name,\r\n            correlationId\r\n        );\r\n        this.startMark = BrowserPerformanceMeasurement.makeStartMark(\r\n            name,\r\n            correlationId\r\n        );\r\n        this.endMark = BrowserPerformanceMeasurement.makeEndMark(\r\n            name,\r\n            correlationId\r\n        );\r\n    }\r\n\r\n    private static makeMeasureName(name: string, correlationId: string) {\r\n        return `msal.measure.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeStartMark(name: string, correlationId: string) {\r\n        return `msal.start.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeEndMark(name: string, correlationId: string) {\r\n        return `msal.end.${name}.${correlationId}`;\r\n    }\r\n\r\n    static supportsBrowserPerformance(): boolean {\r\n        return (\r\n            typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.mark === \"function\" &&\r\n            typeof window.performance.measure === \"function\" &&\r\n            typeof window.performance.clearMarks === \"function\" &&\r\n            typeof window.performance.clearMeasures === \"function\" &&\r\n            typeof window.performance.getEntriesByName === \"function\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Flush browser marks and measurements.\r\n     * @param {string} correlationId\r\n     * @param {SubMeasurement} measurements\r\n     */\r\n    public static flushMeasurements(\r\n        correlationId: string,\r\n        measurements: SubMeasurement[]\r\n    ): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                measurements.forEach((measurement) => {\r\n                    const measureName =\r\n                        BrowserPerformanceMeasurement.makeMeasureName(\r\n                            measurement.name,\r\n                            correlationId\r\n                        );\r\n                    const entriesForMeasurement =\r\n                        window.performance.getEntriesByName(\r\n                            measureName,\r\n                            \"measure\"\r\n                        );\r\n                    if (entriesForMeasurement.length > 0) {\r\n                        window.performance.clearMeasures(measureName);\r\n                        window.performance.clearMarks(\r\n                            BrowserPerformanceMeasurement.makeStartMark(\r\n                                measureName,\r\n                                correlationId\r\n                            )\r\n                        );\r\n                        window.performance.clearMarks(\r\n                            BrowserPerformanceMeasurement.makeEndMark(\r\n                                measureName,\r\n                                correlationId\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n    }\r\n\r\n    startMeasurement(): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.startMark);\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    endMeasurement(): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.endMark);\r\n                window.performance.measure(\r\n                    this.measureName,\r\n                    this.startMark,\r\n                    this.endMark\r\n                );\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    flushMeasurement(): number | null {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                const entriesForMeasurement =\r\n                    window.performance.getEntriesByName(\r\n                        this.measureName,\r\n                        \"measure\"\r\n                    );\r\n                if (entriesForMeasurement.length > 0) {\r\n                    const durationMs = entriesForMeasurement[0].duration;\r\n                    window.performance.clearMeasures(this.measureName);\r\n                    window.performance.clearMarks(this.startMark);\r\n                    window.performance.clearMarks(this.endMark);\r\n                    return durationMs;\r\n                }\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"],"mappings":";;;AAAA;;;AAGG;MAIUA,6BAA6B;EAMtCC,WAAYA,CAAAC,IAAY,EAAEC,aAAqB;IAC3C,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,WAAW,GAAGJ,6BAA6B,CAACK,eAAe,CAC5DH,IAAI,EACJC,aAAa,CAChB;IACD,IAAI,CAACG,SAAS,GAAGN,6BAA6B,CAACO,aAAa,CACxDL,IAAI,EACJC,aAAa,CAChB;IACD,IAAI,CAACK,OAAO,GAAGR,6BAA6B,CAACS,WAAW,CACpDP,IAAI,EACJC,aAAa,CAChB;;EAGG,OAAOE,eAAeA,CAACH,IAAY,EAAEC,aAAqB;IAC9D,OAAuB,gBAAAD,IAAQ,IAAAC,aAAa,EAAE;;EAG1C,OAAOI,aAAaA,CAACL,IAAY,EAAEC,aAAqB;IAC5D,OAAqB,cAAAD,IAAQ,IAAAC,aAAa,EAAE;;EAGxC,OAAOM,WAAWA,CAACP,IAAY,EAAEC,aAAqB;IAC1D,OAAmB,YAAAD,IAAQ,IAAAC,aAAa,EAAE;;EAG9C,OAAOO,0BAA0BA,CAAA;IAC7B,OACI,OAAOC,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACC,WAAW,KAAK,WAAW,IACzC,OAAOD,MAAM,CAACC,WAAW,CAACC,IAAI,KAAK,UAAU,IAC7C,OAAOF,MAAM,CAACC,WAAW,CAACE,OAAO,KAAK,UAAU,IAChD,OAAOH,MAAM,CAACC,WAAW,CAACG,UAAU,KAAK,UAAU,IACnD,OAAOJ,MAAM,CAACC,WAAW,CAACI,aAAa,KAAK,UAAU,IACtD,OAAOL,MAAM,CAACC,WAAW,CAACK,gBAAgB,KAAK,UAAU;;EAIjE;;;;AAIG;EACI,OAAOC,iBAAiBA,CAC3Bf,aAAqB,EACrBgB,YAA8B;IAE9B,IAAInB,6BAA6B,CAACU,0BAA0B,EAAE,EAAE;MAC5D,IAAI;QACAS,YAAY,CAACC,OAAO,CAAEC,WAAW,IAAI;UACjC,MAAMjB,WAAW,GACbJ,6BAA6B,CAACK,eAAe,CACzCgB,WAAW,CAACnB,IAAI,EAChBC,aAAa,CAChB;UACL,MAAMmB,qBAAqB,GACvBX,MAAM,CAACC,WAAW,CAACK,gBAAgB,CAC/Bb,WAAW,EACX,SAAS,CACZ;UACL,IAAIkB,qBAAqB,CAACC,MAAM,GAAG,CAAC,EAAE;YAClCZ,MAAM,CAACC,WAAW,CAACI,aAAa,CAACZ,WAAW,CAAC;YAC7CO,MAAM,CAACC,WAAW,CAACG,UAAU,CACzBf,6BAA6B,CAACO,aAAa,CACvCH,WAAW,EACXD,aAAa,CAChB,CACJ;YACDQ,MAAM,CAACC,WAAW,CAACG,UAAU,CACzBf,6BAA6B,CAACS,WAAW,CACrCL,WAAW,EACXD,aAAa,CAChB,CACJ;UACJ;QACL,CAAC,CAAC;MACL,EAAC,OAAOqB,CAAC,EAAE;;;IAGf;;EAGLC,gBAAgBA,CAAA;IACZ,IAAIzB,6BAA6B,CAACU,0BAA0B,EAAE,EAAE;MAC5D,IAAI;QACAC,MAAM,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAACP,SAAS,CAAC;MAC1C,EAAC,OAAOkB,CAAC,EAAE;;;IAGf;;EAGLE,cAAcA,CAAA;IACV,IAAI1B,6BAA6B,CAACU,0BAA0B,EAAE,EAAE;MAC5D,IAAI;QACAC,MAAM,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAACL,OAAO,CAAC;QACrCG,MAAM,CAACC,WAAW,CAACE,OAAO,CACtB,IAAI,CAACV,WAAW,EAChB,IAAI,CAACE,SAAS,EACd,IAAI,CAACE,OAAO,CACf;MACJ,EAAC,OAAOgB,CAAC,EAAE;;;IAGf;;EAGLG,gBAAgBA,CAAA;IACZ,IAAI3B,6BAA6B,CAACU,0BAA0B,EAAE,EAAE;MAC5D,IAAI;QACA,MAAMY,qBAAqB,GACvBX,MAAM,CAACC,WAAW,CAACK,gBAAgB,CAC/B,IAAI,CAACb,WAAW,EAChB,SAAS,CACZ;QACL,IAAIkB,qBAAqB,CAACC,MAAM,GAAG,CAAC,EAAE;UAClC,MAAMK,UAAU,GAAGN,qBAAqB,CAAC,CAAC,CAAC,CAACO,QAAQ;UACpDlB,MAAM,CAACC,WAAW,CAACI,aAAa,CAAC,IAAI,CAACZ,WAAW,CAAC;UAClDO,MAAM,CAACC,WAAW,CAACG,UAAU,CAAC,IAAI,CAACT,SAAS,CAAC;UAC7CK,MAAM,CAACC,WAAW,CAACG,UAAU,CAAC,IAAI,CAACP,OAAO,CAAC;UAC3C,OAAOoB,UAAU;QACpB;MACJ,EAAC,OAAOJ,CAAC,EAAE;;;IAGf;IACD,OAAO,IAAI;;AAElB"},"metadata":{},"sourceType":"module","externalDependencies":[]}