{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\nclass TimeUtils {\n  /**\r\n   * return the current time in Unix time (seconds).\r\n   */\n  static nowSeconds() {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n  }\n  /**\r\n   * check if a token is expired based on given UTC time in seconds.\r\n   * @param expiresOn\r\n   */\n  static isTokenExpired(expiresOn, offset) {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n  }\n  /**\r\n   * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n   * i.e. The system clock was turned back after acquiring the cached token\r\n   * @param cachedAt\r\n   * @param offset\r\n   */\n  static wasClockTurnedBack(cachedAt) {\n    const cachedAtSec = Number(cachedAt);\n    return cachedAtSec > TimeUtils.nowSeconds();\n  }\n  /**\r\n   * Waits for t number of milliseconds\r\n   * @param t number\r\n   * @param value T\r\n   */\n  static delay(t, value) {\n    return new Promise(resolve => setTimeout(() => resolve(value), t));\n  }\n}\nexport { TimeUtils };","map":{"version":3,"names":["TimeUtils","nowSeconds","Math","round","Date","getTime","isTokenExpired","expiresOn","offset","expirationSec","Number","offsetCurrentTimeSec","wasClockTurnedBack","cachedAt","cachedAtSec","delay","t","value","Promise","resolve","setTimeout"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\utils\\TimeUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\r\nexport class TimeUtils {\r\n    /**\r\n     * return the current time in Unix time (seconds).\r\n     */\r\n    static nowSeconds(): number {\r\n        // Date.getTime() returns in milliseconds.\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    }\r\n\r\n    /**\r\n     * check if a token is expired based on given UTC time in seconds.\r\n     * @param expiresOn\r\n     */\r\n    static isTokenExpired(expiresOn: string, offset: number): boolean {\r\n        // check for access token expiry\r\n        const expirationSec = Number(expiresOn) || 0;\r\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\r\n\r\n        // If current time + offset is greater than token expiration time, then token is expired.\r\n        return offsetCurrentTimeSec > expirationSec;\r\n    }\r\n\r\n    /**\r\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n     * i.e. The system clock was turned back after acquiring the cached token\r\n     * @param cachedAt\r\n     * @param offset\r\n     */\r\n    static wasClockTurnedBack(cachedAt: string): boolean {\r\n        const cachedAtSec = Number(cachedAt);\r\n\r\n        return cachedAtSec > TimeUtils.nowSeconds();\r\n    }\r\n\r\n    /**\r\n     * Waits for t number of milliseconds\r\n     * @param t number\r\n     * @param value T\r\n     */\r\n    static delay<T>(t: number, value?: T): Promise<T | void> {\r\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\r\n    }\r\n}\r\n"],"mappings":";;;AAAA;;;AAGG;AAEH;;AAEG;MACUA,SAAS;EAClB;;AAEG;EACH,OAAOC,UAAUA,CAAA;;IAEb,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,MAAM,CAAC;;EAGpD;;;AAGG;EACH,OAAOC,cAAcA,CAACC,SAAiB,EAAEC,MAAc;;IAEnD,MAAMC,aAAa,GAAGC,MAAM,CAACH,SAAS,CAAC,IAAI,CAAC;IAC5C,MAAMI,oBAAoB,GAAGX,SAAS,CAACC,UAAU,EAAE,GAAGO,MAAM;;IAG5D,OAAOG,oBAAoB,GAAGF,aAAa;;EAG/C;;;;;AAKG;EACH,OAAOG,kBAAkBA,CAACC,QAAgB;IACtC,MAAMC,WAAW,GAAGJ,MAAM,CAACG,QAAQ,CAAC;IAEpC,OAAOC,WAAW,GAAGd,SAAS,CAACC,UAAU,EAAE;;EAG/C;;;;AAIG;EACH,OAAOc,KAAKA,CAAIC,CAAS,EAAEC,KAAS;IAChC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,CAACF,KAAK,CAAC,EAAED,CAAC,CAAC,CAAC;;AAE3E"},"metadata":{},"sourceType":"module","externalDependencies":[]}