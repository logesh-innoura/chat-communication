{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/** @internal */\nclass ThrottlingUtils {\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n  static generateThrottlingStorageKey(thumbprint) {\n    return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n  }\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n  static preProcess(cacheManager, thumbprint) {\n    const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    const value = cacheManager.getThrottlingCache(key);\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n      throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  }\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n  static postProcess(cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      const thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  }\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n  static checkResponseStatus(response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  }\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n  static checkResponseForRetryAfter(response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n    return false;\n  }\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n  static calculateThrottleTime(throttleTime) {\n    const time = throttleTime <= 0 ? 0 : throttleTime;\n    const currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  }\n  static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n    const thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    const key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  }\n}\nexport { ThrottlingUtils };","map":{"version":3,"names":["ThrottlingUtils","generateThrottlingStorageKey","thumbprint","ThrottlingConstants","THROTTLING_PREFIX","JSON","stringify","preProcess","cacheManager","key","value","getThrottlingCache","throttleTime","Date","now","removeItem","ServerError","errorCodes","join","Constants","EMPTY_STRING","errorMessage","subError","postProcess","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","HeaderNames","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","removeThrottle","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\network\\ThrottlingUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NetworkResponse } from \"./NetworkManager\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport {\r\n    HeaderNames,\r\n    ThrottlingConstants,\r\n    Constants,\r\n} from \"../utils/Constants\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { RequestThumbprint } from \"./RequestThumbprint\";\r\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\r\n\r\n/** @internal */\r\nexport class ThrottlingUtils {\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\r\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(\r\n            thumbprint\r\n        )}`;\r\n    }\r\n\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    static preProcess(\r\n        cacheManager: CacheManager,\r\n        thumbprint: RequestThumbprint\r\n    ): void {\r\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        const value = cacheManager.getThrottlingCache(key);\r\n\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key);\r\n                return;\r\n            }\r\n            throw new ServerError(\r\n                value.errorCodes?.join(\" \") || Constants.EMPTY_STRING,\r\n                value.errorMessage,\r\n                value.subError\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    static postProcess(\r\n        cacheManager: CacheManager,\r\n        thumbprint: RequestThumbprint,\r\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\r\n    ): void {\r\n        if (\r\n            ThrottlingUtils.checkResponseStatus(response) ||\r\n            ThrottlingUtils.checkResponseForRetryAfter(response)\r\n        ) {\r\n            const thumbprintValue: ThrottlingEntity = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(\r\n                    parseInt(response.headers[HeaderNames.RETRY_AFTER])\r\n                ),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror,\r\n            };\r\n            cacheManager.setThrottlingCache(\r\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\r\n                thumbprintValue\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    static checkResponseStatus(\r\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\r\n    ): boolean {\r\n        return (\r\n            response.status === 429 ||\r\n            (response.status >= 500 && response.status < 600)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    static checkResponseForRetryAfter(\r\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\r\n    ): boolean {\r\n        if (response.headers) {\r\n            return (\r\n                response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\r\n                (response.status < 200 || response.status >= 300)\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    static calculateThrottleTime(throttleTime: number): number {\r\n        const time = throttleTime <= 0 ? 0 : throttleTime;\r\n\r\n        const currentSeconds = Date.now() / 1000;\r\n        return Math.floor(\r\n            Math.min(\r\n                currentSeconds +\r\n                    (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\r\n                currentSeconds +\r\n                    ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\r\n            ) * 1000\r\n        );\r\n    }\r\n\r\n    static removeThrottle(\r\n        cacheManager: CacheManager,\r\n        clientId: string,\r\n        request: BaseAuthRequest,\r\n        homeAccountIdentifier?: string\r\n    ): void {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: homeAccountIdentifier,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid,\r\n        };\r\n\r\n        const key = this.generateThrottlingStorageKey(thumbprint);\r\n        cacheManager.removeItem(key);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}