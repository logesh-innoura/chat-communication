{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { UrlString } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Clears hash from window url.\r\n */\nfunction clearHash(contentWindow) {\n  // Office.js sets history.replaceState to null\n  contentWindow.location.hash = \"\";\n  if (typeof contentWindow.history.replaceState === \"function\") {\n    // Full removes \"#\" from url\n    contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n  }\n}\n/**\r\n * Replaces current hash with hash from provided url\r\n */\nfunction replaceHash(url) {\n  const urlParts = url.split(\"#\");\n  urlParts.shift(); // Remove part before the hash\n  window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n/**\r\n * Returns boolean of whether the current window is in an iframe or not.\r\n */\nfunction isInIframe() {\n  return window.parent !== window;\n}\n/**\r\n * Returns boolean of whether or not the current window is a popup opened by msal\r\n */\nfunction isInPopup() {\n  return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n}\n// #endregion\n/**\r\n * Returns current window URL as redirect uri\r\n */\nfunction getCurrentUri() {\n  return window.location.href.split(\"?\")[0].split(\"#\")[0];\n}\n/**\r\n * Gets the homepage url for the current window location.\r\n */\nfunction getHomepage() {\n  const currentUrl = new UrlString(window.location.href);\n  const urlComponents = currentUrl.getUrlComponents();\n  return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n/**\r\n * Throws error if we have completed an auth and are\r\n * attempting another auth request inside an iframe.\r\n */\nfunction blockReloadInHiddenIframes() {\n  const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n  // return an error if called from the hidden iframe created by the msal js silent calls\n  if (isResponseHash && isInIframe()) {\n    throw createBrowserAuthError(blockIframeReload);\n  }\n}\n/**\r\n * Block redirect operations in iframes unless explicitly allowed\r\n * @param interactionType Interaction type for the request\r\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n */\nfunction blockRedirectInIframe(interactionType, allowRedirectInIframe) {\n  const isIframedApp = isInIframe();\n  if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n    // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n    throw createBrowserAuthError(redirectInIframe);\n  }\n}\n/**\r\n * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n */\nfunction blockAcquireTokenInPopups() {\n  // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n  if (isInPopup()) {\n    throw createBrowserAuthError(blockNestedPopups);\n  }\n}\n/**\r\n * Throws error if token requests are made in non-browser environment\r\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n */\nfunction blockNonBrowserEnvironment(isBrowserEnvironment) {\n  if (!isBrowserEnvironment) {\n    throw createBrowserAuthError(nonBrowserEnvironment);\n  }\n}\n/**\r\n * Throws error if initialize hasn't been called\r\n * @param initialized\r\n */\nfunction blockAPICallsBeforeInitialize(initialized) {\n  if (!initialized) {\n    throw createBrowserAuthError(uninitializedPublicClientApplication);\n  }\n}\n/**\r\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\r\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\r\n * @returns\r\n */\nfunction preconnect(authority) {\n  const link = document.createElement(\"link\");\n  link.rel = \"preconnect\";\n  link.href = new URL(authority).origin;\n  link.crossOrigin = \"anonymous\";\n  document.head.appendChild(link);\n  // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n  window.setTimeout(() => {\n    try {\n      document.head.removeChild(link);\n    } catch {}\n  }, 10000); // 10s Timeout\n}\nexport { blockAPICallsBeforeInitialize, blockAcquireTokenInPopups, blockNonBrowserEnvironment, blockRedirectInIframe, blockReloadInHiddenIframes, clearHash, getCurrentUri, getHomepage, isInIframe, isInPopup, preconnect, replaceHash };","map":{"version":3,"names":["clearHash","contentWindow","location","hash","history","replaceState","origin","pathname","search","replaceHash","url","urlParts","split","shift","window","length","join","isInIframe","parent","isInPopup","opener","name","indexOf","BrowserConstants","POPUP_NAME_PREFIX","getCurrentUri","href","getHomepage","currentUrl","UrlString","urlComponents","getUrlComponents","Protocol","HostNameAndPort","blockReloadInHiddenIframes","isResponseHash","hashContainsKnownProperties","createBrowserAuthError","blockIframeReload","blockRedirectInIframe","interactionType","allowRedirectInIframe","isIframedApp","InteractionType","Redirect","redirectInIframe","blockAcquireTokenInPopups","blockNestedPopups","blockNonBrowserEnvironment","isBrowserEnvironment","nonBrowserEnvironment","blockAPICallsBeforeInitialize","initialized","uninitializedPublicClientApplication","preconnect","authority","link","document","createElement","rel","URL","crossOrigin","head","appendChild","setTimeout","removeChild"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { UrlString } from \"@azure/msal-common\";\r\nimport {\r\n    createBrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError\";\r\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\r\n\r\n/**\r\n * Clears hash from window url.\r\n */\r\nexport function clearHash(contentWindow: Window): void {\r\n    // Office.js sets history.replaceState to null\r\n    contentWindow.location.hash = \"\";\r\n    if (typeof contentWindow.history.replaceState === \"function\") {\r\n        // Full removes \"#\" from url\r\n        contentWindow.history.replaceState(\r\n            null,\r\n            \"\",\r\n            `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Replaces current hash with hash from provided url\r\n */\r\nexport function replaceHash(url: string): void {\r\n    const urlParts = url.split(\"#\");\r\n    urlParts.shift(); // Remove part before the hash\r\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\r\n}\r\n\r\n/**\r\n * Returns boolean of whether the current window is in an iframe or not.\r\n */\r\nexport function isInIframe(): boolean {\r\n    return window.parent !== window;\r\n}\r\n\r\n/**\r\n * Returns boolean of whether or not the current window is a popup opened by msal\r\n */\r\nexport function isInPopup(): boolean {\r\n    return (\r\n        typeof window !== \"undefined\" &&\r\n        !!window.opener &&\r\n        window.opener !== window &&\r\n        typeof window.name === \"string\" &&\r\n        window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0\r\n    );\r\n}\r\n\r\n// #endregion\r\n\r\n/**\r\n * Returns current window URL as redirect uri\r\n */\r\nexport function getCurrentUri(): string {\r\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n}\r\n\r\n/**\r\n * Gets the homepage url for the current window location.\r\n */\r\nexport function getHomepage(): string {\r\n    const currentUrl = new UrlString(window.location.href);\r\n    const urlComponents = currentUrl.getUrlComponents();\r\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\r\n}\r\n\r\n/**\r\n * Throws error if we have completed an auth and are\r\n * attempting another auth request inside an iframe.\r\n */\r\nexport function blockReloadInHiddenIframes(): void {\r\n    const isResponseHash = UrlString.hashContainsKnownProperties(\r\n        window.location.hash\r\n    );\r\n    // return an error if called from the hidden iframe created by the msal js silent calls\r\n    if (isResponseHash && isInIframe()) {\r\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockIframeReload);\r\n    }\r\n}\r\n\r\n/**\r\n * Block redirect operations in iframes unless explicitly allowed\r\n * @param interactionType Interaction type for the request\r\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n */\r\nexport function blockRedirectInIframe(\r\n    interactionType: InteractionType,\r\n    allowRedirectInIframe: boolean\r\n): void {\r\n    const isIframedApp = isInIframe();\r\n    if (\r\n        interactionType === InteractionType.Redirect &&\r\n        isIframedApp &&\r\n        !allowRedirectInIframe\r\n    ) {\r\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\r\n        throw createBrowserAuthError(BrowserAuthErrorCodes.redirectInIframe);\r\n    }\r\n}\r\n\r\n/**\r\n * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n */\r\nexport function blockAcquireTokenInPopups(): void {\r\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\r\n    if (isInPopup()) {\r\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockNestedPopups);\r\n    }\r\n}\r\n\r\n/**\r\n * Throws error if token requests are made in non-browser environment\r\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n */\r\nexport function blockNonBrowserEnvironment(\r\n    isBrowserEnvironment: boolean\r\n): void {\r\n    if (!isBrowserEnvironment) {\r\n        throw createBrowserAuthError(\r\n            BrowserAuthErrorCodes.nonBrowserEnvironment\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Throws error if initialize hasn't been called\r\n * @param initialized\r\n */\r\nexport function blockAPICallsBeforeInitialize(initialized: boolean): void {\r\n    if (!initialized) {\r\n        throw createBrowserAuthError(\r\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\r\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\r\n * @returns\r\n */\r\nexport function preconnect(authority: string): void {\r\n    const link = document.createElement(\"link\");\r\n    link.rel = \"preconnect\";\r\n    link.href = new URL(authority).origin;\r\n    link.crossOrigin = \"anonymous\";\r\n    document.head.appendChild(link);\r\n\r\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\r\n    window.setTimeout(() => {\r\n        try {\r\n            document.head.removeChild(link);\r\n        } catch {}\r\n    }, 10000); // 10s Timeout\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}