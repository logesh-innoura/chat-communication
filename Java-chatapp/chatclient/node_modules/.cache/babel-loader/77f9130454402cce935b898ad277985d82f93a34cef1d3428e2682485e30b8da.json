{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { invokeAsync, PerformanceEvents, AuthError } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.mjs';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.mjs';\nimport { authCodeRequired, silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SilentAuthCodeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    // Auth code payload is required\n    if (!request.code) {\n      throw createBrowserAuthError(authCodeRequired);\n    }\n    // Create silent request\n    const silentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(request, InteractionType.Silent);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n    try {\n      // Create auth code request (PKCE not needed)\n      const authCodeRequest = {\n        ...silentRequest,\n        code: request.code\n      };\n      // Initialize the client\n      const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority);\n      const authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n      this.logger.verbose(\"Auth code client created\");\n      // Create silent handler\n      const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n      // Handle auth code parameters from request\n      return await invokeAsync(interactionHandler.handleCodeResponseFromServer.bind(interactionHandler), PerformanceEvents.HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)({\n        code: request.code,\n        msgraph_host: request.msGraphHost,\n        cloud_graph_host_name: request.cloudGraphHostName,\n        cloud_instance_host_name: request.cloudInstanceHostName\n      }, silentRequest, false);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      throw e;\n    }\n  }\n  /**\r\n   * Currently Unsupported\r\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n}\nexport { SilentAuthCodeClient };","map":{"version":3,"names":["SilentAuthCodeClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeMessageHandler","correlationId","acquireToken","request","code","createBrowserAuthError","authCodeRequired","silentRequest","invokeAsync","initializeAuthorizationRequest","bind","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","InteractionType","Silent","serverTelemetryManager","initializeServerTelemetryManager","authCodeRequest","clientConfig","getClientConfiguration","StandardInteractionClientGetClientConfiguration","authority","authClient","HybridSpaAuthorizationCodeClient","verbose","interactionHandler","InteractionHandler","browserStorage","handleCodeResponseFromServer","HandleCodeResponseFromServer","msgraph_host","msGraphHost","cloud_graph_host_name","cloudGraphHostName","cloud_instance_host_name","cloudInstanceHostName","e","AuthError","setCorrelationId","cacheFailedRequest","logout","Promise","reject","silentLogoutUnsupported"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentAuthCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    ICrypto,\r\n    Logger,\r\n    CommonAuthorizationCodeRequest,\r\n    AuthError,\r\n    IPerformanceClient,\r\n    PerformanceEvents,\r\n    invokeAsync,\r\n} from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport {\r\n    createBrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError\";\r\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\r\n\r\nexport class SilentAuthCodeClient extends StandardInteractionClient {\r\n    private apiId: ApiId;\r\n\r\n    constructor(\r\n        config: BrowserConfiguration,\r\n        storageImpl: BrowserCacheManager,\r\n        browserCrypto: ICrypto,\r\n        logger: Logger,\r\n        eventHandler: EventHandler,\r\n        navigationClient: INavigationClient,\r\n        apiId: ApiId,\r\n        performanceClient: IPerformanceClient,\r\n        nativeMessageHandler?: NativeMessageHandler,\r\n        correlationId?: string\r\n    ) {\r\n        super(\r\n            config,\r\n            storageImpl,\r\n            browserCrypto,\r\n            logger,\r\n            eventHandler,\r\n            navigationClient,\r\n            performanceClient,\r\n            nativeMessageHandler,\r\n            correlationId\r\n        );\r\n        this.apiId = apiId;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n     * @param request\r\n     */\r\n    async acquireToken(\r\n        request: AuthorizationCodeRequest\r\n    ): Promise<AuthenticationResult> {\r\n        // Auth code payload is required\r\n        if (!request.code) {\r\n            throw createBrowserAuthError(\r\n                BrowserAuthErrorCodes.authCodeRequired\r\n            );\r\n        }\r\n\r\n        // Create silent request\r\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\r\n            this.initializeAuthorizationRequest.bind(this),\r\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request, InteractionType.Silent);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\r\n            this.apiId\r\n        );\r\n\r\n        try {\r\n            // Create auth code request (PKCE not needed)\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\r\n                ...silentRequest,\r\n                code: request.code,\r\n            };\r\n\r\n            // Initialize the client\r\n            const clientConfig = await invokeAsync(\r\n                this.getClientConfiguration.bind(this),\r\n                PerformanceEvents.StandardInteractionClientGetClientConfiguration,\r\n                this.logger,\r\n                this.performanceClient,\r\n                request.correlationId\r\n            )(serverTelemetryManager, silentRequest.authority);\r\n            const authClient: HybridSpaAuthorizationCodeClient =\r\n                new HybridSpaAuthorizationCodeClient(clientConfig);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create silent handler\r\n            const interactionHandler = new InteractionHandler(\r\n                authClient,\r\n                this.browserStorage,\r\n                authCodeRequest,\r\n                this.logger,\r\n                this.performanceClient\r\n            );\r\n\r\n            // Handle auth code parameters from request\r\n            return await invokeAsync(\r\n                interactionHandler.handleCodeResponseFromServer.bind(\r\n                    interactionHandler\r\n                ),\r\n                PerformanceEvents.HandleCodeResponseFromServer,\r\n                this.logger,\r\n                this.performanceClient,\r\n                request.correlationId\r\n            )(\r\n                {\r\n                    code: request.code,\r\n                    msgraph_host: request.msGraphHost,\r\n                    cloud_graph_host_name: request.cloudGraphHostName,\r\n                    cloud_instance_host_name: request.cloudInstanceHostName,\r\n                },\r\n                silentRequest,\r\n                false\r\n            );\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n                serverTelemetryManager.cacheFailedRequest(e);\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(\r\n            createBrowserAuthError(\r\n                BrowserAuthErrorCodes.silentLogoutUnsupported\r\n            )\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;AAAA;;;AAGG;AA4BG,MAAOA,oBAAqB,SAAQC,yBAAyB;EAG/DC,YACIC,MAA4B,EAC5BC,WAAgC,EAChCC,aAAsB,EACtBC,MAAc,EACdC,YAA0B,EAC1BC,gBAAmC,EACnCC,KAAY,EACZC,iBAAqC,EACrCC,oBAA2C,EAC3CC,aAAsB;IAEtB,KAAK,CACDT,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,MAAM,EACNC,YAAY,EACZC,gBAAgB,EAChBE,iBAAiB,EACjBC,oBAAoB,EACpBC,aAAa,CAChB;IACD,IAAI,CAACH,KAAK,GAAGA,KAAK;;EAGtB;;;AAGG;EACH,MAAMI,YAAYA,CACdC,OAAiC;;IAGjC,IAAI,CAACA,OAAO,CAACC,IAAI,EAAE;MACf,MAAMC,sBAAsB,CACxBC,gBAAsC,CACzC;IACJ;;IAGD,MAAMC,aAAa,GAA4B,MAAMC,WAAW,CAC5D,IAAI,CAACC,8BAA8B,CAACC,IAAI,CAAC,IAAI,CAAC,EAC9CC,iBAAiB,CAACC,uDAAuD,EACzE,IAAI,CAACjB,MAAM,EACX,IAAI,CAACI,iBAAiB,EACtBI,OAAO,CAACF,aAAa,CACxB,CAACE,OAAO,EAAEU,eAAe,CAACC,MAAM,CAAC;IAElC,MAAMC,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChE,IAAI,CAAClB,KAAK,CACb;IAED,IAAI;;MAEA,MAAMmB,eAAe,GAAmC;QACpD,GAAGV,aAAa;QAChBH,IAAI,EAAED,OAAO,CAACC;OACjB;;MAGD,MAAMc,YAAY,GAAG,MAAMV,WAAW,CAClC,IAAI,CAACW,sBAAsB,CAACT,IAAI,CAAC,IAAI,CAAC,EACtCC,iBAAiB,CAACS,+CAA+C,EACjE,IAAI,CAACzB,MAAM,EACX,IAAI,CAACI,iBAAiB,EACtBI,OAAO,CAACF,aAAa,CACxB,CAACc,sBAAsB,EAAER,aAAa,CAACc,SAAS,CAAC;MAClD,MAAMC,UAAU,GACZ,IAAIC,gCAAgC,CAACL,YAAY,CAAC;MACtD,IAAI,CAACvB,MAAM,CAAC6B,OAAO,CAAC,0BAA0B,CAAC;;MAG/C,MAAMC,kBAAkB,GAAG,IAAIC,kBAAkB,CAC7CJ,UAAU,EACV,IAAI,CAACK,cAAc,EACnBV,eAAe,EACf,IAAI,CAACtB,MAAM,EACX,IAAI,CAACI,iBAAiB,CACzB;;MAGD,OAAO,MAAMS,WAAW,CACpBiB,kBAAkB,CAACG,4BAA4B,CAAClB,IAAI,CAChDe,kBAAkB,CACrB,EACDd,iBAAiB,CAACkB,4BAA4B,EAC9C,IAAI,CAAClC,MAAM,EACX,IAAI,CAACI,iBAAiB,EACtBI,OAAO,CAACF,aAAa,CACxB,CACG;QACIG,IAAI,EAAED,OAAO,CAACC,IAAI;QAClB0B,YAAY,EAAE3B,OAAO,CAAC4B,WAAW;QACjCC,qBAAqB,EAAE7B,OAAO,CAAC8B,kBAAkB;QACjDC,wBAAwB,EAAE/B,OAAO,CAACgC;MACrC,GACD5B,aAAa,EACb,KAAK,CACR;IACJ,EAAC,OAAO6B,CAAC,EAAE;MACR,IAAIA,CAAC,YAAYC,SAAS,EAAE;QACvBD,CAAe,CAACE,gBAAgB,CAAC,IAAI,CAACrC,aAAa,CAAC;QACrDc,sBAAsB,CAACwB,kBAAkB,CAACH,CAAC,CAAC;MAC/C;MACD,MAAMA,CAAC;IACV;;EAGL;;AAEG;EACHI,MAAMA,CAAA;;IAEF,OAAOC,OAAO,CAACC,MAAM,CACjBrC,sBAAsB,CAClBsC,uBAA6C,CAChD,CACJ;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}