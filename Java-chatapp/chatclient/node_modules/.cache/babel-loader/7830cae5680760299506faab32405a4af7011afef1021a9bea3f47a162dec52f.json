{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { AuthError } from './AuthError.mjs';\nimport { clientInfoDecodingError, clientInfoEmptyError, tokenParsingError, nullOrEmptyToken, endpointResolutionError, networkError, openIdConfigError, hashNotDeserialized, invalidState, stateMismatch, stateNotFound, nonceMismatch, authTimeNotFound, maxAgeTranspired, multipleMatchingTokens, multipleMatchingAccounts, multipleMatchingAppMetadata, requestCannotBeMade, cannotRemoveEmptyScope, cannotAppendScopeSet, emptyInputScopeSet, deviceCodePollingCancelled, deviceCodeExpired, deviceCodeUnknownError, noAccountInSilentRequest, invalidCacheRecord, invalidCacheEnvironment, noAccountFound, noCryptoObject, unexpectedCredentialType, invalidAssertion, invalidClientCredential, tokenRefreshRequired, userTimeoutReached, tokenClaimsCnfRequiredForSignedJwt, authorizationCodeMissingFromServerResponse, bindingKeyNotRemoved, endSessionEndpointNotSupported, keyIdMissing, noNetworkConnectivity, userCanceled, missingTenantIdError, nestedAppAuthBridgeDisabled, methodNotImplemented } from './ClientAuthErrorCodes.mjs';\nimport * as ClientAuthErrorCodes from './ClientAuthErrorCodes.mjs';\nexport { ClientAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nconst ClientAuthErrorMessages = {\n  [clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\n  [clientInfoEmptyError]: \"The client info was empty\",\n  [tokenParsingError]: \"Token cannot be parsed\",\n  [nullOrEmptyToken]: \"The token is null or empty\",\n  [endpointResolutionError]: \"Endpoints cannot be resolved\",\n  [networkError]: \"Network request failed\",\n  [openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n  [hashNotDeserialized]: \"The hash parameters could not be deserialized\",\n  [invalidState]: \"State was not the expected format\",\n  [stateMismatch]: \"State mismatch error\",\n  [stateNotFound]: \"State not found\",\n  [nonceMismatch]: \"Nonce mismatch error\",\n  [authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\",\n  [maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n  [multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\",\n  [multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n  [multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n  [requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\n  [cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\n  [cannotAppendScopeSet]: \"Cannot append ScopeSet\",\n  [emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\n  [deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n  [deviceCodeExpired]: \"Device code is expired.\",\n  [deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\n  [noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\n  [invalidCacheRecord]: \"Cache record object was null or undefined.\",\n  [invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\n  [noAccountFound]: \"No account found in cache for given key.\",\n  [noCryptoObject]: \"No crypto object detected.\",\n  [unexpectedCredentialType]: \"Unexpected credential type.\",\n  [invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n  [invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n  [tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n  [userTimeoutReached]: \"User defined timeout for device code polling reached\",\n  [tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\n  [authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\n  [bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\n  [endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\n  [keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n  [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n  [userCanceled]: \"User cancelled the flow.\",\n  [missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n  [methodNotImplemented]: \"This method has not been implemented\",\n  [nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\"\n};\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */\nconst ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: clientInfoDecodingError,\n    desc: ClientAuthErrorMessages[clientInfoDecodingError]\n  },\n  clientInfoEmptyError: {\n    code: clientInfoEmptyError,\n    desc: ClientAuthErrorMessages[clientInfoEmptyError]\n  },\n  tokenParsingError: {\n    code: tokenParsingError,\n    desc: ClientAuthErrorMessages[tokenParsingError]\n  },\n  nullOrEmptyToken: {\n    code: nullOrEmptyToken,\n    desc: ClientAuthErrorMessages[nullOrEmptyToken]\n  },\n  endpointResolutionError: {\n    code: endpointResolutionError,\n    desc: ClientAuthErrorMessages[endpointResolutionError]\n  },\n  networkError: {\n    code: networkError,\n    desc: ClientAuthErrorMessages[networkError]\n  },\n  unableToGetOpenidConfigError: {\n    code: openIdConfigError,\n    desc: ClientAuthErrorMessages[openIdConfigError]\n  },\n  hashNotDeserialized: {\n    code: hashNotDeserialized,\n    desc: ClientAuthErrorMessages[hashNotDeserialized]\n  },\n  invalidStateError: {\n    code: invalidState,\n    desc: ClientAuthErrorMessages[invalidState]\n  },\n  stateMismatchError: {\n    code: stateMismatch,\n    desc: ClientAuthErrorMessages[stateMismatch]\n  },\n  stateNotFoundError: {\n    code: stateNotFound,\n    desc: ClientAuthErrorMessages[stateNotFound]\n  },\n  nonceMismatchError: {\n    code: nonceMismatch,\n    desc: ClientAuthErrorMessages[nonceMismatch]\n  },\n  authTimeNotFoundError: {\n    code: authTimeNotFound,\n    desc: ClientAuthErrorMessages[authTimeNotFound]\n  },\n  maxAgeTranspired: {\n    code: maxAgeTranspired,\n    desc: ClientAuthErrorMessages[maxAgeTranspired]\n  },\n  multipleMatchingTokens: {\n    code: multipleMatchingTokens,\n    desc: ClientAuthErrorMessages[multipleMatchingTokens]\n  },\n  multipleMatchingAccounts: {\n    code: multipleMatchingAccounts,\n    desc: ClientAuthErrorMessages[multipleMatchingAccounts]\n  },\n  multipleMatchingAppMetadata: {\n    code: multipleMatchingAppMetadata,\n    desc: ClientAuthErrorMessages[multipleMatchingAppMetadata]\n  },\n  tokenRequestCannotBeMade: {\n    code: requestCannotBeMade,\n    desc: ClientAuthErrorMessages[requestCannotBeMade]\n  },\n  removeEmptyScopeError: {\n    code: cannotRemoveEmptyScope,\n    desc: ClientAuthErrorMessages[cannotRemoveEmptyScope]\n  },\n  appendScopeSetError: {\n    code: cannotAppendScopeSet,\n    desc: ClientAuthErrorMessages[cannotAppendScopeSet]\n  },\n  emptyInputScopeSetError: {\n    code: emptyInputScopeSet,\n    desc: ClientAuthErrorMessages[emptyInputScopeSet]\n  },\n  DeviceCodePollingCancelled: {\n    code: deviceCodePollingCancelled,\n    desc: ClientAuthErrorMessages[deviceCodePollingCancelled]\n  },\n  DeviceCodeExpired: {\n    code: deviceCodeExpired,\n    desc: ClientAuthErrorMessages[deviceCodeExpired]\n  },\n  DeviceCodeUnknownError: {\n    code: deviceCodeUnknownError,\n    desc: ClientAuthErrorMessages[deviceCodeUnknownError]\n  },\n  NoAccountInSilentRequest: {\n    code: noAccountInSilentRequest,\n    desc: ClientAuthErrorMessages[noAccountInSilentRequest]\n  },\n  invalidCacheRecord: {\n    code: invalidCacheRecord,\n    desc: ClientAuthErrorMessages[invalidCacheRecord]\n  },\n  invalidCacheEnvironment: {\n    code: invalidCacheEnvironment,\n    desc: ClientAuthErrorMessages[invalidCacheEnvironment]\n  },\n  noAccountFound: {\n    code: noAccountFound,\n    desc: ClientAuthErrorMessages[noAccountFound]\n  },\n  noCryptoObj: {\n    code: noCryptoObject,\n    desc: ClientAuthErrorMessages[noCryptoObject]\n  },\n  unexpectedCredentialType: {\n    code: unexpectedCredentialType,\n    desc: ClientAuthErrorMessages[unexpectedCredentialType]\n  },\n  invalidAssertion: {\n    code: invalidAssertion,\n    desc: ClientAuthErrorMessages[invalidAssertion]\n  },\n  invalidClientCredential: {\n    code: invalidClientCredential,\n    desc: ClientAuthErrorMessages[invalidClientCredential]\n  },\n  tokenRefreshRequired: {\n    code: tokenRefreshRequired,\n    desc: ClientAuthErrorMessages[tokenRefreshRequired]\n  },\n  userTimeoutReached: {\n    code: userTimeoutReached,\n    desc: ClientAuthErrorMessages[userTimeoutReached]\n  },\n  tokenClaimsRequired: {\n    code: tokenClaimsCnfRequiredForSignedJwt,\n    desc: ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt]\n  },\n  noAuthorizationCodeFromServer: {\n    code: authorizationCodeMissingFromServerResponse,\n    desc: ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse]\n  },\n  bindingKeyNotRemovedError: {\n    code: bindingKeyNotRemoved,\n    desc: ClientAuthErrorMessages[bindingKeyNotRemoved]\n  },\n  logoutNotSupported: {\n    code: endSessionEndpointNotSupported,\n    desc: ClientAuthErrorMessages[endSessionEndpointNotSupported]\n  },\n  keyIdMissing: {\n    code: keyIdMissing,\n    desc: ClientAuthErrorMessages[keyIdMissing]\n  },\n  noNetworkConnectivity: {\n    code: noNetworkConnectivity,\n    desc: ClientAuthErrorMessages[noNetworkConnectivity]\n  },\n  userCanceledError: {\n    code: userCanceled,\n    desc: ClientAuthErrorMessages[userCanceled]\n  },\n  missingTenantIdError: {\n    code: missingTenantIdError,\n    desc: ClientAuthErrorMessages[missingTenantIdError]\n  },\n  nestedAppAuthBridgeDisabled: {\n    code: nestedAppAuthBridgeDisabled,\n    desc: ClientAuthErrorMessages[nestedAppAuthBridgeDisabled]\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\nclass ClientAuthError extends AuthError {\n  constructor(errorCode, additionalMessage) {\n    super(errorCode, additionalMessage ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}` : ClientAuthErrorMessages[errorCode]);\n    this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(this, ClientAuthError.prototype);\n  }\n}\nfunction createClientAuthError(errorCode, additionalMessage) {\n  return new ClientAuthError(errorCode, additionalMessage);\n}\nexport { ClientAuthError, ClientAuthErrorMessage, ClientAuthErrorMessages, createClientAuthError };","map":{"version":3,"names":["ClientAuthErrorMessages","clientInfoDecodingError","clientInfoEmptyError","tokenParsingError","nullOrEmptyToken","endpointResolutionError","networkError","openIdConfigError","hashNotDeserialized","invalidState","stateMismatch","stateNotFound","nonceMismatch","authTimeNotFound","maxAgeTranspired","multipleMatchingTokens","multipleMatchingAccounts","multipleMatchingAppMetadata","requestCannotBeMade","cannotRemoveEmptyScope","cannotAppendScopeSet","emptyInputScopeSet","deviceCodePollingCancelled","deviceCodeExpired","deviceCodeUnknownError","noAccountInSilentRequest","invalidCacheRecord","invalidCacheEnvironment","noAccountFound","noCryptoObject","unexpectedCredentialType","invalidAssertion","invalidClientCredential","tokenRefreshRequired","userTimeoutReached","tokenClaimsCnfRequiredForSignedJwt","authorizationCodeMissingFromServerResponse","bindingKeyNotRemoved","endSessionEndpointNotSupported","keyIdMissing","noNetworkConnectivity","userCanceled","missingTenantIdError","methodNotImplemented","nestedAppAuthBridgeDisabled","ClientAuthErrorMessage","code","desc","unableToGetOpenidConfigError","invalidStateError","stateMismatchError","stateNotFoundError","nonceMismatchError","authTimeNotFoundError","tokenRequestCannotBeMade","removeEmptyScopeError","appendScopeSetError","emptyInputScopeSetError","DeviceCodePollingCancelled","DeviceCodeExpired","DeviceCodeUnknownError","NoAccountInSilentRequest","noCryptoObj","tokenClaimsRequired","noAuthorizationCodeFromServer","bindingKeyNotRemovedError","logoutNotSupported","userCanceledError","ClientAuthError","AuthError","constructor","errorCode","additionalMessage","name","Object","setPrototypeOf","prototype","createClientAuthError"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\error\\ClientAuthError.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"./AuthError\";\r\nimport * as ClientAuthErrorCodes from \"./ClientAuthErrorCodes\";\r\nexport { ClientAuthErrorCodes }; // Allow importing as \"ClientAuthErrorCodes\";\r\n\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\n\r\nexport const ClientAuthErrorMessages = {\r\n    [ClientAuthErrorCodes.clientInfoDecodingError]:\r\n        \"The client info could not be parsed/decoded correctly\",\r\n    [ClientAuthErrorCodes.clientInfoEmptyError]: \"The client info was empty\",\r\n    [ClientAuthErrorCodes.tokenParsingError]: \"Token cannot be parsed\",\r\n    [ClientAuthErrorCodes.nullOrEmptyToken]: \"The token is null or empty\",\r\n    [ClientAuthErrorCodes.endpointResolutionError]:\r\n        \"Endpoints cannot be resolved\",\r\n    [ClientAuthErrorCodes.networkError]: \"Network request failed\",\r\n    [ClientAuthErrorCodes.openIdConfigError]:\r\n        \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\r\n    [ClientAuthErrorCodes.hashNotDeserialized]:\r\n        \"The hash parameters could not be deserialized\",\r\n    [ClientAuthErrorCodes.invalidState]: \"State was not the expected format\",\r\n    [ClientAuthErrorCodes.stateMismatch]: \"State mismatch error\",\r\n    [ClientAuthErrorCodes.stateNotFound]: \"State not found\",\r\n    [ClientAuthErrorCodes.nonceMismatch]: \"Nonce mismatch error\",\r\n    [ClientAuthErrorCodes.authTimeNotFound]:\r\n        \"Max Age was requested and the ID token is missing the auth_time variable.\" +\r\n        \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\r\n        \" See https://aka.ms/msaljs/optional-claims for more information.\",\r\n    [ClientAuthErrorCodes.maxAgeTranspired]:\r\n        \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\r\n    [ClientAuthErrorCodes.multipleMatchingTokens]:\r\n        \"The cache contains multiple tokens satisfying the requirements. \" +\r\n        \"Call AcquireToken again providing more requirements such as authority or account.\",\r\n    [ClientAuthErrorCodes.multipleMatchingAccounts]:\r\n        \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\r\n    [ClientAuthErrorCodes.multipleMatchingAppMetadata]:\r\n        \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\r\n    [ClientAuthErrorCodes.requestCannotBeMade]:\r\n        \"Token request cannot be made without authorization code or refresh token.\",\r\n    [ClientAuthErrorCodes.cannotRemoveEmptyScope]:\r\n        \"Cannot remove null or empty scope from ScopeSet\",\r\n    [ClientAuthErrorCodes.cannotAppendScopeSet]: \"Cannot append ScopeSet\",\r\n    [ClientAuthErrorCodes.emptyInputScopeSet]:\r\n        \"Empty input ScopeSet cannot be processed\",\r\n    [ClientAuthErrorCodes.deviceCodePollingCancelled]:\r\n        \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\r\n    [ClientAuthErrorCodes.deviceCodeExpired]: \"Device code is expired.\",\r\n    [ClientAuthErrorCodes.deviceCodeUnknownError]:\r\n        \"Device code stopped polling for unknown reasons.\",\r\n    [ClientAuthErrorCodes.noAccountInSilentRequest]:\r\n        \"Please pass an account object, silent flow is not supported without account information\",\r\n    [ClientAuthErrorCodes.invalidCacheRecord]:\r\n        \"Cache record object was null or undefined.\",\r\n    [ClientAuthErrorCodes.invalidCacheEnvironment]:\r\n        \"Invalid environment when attempting to create cache entry\",\r\n    [ClientAuthErrorCodes.noAccountFound]:\r\n        \"No account found in cache for given key.\",\r\n    [ClientAuthErrorCodes.noCryptoObject]: \"No crypto object detected.\",\r\n    [ClientAuthErrorCodes.unexpectedCredentialType]:\r\n        \"Unexpected credential type.\",\r\n    [ClientAuthErrorCodes.invalidAssertion]:\r\n        \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\r\n    [ClientAuthErrorCodes.invalidClientCredential]:\r\n        \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\r\n    [ClientAuthErrorCodes.tokenRefreshRequired]:\r\n        \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\r\n    [ClientAuthErrorCodes.userTimeoutReached]:\r\n        \"User defined timeout for device code polling reached\",\r\n    [ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt]:\r\n        \"Cannot generate a POP jwt if the token_claims are not populated\",\r\n    [ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse]:\r\n        \"Server response does not contain an authorization code to proceed\",\r\n    [ClientAuthErrorCodes.bindingKeyNotRemoved]:\r\n        \"Could not remove the credential's binding key from storage.\",\r\n    [ClientAuthErrorCodes.endSessionEndpointNotSupported]:\r\n        \"The provided authority does not support logout\",\r\n    [ClientAuthErrorCodes.keyIdMissing]:\r\n        \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\r\n    [ClientAuthErrorCodes.noNetworkConnectivity]:\r\n        \"No network connectivity. Check your internet connection.\",\r\n    [ClientAuthErrorCodes.userCanceled]: \"User cancelled the flow.\",\r\n    [ClientAuthErrorCodes.missingTenantIdError]:\r\n        \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\r\n    [ClientAuthErrorCodes.methodNotImplemented]:\r\n        \"This method has not been implemented\",\r\n    [ClientAuthErrorCodes.nestedAppAuthBridgeDisabled]:\r\n        \"The nested app auth bridge is disabled\",\r\n};\r\n\r\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */\r\nexport const ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: ClientAuthErrorCodes.clientInfoDecodingError,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.clientInfoDecodingError\r\n        ],\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: ClientAuthErrorCodes.clientInfoEmptyError,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.clientInfoEmptyError\r\n        ],\r\n    },\r\n    tokenParsingError: {\r\n        code: ClientAuthErrorCodes.tokenParsingError,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.tokenParsingError],\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: ClientAuthErrorCodes.nullOrEmptyToken,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.nullOrEmptyToken],\r\n    },\r\n    endpointResolutionError: {\r\n        code: ClientAuthErrorCodes.endpointResolutionError,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.endpointResolutionError\r\n        ],\r\n    },\r\n    networkError: {\r\n        code: ClientAuthErrorCodes.networkError,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.networkError],\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: ClientAuthErrorCodes.openIdConfigError,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.openIdConfigError],\r\n    },\r\n    hashNotDeserialized: {\r\n        code: ClientAuthErrorCodes.hashNotDeserialized,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.hashNotDeserialized],\r\n    },\r\n    invalidStateError: {\r\n        code: ClientAuthErrorCodes.invalidState,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.invalidState],\r\n    },\r\n    stateMismatchError: {\r\n        code: ClientAuthErrorCodes.stateMismatch,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.stateMismatch],\r\n    },\r\n    stateNotFoundError: {\r\n        code: ClientAuthErrorCodes.stateNotFound,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.stateNotFound],\r\n    },\r\n    nonceMismatchError: {\r\n        code: ClientAuthErrorCodes.nonceMismatch,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.nonceMismatch],\r\n    },\r\n    authTimeNotFoundError: {\r\n        code: ClientAuthErrorCodes.authTimeNotFound,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.authTimeNotFound],\r\n    },\r\n    maxAgeTranspired: {\r\n        code: ClientAuthErrorCodes.maxAgeTranspired,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.maxAgeTranspired],\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: ClientAuthErrorCodes.multipleMatchingTokens,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.multipleMatchingTokens\r\n        ],\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: ClientAuthErrorCodes.multipleMatchingAccounts,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.multipleMatchingAccounts\r\n        ],\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: ClientAuthErrorCodes.multipleMatchingAppMetadata,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.multipleMatchingAppMetadata\r\n        ],\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: ClientAuthErrorCodes.requestCannotBeMade,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.requestCannotBeMade],\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: ClientAuthErrorCodes.cannotRemoveEmptyScope,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.cannotRemoveEmptyScope\r\n        ],\r\n    },\r\n    appendScopeSetError: {\r\n        code: ClientAuthErrorCodes.cannotAppendScopeSet,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.cannotAppendScopeSet\r\n        ],\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: ClientAuthErrorCodes.emptyInputScopeSet,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.emptyInputScopeSet],\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: ClientAuthErrorCodes.deviceCodePollingCancelled,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.deviceCodePollingCancelled\r\n        ],\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: ClientAuthErrorCodes.deviceCodeExpired,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.deviceCodeExpired],\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: ClientAuthErrorCodes.deviceCodeUnknownError,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.deviceCodeUnknownError\r\n        ],\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: ClientAuthErrorCodes.noAccountInSilentRequest,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.noAccountInSilentRequest\r\n        ],\r\n    },\r\n    invalidCacheRecord: {\r\n        code: ClientAuthErrorCodes.invalidCacheRecord,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.invalidCacheRecord],\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: ClientAuthErrorCodes.invalidCacheEnvironment,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.invalidCacheEnvironment\r\n        ],\r\n    },\r\n    noAccountFound: {\r\n        code: ClientAuthErrorCodes.noAccountFound,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.noAccountFound],\r\n    },\r\n    noCryptoObj: {\r\n        code: ClientAuthErrorCodes.noCryptoObject,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.noCryptoObject],\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: ClientAuthErrorCodes.unexpectedCredentialType,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.unexpectedCredentialType\r\n        ],\r\n    },\r\n    invalidAssertion: {\r\n        code: ClientAuthErrorCodes.invalidAssertion,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.invalidAssertion],\r\n    },\r\n    invalidClientCredential: {\r\n        code: ClientAuthErrorCodes.invalidClientCredential,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.invalidClientCredential\r\n        ],\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: ClientAuthErrorCodes.tokenRefreshRequired,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.tokenRefreshRequired\r\n        ],\r\n    },\r\n    userTimeoutReached: {\r\n        code: ClientAuthErrorCodes.userTimeoutReached,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.userTimeoutReached],\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt\r\n        ],\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse\r\n        ],\r\n    },\r\n    bindingKeyNotRemovedError: {\r\n        code: ClientAuthErrorCodes.bindingKeyNotRemoved,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.bindingKeyNotRemoved\r\n        ],\r\n    },\r\n    logoutNotSupported: {\r\n        code: ClientAuthErrorCodes.endSessionEndpointNotSupported,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.endSessionEndpointNotSupported\r\n        ],\r\n    },\r\n    keyIdMissing: {\r\n        code: ClientAuthErrorCodes.keyIdMissing,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.keyIdMissing],\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: ClientAuthErrorCodes.noNetworkConnectivity,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.noNetworkConnectivity\r\n        ],\r\n    },\r\n    userCanceledError: {\r\n        code: ClientAuthErrorCodes.userCanceled,\r\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.userCanceled],\r\n    },\r\n    missingTenantIdError: {\r\n        code: ClientAuthErrorCodes.missingTenantIdError,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.missingTenantIdError\r\n        ],\r\n    },\r\n    nestedAppAuthBridgeDisabled: {\r\n        code: ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\r\n        desc: ClientAuthErrorMessages[\r\n            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\r\n        ],\r\n    },\r\n};\r\n\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nexport class ClientAuthError extends AuthError {\r\n    constructor(errorCode: string, additionalMessage?: string) {\r\n        super(\r\n            errorCode,\r\n            additionalMessage\r\n                ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}`\r\n                : ClientAuthErrorMessages[errorCode]\r\n        );\r\n        this.name = \"ClientAuthError\";\r\n\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n}\r\n\r\nexport function createClientAuthError(\r\n    errorCode: string,\r\n    additionalMessage?: string\r\n): ClientAuthError {\r\n    return new ClientAuthError(errorCode, additionalMessage);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}