{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { hashNotDeserialized } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */\nfunction stripLeadingHashOrQuery(responseString) {\n  if (responseString.startsWith(\"#/\")) {\n    return responseString.substring(2);\n  } else if (responseString.startsWith(\"#\") || responseString.startsWith(\"?\")) {\n    return responseString.substring(1);\n  }\n  return responseString;\n}\n/**\r\n * Returns URL hash as server auth code response object.\r\n */\nfunction getDeserializedResponse(responseString) {\n  // Check if given hash is empty\n  if (!responseString || responseString.indexOf(\"=\") < 0) {\n    return null;\n  }\n  try {\n    // Strip the # or ? symbol if present\n    const normalizedResponse = stripLeadingHashOrQuery(responseString);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\n    // Check for known response properties\n    if (deserializedHash.code || deserializedHash.error || deserializedHash.error_description || deserializedHash.state) {\n      return deserializedHash;\n    }\n  } catch (e) {\n    throw createClientAuthError(hashNotDeserialized);\n  }\n  return null;\n}\nexport { getDeserializedResponse, stripLeadingHashOrQuery };","map":{"version":3,"names":["stripLeadingHashOrQuery","responseString","startsWith","substring","getDeserializedResponse","indexOf","normalizedResponse","deserializedHash","Object","fromEntries","URLSearchParams","code","error","error_description","state","e","createClientAuthError","hashNotDeserialized"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\utils\\UrlUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\r\nimport {\r\n    ClientAuthErrorCodes,\r\n    createClientAuthError,\r\n} from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */\r\nexport function stripLeadingHashOrQuery(responseString: string): string {\r\n    if (responseString.startsWith(\"#/\")) {\r\n        return responseString.substring(2);\r\n    } else if (\r\n        responseString.startsWith(\"#\") ||\r\n        responseString.startsWith(\"?\")\r\n    ) {\r\n        return responseString.substring(1);\r\n    }\r\n\r\n    return responseString;\r\n}\r\n\r\n/**\r\n * Returns URL hash as server auth code response object.\r\n */\r\nexport function getDeserializedResponse(\r\n    responseString: string\r\n): ServerAuthorizationCodeResponse | null {\r\n    // Check if given hash is empty\r\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\r\n        return null;\r\n    }\r\n    try {\r\n        // Strip the # or ? symbol if present\r\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        const deserializedHash: ServerAuthorizationCodeResponse =\r\n            Object.fromEntries(new URLSearchParams(normalizedResponse));\r\n\r\n        // Check for known response properties\r\n        if (\r\n            deserializedHash.code ||\r\n            deserializedHash.error ||\r\n            deserializedHash.error_description ||\r\n            deserializedHash.state\r\n        ) {\r\n            return deserializedHash;\r\n        }\r\n    } catch (e) {\r\n        throw createClientAuthError(ClientAuthErrorCodes.hashNotDeserialized);\r\n    }\r\n\r\n    return null;\r\n}\r\n"],"mappings":";;;;;;AAAA;;;AAGG;AAQH;;;AAGG;AACG,SAAUA,uBAAuBA,CAACC,cAAsB;EAC1D,IAAIA,cAAc,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;IACjC,OAAOD,cAAc,CAACE,SAAS,CAAC,CAAC,CAAC;EACrC,OAAM,IACHF,cAAc,CAACC,UAAU,CAAC,GAAG,CAAC,IAC9BD,cAAc,CAACC,UAAU,CAAC,GAAG,CAAC,EAChC;IACE,OAAOD,cAAc,CAACE,SAAS,CAAC,CAAC,CAAC;EACrC;EAED,OAAOF,cAAc;AACzB;AAEA;;AAEG;AACG,SAAUG,uBAAuBA,CACnCH,cAAsB;;EAGtB,IAAI,CAACA,cAAc,IAAIA,cAAc,CAACI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACpD,OAAO,IAAI;EACd;EACD,IAAI;;IAEA,MAAMC,kBAAkB,GAAGN,uBAAuB,CAACC,cAAc,CAAC;;IAElE,MAAMM,gBAAgB,GAClBC,MAAM,CAACC,WAAW,CAAC,IAAIC,eAAe,CAACJ,kBAAkB,CAAC,CAAC;;IAG/D,IACIC,gBAAgB,CAACI,IAAI,IACrBJ,gBAAgB,CAACK,KAAK,IACtBL,gBAAgB,CAACM,iBAAiB,IAClCN,gBAAgB,CAACO,KAAK,EACxB;MACE,OAAOP,gBAAgB;IAC1B;EACJ,EAAC,OAAOQ,CAAC,EAAE;IACR,MAAMC,qBAAqB,CAACC,mBAAwC,CAAC;EACxE;EAED,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}