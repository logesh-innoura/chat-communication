{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    try {\n      const result = callback(...args);\n      inProgressEvent?.end({\n        success: true\n      });\n      logger.trace(`Returning result from ${eventName}`);\n      return result;\n    } catch (e) {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      });\n      throw e;\n    }\n  };\n};\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    telemetryClient?.setPreQueueTime(eventName, correlationId);\n    return callback(...args).then(response => {\n      logger.trace(`Returning result from ${eventName}`);\n      inProgressEvent?.end({\n        success: true\n      });\n      return response;\n    }).catch(e => {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      });\n      throw e;\n    });\n  };\n};\nexport { invoke, invokeAsync };","map":{"version":3,"names":["invoke","callback","eventName","logger","telemetryClient","correlationId","args","trace","inProgressEvent","startMeasurement","result","end","success","e","JSON","stringify","invokeAsync","setPreQueueTime","then","response","catch"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\utils\\FunctionWrappers.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\n\r\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const invoke = <T extends Array<any>, U>(\r\n    callback: (...args: T) => U,\r\n    eventName: string,\r\n    logger: Logger,\r\n    telemetryClient?: IPerformanceClient,\r\n    correlationId?: string\r\n) => {\r\n    return (...args: T): U => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(\r\n            eventName,\r\n            correlationId\r\n        );\r\n        try {\r\n            const result = callback(...args);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            return result;\r\n        } catch (e) {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            } catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            });\r\n            throw e;\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const invokeAsync = <T extends Array<any>, U>(\r\n    callback: (...args: T) => Promise<U>,\r\n    eventName: string,\r\n    logger: Logger,\r\n    telemetryClient?: IPerformanceClient,\r\n    correlationId?: string\r\n) => {\r\n    return (...args: T): Promise<U> => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(\r\n            eventName,\r\n            correlationId\r\n        );\r\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\r\n        return callback(...args)\r\n            .then((response) => {\r\n                logger.trace(`Returning result from ${eventName}`);\r\n                inProgressEvent?.end({\r\n                    success: true,\r\n                });\r\n                return response;\r\n            })\r\n            .catch((e) => {\r\n                logger.trace(`Error occurred in ${eventName}`);\r\n                try {\r\n                    logger.trace(JSON.stringify(e));\r\n                } catch (e) {\r\n                    logger.trace(\"Unable to print error message.\");\r\n                }\r\n                inProgressEvent?.end({\r\n                    success: false,\r\n                });\r\n                throw e;\r\n            });\r\n    };\r\n};\r\n"],"mappings":";;;AAAA;;;AAGG;AAKH;;;;;;;;;;AAUG;AACH;AACO,MAAMA,MAAM,GAAGA,CAClBC,QAA2B,EAC3BC,SAAiB,EACjBC,MAAc,EACdC,eAAoC,EACpCC,aAAsB,KACtB;EACA,OAAO,CAAC,GAAGC,IAAO,KAAO;IACrBH,MAAM,CAACI,KAAK,CAAC,sBAAsBL,SAAS,EAAE,CAAC;IAC/C,MAAMM,eAAe,GAAGJ,eAAe,EAAEK,gBAAgB,CACrDP,SAAS,EACTG,aAAa,CAChB;IACD,IAAI;MACA,MAAMK,MAAM,GAAGT,QAAQ,CAAC,GAAGK,IAAI,CAAC;MAChCE,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACFT,MAAM,CAACI,KAAK,CAAC,yBAAyBL,SAAS,EAAE,CAAC;MAClD,OAAOQ,MAAM;IAChB,EAAC,OAAOG,CAAC,EAAE;MACRV,MAAM,CAACI,KAAK,CAAC,qBAAqBL,SAAS,EAAE,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACI,KAAK,CAACO,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MAClC,EAAC,OAAOA,CAAC,EAAE;QACRV,MAAM,CAACI,KAAK,CAAC,gCAAgC,CAAC;MACjD;MACDC,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACF,MAAMC,CAAC;IACV;EACL,CAAC;AACL;AAEA;;;;;;;;;;;AAWG;AACH;AACO,MAAMG,WAAW,GAAGA,CACvBf,QAAoC,EACpCC,SAAiB,EACjBC,MAAc,EACdC,eAAoC,EACpCC,aAAsB,KACtB;EACA,OAAO,CAAC,GAAGC,IAAO,KAAgB;IAC9BH,MAAM,CAACI,KAAK,CAAC,sBAAsBL,SAAS,EAAE,CAAC;IAC/C,MAAMM,eAAe,GAAGJ,eAAe,EAAEK,gBAAgB,CACrDP,SAAS,EACTG,aAAa,CAChB;IACDD,eAAe,EAAEa,eAAe,CAACf,SAAS,EAAEG,aAAa,CAAC;IAC1D,OAAOJ,QAAQ,CAAC,GAAGK,IAAI,CAAC,CACnBY,IAAI,CAAEC,QAAQ,IAAI;MACfhB,MAAM,CAACI,KAAK,CAAC,yBAAyBL,SAAS,EAAE,CAAC;MAClDM,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACF,OAAOO,QAAQ;IACnB,CAAC,CAAC,CACDC,KAAK,CAAEP,CAAC,IAAI;MACTV,MAAM,CAACI,KAAK,CAAC,qBAAqBL,SAAS,EAAE,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACI,KAAK,CAACO,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MAClC,EAAC,OAAOA,CAAC,EAAE;QACRV,MAAM,CAACI,KAAK,CAAC,gCAAgC,CAAC;MACjD;MACDC,eAAe,EAAEG,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACF,MAAMC,CAAC;IACX,CAAC,CAAC;EACV,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}