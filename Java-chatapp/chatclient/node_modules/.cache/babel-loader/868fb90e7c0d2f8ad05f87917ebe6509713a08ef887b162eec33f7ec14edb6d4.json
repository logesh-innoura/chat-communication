{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { invalidAuthenticationHeader, missingNonceAuthenticationHeader } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\nclass AuthenticationHeaderParser {\n  constructor(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n  getShrNonce() {\n    // Attempt to parse nonce from Authentiacation-Info\n    const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      const authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw createClientConfigurationError(invalidAuthenticationHeader);\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      const wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw createClientConfigurationError(invalidAuthenticationHeader);\n    }\n    // If neither header is present, throw missing headers error\n    throw createClientConfigurationError(missingNonceAuthenticationHeader);\n  }\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n  parseChallenges(header) {\n    const schemeSeparator = header.indexOf(\" \");\n    const challenges = header.substr(schemeSeparator + 1).split(\",\");\n    const challengeMap = {};\n    challenges.forEach(challenge => {\n      const [key, value] = challenge.split(\"=\");\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  }\n}\nexport { AuthenticationHeaderParser };","map":{"version":3,"names":["AuthenticationHeaderParser","constructor","headers","getShrNonce","authenticationInfo","HeaderNames","AuthenticationInfo","authenticationInfoChallenges","parseChallenges","nextnonce","createClientConfigurationError","invalidAuthenticationHeader","wwwAuthenticate","WWWAuthenticate","wwwAuthenticateChallenges","nonce","missingNonceAuthenticationHeader","header","schemeSeparator","indexOf","challenges","substr","split","challengeMap","forEach","challenge","key","value","unescape","replace","Constants","EMPTY_STRING"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\request\\AuthenticationHeaderParser.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    createClientConfigurationError,\r\n    ClientConfigurationErrorCodes,\r\n} from \"../error/ClientConfigurationError\";\r\nimport { Constants, HeaderNames } from \"../utils/Constants\";\r\n\r\ntype WWWAuthenticateChallenges = {\r\n    nonce?: string;\r\n};\r\n\r\ntype AuthenticationInfoChallenges = {\r\n    nextnonce?: string;\r\n};\r\n\r\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\r\nexport class AuthenticationHeaderParser {\r\n    private headers: Record<string, string>;\r\n\r\n    constructor(headers: Record<string, string>) {\r\n        this.headers = headers;\r\n    }\r\n\r\n    /**\r\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n     * @returns\r\n     */\r\n    getShrNonce(): string {\r\n        // Attempt to parse nonce from Authentiacation-Info\r\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\r\n        if (authenticationInfo) {\r\n            const authenticationInfoChallenges =\r\n                this.parseChallenges<AuthenticationInfoChallenges>(\r\n                    authenticationInfo\r\n                );\r\n            if (authenticationInfoChallenges.nextnonce) {\r\n                return authenticationInfoChallenges.nextnonce;\r\n            }\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\r\n            );\r\n        }\r\n\r\n        // Attempt to parse nonce from WWW-Authenticate\r\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\r\n        if (wwwAuthenticate) {\r\n            const wwwAuthenticateChallenges =\r\n                this.parseChallenges<WWWAuthenticateChallenges>(\r\n                    wwwAuthenticate\r\n                );\r\n            if (wwwAuthenticateChallenges.nonce) {\r\n                return wwwAuthenticateChallenges.nonce;\r\n            }\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\r\n            );\r\n        }\r\n\r\n        // If neither header is present, throw missing headers error\r\n        throw createClientConfigurationError(\r\n            ClientConfigurationErrorCodes.missingNonceAuthenticationHeader\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Parses an HTTP header's challenge set into a key/value map.\r\n     * @param header\r\n     * @returns\r\n     */\r\n    private parseChallenges<T>(header: string): T {\r\n        const schemeSeparator = header.indexOf(\" \");\r\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\r\n        const challengeMap = {} as T;\r\n\r\n        challenges.forEach((challenge: string) => {\r\n            const [key, value] = challenge.split(\"=\");\r\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\r\n            challengeMap[key] = unescape(\r\n                value.replace(/['\"]+/g, Constants.EMPTY_STRING)\r\n            );\r\n        });\r\n\r\n        return challengeMap;\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAgBH;;;AAGG;MACUA,0BAA0B;EAGnCC,YAAYC,OAA+B;IACvC,IAAI,CAACA,OAAO,GAAGA,OAAO;;EAG1B;;;AAGG;EACHC,WAAWA,CAAA;;IAEP,MAAMC,kBAAkB,GAAG,IAAI,CAACF,OAAO,CAACG,WAAW,CAACC,kBAAkB,CAAC;IACvE,IAAIF,kBAAkB,EAAE;MACpB,MAAMG,4BAA4B,GAC9B,IAAI,CAACC,eAAe,CAChBJ,kBAAkB,CACrB;MACL,IAAIG,4BAA4B,CAACE,SAAS,EAAE;QACxC,OAAOF,4BAA4B,CAACE,SAAS;MAChD;MACD,MAAMC,8BAA8B,CAChCC,2BAAyD,CAC5D;IACJ;;IAGD,MAAMC,eAAe,GAAG,IAAI,CAACV,OAAO,CAACG,WAAW,CAACQ,eAAe,CAAC;IACjE,IAAID,eAAe,EAAE;MACjB,MAAME,yBAAyB,GAC3B,IAAI,CAACN,eAAe,CAChBI,eAAe,CAClB;MACL,IAAIE,yBAAyB,CAACC,KAAK,EAAE;QACjC,OAAOD,yBAAyB,CAACC,KAAK;MACzC;MACD,MAAML,8BAA8B,CAChCC,2BAAyD,CAC5D;IACJ;;IAGD,MAAMD,8BAA8B,CAChCM,gCAA8D,CACjE;;EAGL;;;;AAIG;EACKR,eAAeA,CAAIS,MAAc;IACrC,MAAMC,eAAe,GAAGD,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC;IAC3C,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAACH,eAAe,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IAChE,MAAMC,YAAY,GAAG,EAAO;IAE5BH,UAAU,CAACI,OAAO,CAAEC,SAAiB,IAAI;MACrC,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,SAAS,CAACH,KAAK,CAAC,GAAG,CAAC;;MAEzCC,YAAY,CAACG,GAAG,CAAC,GAAGE,QAAQ,CACxBD,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAEC,SAAS,CAACC,YAAY,CAAC,CAClD;IACL,CAAC,CAAC;IAEF,OAAOR,YAAY;;AAE1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}