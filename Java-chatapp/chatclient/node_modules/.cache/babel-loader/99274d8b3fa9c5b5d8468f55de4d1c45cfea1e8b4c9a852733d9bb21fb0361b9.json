{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { Authority, formatAuthorityUri } from './Authority.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { endpointResolutionError } from '../error/ClientAuthErrorCodes.mjs';\nimport { urlEmptyError } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/** @internal */\nclass AuthorityFactory {\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Also performs endpoint discovery.\r\n   *\r\n   * @param authorityUri\r\n   * @param networkClient\r\n   * @param protocolMode\r\n   */\n  static async createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n    const authorityUriFinal = Authority.transformCIAMAuthority(formatAuthorityUri(authorityUri));\n    // Initialize authority and perform discovery endpoint check.\n    const acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n    try {\n      await invokeAsync(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\n      return acquireTokenAuthority;\n    } catch (e) {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Does not perform endpoint discovery.\r\n   *\r\n   * @param authorityUrl\r\n   * @param networkInterface\r\n   * @param protocolMode\r\n   */\n  static createInstance(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    // Throw error if authority url is empty\n    if (!authorityUrl) {\n      throw createClientConfigurationError(urlEmptyError);\n    }\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n  }\n}\nexport { AuthorityFactory };","map":{"version":3,"names":["AuthorityFactory","createDiscoveredInstance","authorityUri","networkClient","cacheManager","authorityOptions","logger","performanceClient","correlationId","addQueueMeasurement","PerformanceEvents","AuthorityFactoryCreateDiscoveredInstance","authorityUriFinal","Authority","transformCIAMAuthority","formatAuthorityUri","acquireTokenAuthority","createInstance","invokeAsync","resolveEndpointsAsync","bind","AuthorityResolveEndpointsAsync","e","createClientAuthError","endpointResolutionError","authorityUrl","networkInterface","createClientConfigurationError","urlEmptyError"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\authority\\AuthorityFactory.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Authority, formatAuthorityUri } from \"./Authority\";\r\nimport {\r\n    createClientConfigurationError,\r\n    ClientConfigurationErrorCodes,\r\n} from \"../error/ClientConfigurationError\";\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport {\r\n    createClientAuthError,\r\n    ClientAuthErrorCodes,\r\n} from \"../error/ClientAuthError\";\r\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\r\nimport { AuthorityOptions } from \"./AuthorityOptions\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\r\n\r\n/** @internal */\r\nexport class AuthorityFactory {\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Also performs endpoint discovery.\r\n     *\r\n     * @param authorityUri\r\n     * @param networkClient\r\n     * @param protocolMode\r\n     */\r\n    static async createDiscoveredInstance(\r\n        authorityUri: string,\r\n        networkClient: INetworkModule,\r\n        cacheManager: ICacheManager,\r\n        authorityOptions: AuthorityOptions,\r\n        logger: Logger,\r\n        performanceClient?: IPerformanceClient,\r\n        correlationId?: string\r\n    ): Promise<Authority> {\r\n        performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\r\n            correlationId\r\n        );\r\n        const authorityUriFinal = Authority.transformCIAMAuthority(\r\n            formatAuthorityUri(authorityUri)\r\n        );\r\n\r\n        // Initialize authority and perform discovery endpoint check.\r\n        const acquireTokenAuthority: Authority =\r\n            AuthorityFactory.createInstance(\r\n                authorityUriFinal,\r\n                networkClient,\r\n                cacheManager,\r\n                authorityOptions,\r\n                logger,\r\n                performanceClient,\r\n                correlationId\r\n            );\r\n\r\n        try {\r\n            await invokeAsync(\r\n                acquireTokenAuthority.resolveEndpointsAsync.bind(\r\n                    acquireTokenAuthority\r\n                ),\r\n                PerformanceEvents.AuthorityResolveEndpointsAsync,\r\n                logger,\r\n                performanceClient,\r\n                correlationId\r\n            )();\r\n            return acquireTokenAuthority;\r\n        } catch (e) {\r\n            throw createClientAuthError(\r\n                ClientAuthErrorCodes.endpointResolutionError\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Does not perform endpoint discovery.\r\n     *\r\n     * @param authorityUrl\r\n     * @param networkInterface\r\n     * @param protocolMode\r\n     */\r\n    static createInstance(\r\n        authorityUrl: string,\r\n        networkInterface: INetworkModule,\r\n        cacheManager: ICacheManager,\r\n        authorityOptions: AuthorityOptions,\r\n        logger: Logger,\r\n        performanceClient?: IPerformanceClient,\r\n        correlationId?: string\r\n    ): Authority {\r\n        // Throw error if authority url is empty\r\n        if (!authorityUrl) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.urlEmptyError\r\n            );\r\n        }\r\n\r\n        return new Authority(\r\n            authorityUrl,\r\n            networkInterface,\r\n            cacheManager,\r\n            authorityOptions,\r\n            logger,\r\n            performanceClient,\r\n            correlationId\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;AAAA;;;AAGG;AAmBH;MACaA,gBAAgB;EACzB;;;;;;;;;AASG;EACH,aAAaC,wBAAwBA,CACjCC,YAAoB,EACpBC,aAA6B,EAC7BC,YAA2B,EAC3BC,gBAAkC,EAClCC,MAAc,EACdC,iBAAsC,EACtCC,aAAsB;IAEtBD,iBAAiB,EAAEE,mBAAmB,CAClCC,iBAAiB,CAACC,wCAAwC,EAC1DH,aAAa,CAChB;IACD,MAAMI,iBAAiB,GAAGC,SAAS,CAACC,sBAAsB,CACtDC,kBAAkB,CAACb,YAAY,CAAC,CACnC;;IAGD,MAAMc,qBAAqB,GACvBhB,gBAAgB,CAACiB,cAAc,CAC3BL,iBAAiB,EACjBT,aAAa,EACbC,YAAY,EACZC,gBAAgB,EAChBC,MAAM,EACNC,iBAAiB,EACjBC,aAAa,CAChB;IAEL,IAAI;MACA,MAAMU,WAAW,CACbF,qBAAqB,CAACG,qBAAqB,CAACC,IAAI,CAC5CJ,qBAAqB,CACxB,EACDN,iBAAiB,CAACW,8BAA8B,EAChDf,MAAM,EACNC,iBAAiB,EACjBC,aAAa,CAChB,EAAE;MACH,OAAOQ,qBAAqB;IAC/B,EAAC,OAAOM,CAAC,EAAE;MACR,MAAMC,qBAAqB,CACvBC,uBAA4C,CAC/C;IACJ;;EAGL;;;;;;;;;AASG;EACH,OAAOP,cAAcA,CACjBQ,YAAoB,EACpBC,gBAAgC,EAChCtB,YAA2B,EAC3BC,gBAAkC,EAClCC,MAAc,EACdC,iBAAsC,EACtCC,aAAsB;;IAGtB,IAAI,CAACiB,YAAY,EAAE;MACf,MAAME,8BAA8B,CAChCC,aAA2C,CAC9C;IACJ;IAED,OAAO,IAAIf,SAAS,CAChBY,YAAY,EACZC,gBAAgB,EAChBtB,YAAY,EACZC,gBAAgB,EAChBC,MAAM,EACNC,iBAAiB,EACjBC,aAAa,CAChB;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}