{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */\nfunction tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\n  return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(\".\")[1];\n}\nfunction buildTenantProfileFromIdTokenClaims(homeAccountId, idTokenClaims) {\n  const {\n    oid,\n    sub,\n    tid,\n    name,\n    tfp,\n    acr\n  } = idTokenClaims;\n  /**\r\n   * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n   * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n   * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n   * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n   */\n  const tenantId = tid || tfp || acr || \"\";\n  return {\n    tenantId: tenantId,\n    localAccountId: oid || sub || \"\",\n    name: name,\n    isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n  };\n}\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */\nfunction updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims) {\n  let updatedAccountInfo = baseAccountInfo;\n  // Tenant Profile overrides passed in account info\n  if (tenantProfile) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...tenantProfileOverride\n    } = tenantProfile;\n    updatedAccountInfo = {\n      ...baseAccountInfo,\n      ...tenantProfileOverride\n    };\n  }\n  // ID token claims override passed in account info and tenant profile\n  if (idTokenClaims) {\n    // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...claimsSourcedTenantProfile\n    } = buildTenantProfileFromIdTokenClaims(baseAccountInfo.homeAccountId, idTokenClaims);\n    updatedAccountInfo = {\n      ...updatedAccountInfo,\n      ...claimsSourcedTenantProfile,\n      idTokenClaims: idTokenClaims\n    };\n    return updatedAccountInfo;\n  }\n  return updatedAccountInfo;\n}\nexport { buildTenantProfileFromIdTokenClaims, tenantIdMatchesHomeTenant, updateAccountTenantProfileData };","map":{"version":3,"names":["tenantIdMatchesHomeTenant","tenantId","homeAccountId","split","buildTenantProfileFromIdTokenClaims","idTokenClaims","oid","sub","tid","name","tfp","acr","localAccountId","isHomeTenant","updateAccountTenantProfileData","baseAccountInfo","tenantProfile","updatedAccountInfo","tenantProfileOverride","claimsSourcedTenantProfile"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\account\\AccountInfo.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { TokenClaims } from \"./TokenClaims\";\r\n/**\r\n * Account object with the following signature:\r\n * - homeAccountId          - Home account identifier for this account object\r\n * - environment            - Entity which issued the token represented by the domain of the issuer (e.g. login.microsoftonline.com)\r\n * - tenantId               - Full tenant or organizational id that this account belongs to\r\n * - username               - preferred_username claim of the id_token that represents this account\r\n * - localAccountId         - Local, tenant-specific account identifer for this account object, usually used in legacy cases\r\n * - name                   - Full name for the account, including given name and family name\r\n * - idToken                - raw ID token\r\n * - idTokenClaims          - Object contains claims from ID token\r\n * - nativeAccountId        - The user's native account ID\r\n * - tenantProfiles         - Map of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n */\r\nexport type AccountInfo = {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    tenantId: string;\r\n    username: string;\r\n    localAccountId: string;\r\n    name?: string;\r\n    idToken?: string;\r\n    idTokenClaims?: TokenClaims & {\r\n        [key: string]:\r\n            | string\r\n            | number\r\n            | string[]\r\n            | object\r\n            | undefined\r\n            | unknown;\r\n    };\r\n    nativeAccountId?: string;\r\n    authorityType?: string;\r\n    tenantProfiles?: Map<string, TenantProfile>;\r\n};\r\n\r\n/**\r\n * Account details that vary across tenants for the same user\r\n */\r\nexport type TenantProfile = Pick<\r\n    AccountInfo,\r\n    \"tenantId\" | \"localAccountId\" | \"name\"\r\n> & {\r\n    /**\r\n     * - isHomeTenant           - True if this is the home tenant profile of the account, false if it's a guest tenant profile\r\n     */\r\n    isHomeTenant?: boolean;\r\n};\r\n\r\nexport type ActiveAccountFilters = {\r\n    homeAccountId: string;\r\n    localAccountId: string;\r\n    tenantId?: string;\r\n};\r\n\r\n/**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */\r\nexport function tenantIdMatchesHomeTenant(\r\n    tenantId?: string,\r\n    homeAccountId?: string\r\n): boolean {\r\n    return (\r\n        !!tenantId &&\r\n        !!homeAccountId &&\r\n        tenantId === homeAccountId.split(\".\")[1]\r\n    );\r\n}\r\n\r\nexport function buildTenantProfileFromIdTokenClaims(\r\n    homeAccountId: string,\r\n    idTokenClaims: TokenClaims\r\n): TenantProfile {\r\n    const { oid, sub, tid, name, tfp, acr } = idTokenClaims;\r\n\r\n    /**\r\n     * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n     * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n     * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n     * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n     */\r\n    const tenantId = tid || tfp || acr || \"\";\r\n\r\n    return {\r\n        tenantId: tenantId,\r\n        localAccountId: oid || sub || \"\",\r\n        name: name,\r\n        isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\r\n    };\r\n}\r\n\r\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nexport function updateAccountTenantProfileData(\r\n    baseAccountInfo: AccountInfo,\r\n    tenantProfile?: TenantProfile,\r\n    idTokenClaims?: TokenClaims\r\n): AccountInfo {\r\n    let updatedAccountInfo = baseAccountInfo;\r\n    // Tenant Profile overrides passed in account info\r\n    if (tenantProfile) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\r\n        updatedAccountInfo = { ...baseAccountInfo, ...tenantProfileOverride };\r\n    }\r\n\r\n    // ID token claims override passed in account info and tenant profile\r\n    if (idTokenClaims) {\r\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...claimsSourcedTenantProfile } =\r\n            buildTenantProfileFromIdTokenClaims(\r\n                baseAccountInfo.homeAccountId,\r\n                idTokenClaims\r\n            );\r\n\r\n        updatedAccountInfo = {\r\n            ...updatedAccountInfo,\r\n            ...claimsSourcedTenantProfile,\r\n            idTokenClaims: idTokenClaims,\r\n        };\r\n\r\n        return updatedAccountInfo;\r\n    }\r\n\r\n    return updatedAccountInfo;\r\n}\r\n"],"mappings":";;;AAAA;;;AAGG;AAyDH;;;;;AAKG;AACa,SAAAA,yBAAyBA,CACrCC,QAAiB,EACjBC,aAAsB;EAEtB,OACI,CAAC,CAACD,QAAQ,IACV,CAAC,CAACC,aAAa,IACfD,QAAQ,KAAKC,aAAa,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAEhD;AAEgB,SAAAC,mCAAmCA,CAC/CF,aAAqB,EACrBG,aAA0B;EAE1B,MAAM;IAAEC,GAAG;IAAEC,GAAG;IAAEC,GAAG;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EAAG,CAAE,GAAGN,aAAa;EAEvD;;;;;AAKG;EACH,MAAMJ,QAAQ,GAAGO,GAAG,IAAIE,GAAG,IAAIC,GAAG,IAAI,EAAE;EAExC,OAAO;IACHV,QAAQ,EAAEA,QAAQ;IAClBW,cAAc,EAAEN,GAAG,IAAIC,GAAG,IAAI,EAAE;IAChCE,IAAI,EAAEA,IAAI;IACVI,YAAY,EAAEb,yBAAyB,CAACC,QAAQ,EAAEC,aAAa;GAClE;AACL;AAEA;;;;;AAKG;SACaY,8BAA8BA,CAC1CC,eAA4B,EAC5BC,aAA6B,EAC7BX,aAA2B;EAE3B,IAAIY,kBAAkB,GAAGF,eAAe;;EAExC,IAAIC,aAAa,EAAE;;IAEf,MAAM;MAAEH,YAAY;MAAE,GAAGK;IAAqB,CAAE,GAAGF,aAAa;IAChEC,kBAAkB,GAAG;MAAE,GAAGF,eAAe;MAAE,GAAGG;IAAqB,CAAE;EACxE;;EAGD,IAAIb,aAAa,EAAE;;;IAGf,MAAM;MAAEQ,YAAY;MAAE,GAAGM;IAA0B,CAAE,GACjDf,mCAAmC,CAC/BW,eAAe,CAACb,aAAa,EAC7BG,aAAa,CAChB;IAELY,kBAAkB,GAAG;MACjB,GAAGA,kBAAkB;MACrB,GAAGE,0BAA0B;MAC7Bd,aAAa,EAAEA;KAClB;IAED,OAAOY,kBAAkB;EAC5B;EAED,OAAOA,kBAAkB;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}