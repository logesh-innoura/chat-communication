{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst Constants = {\n  LIBRARY_NAME: \"MSAL.JS\",\n  SKU: \"msal.js.common\",\n  // Prefix for all library cache entries\n  CACHE_PREFIX: \"msal\",\n  // default authority\n  DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n  DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n  DEFAULT_COMMON_TENANT: \"common\",\n  // ADFS String\n  ADFS: \"adfs\",\n  DSTS: \"dstsv2\",\n  // Default AAD Instance Discovery Endpoint\n  AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n  // CIAM URL\n  CIAM_AUTH_URL: \".ciamlogin.com\",\n  AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n  // Resource delimiter - used for certain cache entries\n  RESOURCE_DELIM: \"|\",\n  // Placeholder for non-existent account ids/objects\n  NO_ACCOUNT: \"NO_ACCOUNT\",\n  // Claims\n  CLAIMS: \"claims\",\n  // Consumer UTID\n  CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n  // Default scopes\n  OPENID_SCOPE: \"openid\",\n  PROFILE_SCOPE: \"profile\",\n  OFFLINE_ACCESS_SCOPE: \"offline_access\",\n  EMAIL_SCOPE: \"email\",\n  // Default response type for authorization code flow\n  CODE_RESPONSE_TYPE: \"code\",\n  CODE_GRANT_TYPE: \"authorization_code\",\n  RT_GRANT_TYPE: \"refresh_token\",\n  FRAGMENT_RESPONSE_MODE: \"fragment\",\n  S256_CODE_CHALLENGE_METHOD: \"S256\",\n  URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n  AUTHORIZATION_PENDING: \"authorization_pending\",\n  NOT_DEFINED: \"not_defined\",\n  EMPTY_STRING: \"\",\n  NOT_APPLICABLE: \"N/A\",\n  FORWARD_SLASH: \"/\",\n  IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n  IMDS_VERSION: \"2020-06-01\",\n  IMDS_TIMEOUT: 2000,\n  AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n  REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n  KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"],\n  TOKEN_RESPONSE_TYPE: \"token\",\n  ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n  SHR_NONCE_VALIDITY: 240,\n  INVALID_INSTANCE: \"invalid_instance\"\n};\nconst HttpStatus = {\n  SUCCESS_RANGE_START: 200,\n  SUCCESS_RANGE_END: 299,\n  REDIRECT: 302,\n  CLIENT_ERROR_RANGE_START: 400,\n  CLIENT_ERROR_RANGE_END: 499,\n  SERVER_ERROR_RANGE_START: 500,\n  SERVER_ERROR_RANGE_END: 599\n};\nconst OIDC_DEFAULT_SCOPES = [Constants.OPENID_SCOPE, Constants.PROFILE_SCOPE, Constants.OFFLINE_ACCESS_SCOPE];\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\n/**\r\n * Request header names\r\n */\nconst HeaderNames = {\n  CONTENT_TYPE: \"Content-Type\",\n  RETRY_AFTER: \"Retry-After\",\n  CCS_HEADER: \"X-AnchorMailbox\",\n  WWWAuthenticate: \"WWW-Authenticate\",\n  AuthenticationInfo: \"Authentication-Info\",\n  X_MS_REQUEST_ID: \"x-ms-request-id\",\n  X_MS_HTTP_VERSION: \"x-ms-httpver\"\n};\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\nconst PersistentCacheKeys = {\n  ID_TOKEN: \"idtoken\",\n  CLIENT_INFO: \"client.info\",\n  ADAL_ID_TOKEN: \"adal.idtoken\",\n  ERROR: \"error\",\n  ERROR_DESC: \"error.description\",\n  ACTIVE_ACCOUNT: \"active-account\",\n  ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\" // new cache entry for active_account for a more robust version for browser\n};\n/**\r\n * String constants related to AAD Authority\r\n */\nconst AADAuthorityConstants = {\n  COMMON: \"common\",\n  ORGANIZATIONS: \"organizations\",\n  CONSUMERS: \"consumers\"\n};\n/**\r\n * Claims request keys\r\n */\nconst ClaimsRequestKeys = {\n  ACCESS_TOKEN: \"access_token\",\n  XMS_CC: \"xms_cc\"\n};\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\nconst PromptValue = {\n  LOGIN: \"login\",\n  SELECT_ACCOUNT: \"select_account\",\n  CONSENT: \"consent\",\n  NONE: \"none\",\n  CREATE: \"create\",\n  NO_SESSION: \"no_session\"\n};\n/**\r\n * allowed values for codeVerifier\r\n */\nconst CodeChallengeMethodValues = {\n  PLAIN: \"plain\",\n  S256: \"S256\"\n};\n/**\r\n * allowed values for server response type\r\n */\nconst ServerResponseType = {\n  QUERY: \"query\",\n  FRAGMENT: \"fragment\"\n};\n/**\r\n * allowed values for response_mode\r\n */\nconst ResponseMode = {\n  ...ServerResponseType,\n  FORM_POST: \"form_post\"\n};\n/**\r\n * allowed grant_type\r\n */\nconst GrantType = {\n  IMPLICIT_GRANT: \"implicit\",\n  AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n  CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n  RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n  REFRESH_TOKEN_GRANT: \"refresh_token\",\n  DEVICE_CODE_GRANT: \"device_code\",\n  JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n};\n/**\r\n * Account types in Cache\r\n */\nconst CacheAccountType = {\n  MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n  ADFS_ACCOUNT_TYPE: \"ADFS\",\n  MSAV1_ACCOUNT_TYPE: \"MSA\",\n  GENERIC_ACCOUNT_TYPE: \"Generic\" // NTLM, Kerberos, FBA, Basic etc\n};\n/**\r\n * Separators used in cache\r\n */\nconst Separators = {\n  CACHE_KEY_SEPARATOR: \"-\",\n  CLIENT_INFO_SEPARATOR: \".\"\n};\n/**\r\n * Credential Type stored in the cache\r\n */\nconst CredentialType = {\n  ID_TOKEN: \"IdToken\",\n  ACCESS_TOKEN: \"AccessToken\",\n  ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n  REFRESH_TOKEN: \"RefreshToken\"\n};\n/**\r\n * Combine all cache types\r\n */\nconst CacheType = {\n  ADFS: 1001,\n  MSA: 1002,\n  MSSTS: 1003,\n  GENERIC: 1004,\n  ACCESS_TOKEN: 2001,\n  REFRESH_TOKEN: 2002,\n  ID_TOKEN: 2003,\n  APP_METADATA: 3001,\n  UNDEFINED: 9999\n};\n/**\r\n * More Cache related constants\r\n */\nconst APP_METADATA = \"appmetadata\";\nconst CLIENT_INFO = \"client_info\";\nconst THE_FAMILY_ID = \"1\";\nconst AUTHORITY_METADATA_CONSTANTS = {\n  CACHE_KEY: \"authority-metadata\",\n  REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n};\nconst AuthorityMetadataSource = {\n  CONFIG: \"config\",\n  CACHE: \"cache\",\n  NETWORK: \"network\",\n  HARDCODED_VALUES: \"hardcoded_values\"\n};\nconst SERVER_TELEM_CONSTANTS = {\n  SCHEMA_VERSION: 5,\n  MAX_CUR_HEADER_BYTES: 80,\n  MAX_LAST_HEADER_BYTES: 330,\n  MAX_CACHED_ERRORS: 50,\n  CACHE_KEY: \"server-telemetry\",\n  CATEGORY_SEPARATOR: \"|\",\n  VALUE_SEPARATOR: \",\",\n  OVERFLOW_TRUE: \"1\",\n  OVERFLOW_FALSE: \"0\",\n  UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */\nconst AuthenticationScheme = {\n  BEARER: \"Bearer\",\n  POP: \"pop\",\n  SSH: \"ssh-cert\"\n};\n/**\r\n * Constants related to throttling\r\n */\nconst ThrottlingConstants = {\n  // Default time to throttle RequestThumbprint in seconds\n  DEFAULT_THROTTLE_TIME_SECONDS: 60,\n  // Default maximum time to throttle in seconds, overrides what the server sends back\n  DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n  // Prefix for storing throttling entries\n  THROTTLING_PREFIX: \"throttling\",\n  // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n  X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nconst Errors = {\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */\nconst PasswordGrantConstants = {\n  username: \"username\",\n  password: \"password\"\n};\n/**\r\n * Response codes\r\n */\nconst ResponseCodes = {\n  httpSuccess: 200,\n  httpBadRequest: 400\n};\n/**\r\n * Region Discovery Sources\r\n */\nconst RegionDiscoverySources = {\n  FAILED_AUTO_DETECTION: \"1\",\n  INTERNAL_CACHE: \"2\",\n  ENVIRONMENT_VARIABLE: \"3\",\n  IMDS: \"4\"\n};\n/**\r\n * Region Discovery Outcomes\r\n */\nconst RegionDiscoveryOutcomes = {\n  CONFIGURED_MATCHES_DETECTED: \"1\",\n  CONFIGURED_NO_AUTO_DETECTION: \"2\",\n  CONFIGURED_NOT_DETECTED: \"3\",\n  AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n  AUTO_DETECTION_REQUESTED_FAILED: \"5\"\n};\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\nconst CacheOutcome = {\n  // When a token is found in the cache or the cache is not supposed to be hit when making the request\n  NOT_APPLICABLE: \"0\",\n  // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n  FORCE_REFRESH_OR_CLAIMS: \"1\",\n  // When the token request goes to the identity provider because no cached access token exists\n  NO_CACHED_ACCESS_TOKEN: \"2\",\n  // When the token request goes to the identity provider because cached access token expired\n  CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n  // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n  PROACTIVELY_REFRESHED: \"4\"\n};\nconst JsonWebTokenTypes = {\n  Jwt: \"JWT\",\n  Jwk: \"JWK\",\n  Pop: \"pop\"\n};\nconst ONE_DAY_IN_MS = 86400000;\nexport { AADAuthorityConstants, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, Errors, GrantType, HeaderNames, HttpStatus, JsonWebTokenTypes, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseCodes, ResponseMode, SERVER_TELEM_CONSTANTS, Separators, ServerResponseType, THE_FAMILY_ID, ThrottlingConstants };","map":{"version":3,"names":["Constants","LIBRARY_NAME","SKU","CACHE_PREFIX","DEFAULT_AUTHORITY","DEFAULT_AUTHORITY_HOST","DEFAULT_COMMON_TENANT","ADFS","DSTS","AAD_INSTANCE_DISCOVERY_ENDPT","CIAM_AUTH_URL","AAD_TENANT_DOMAIN_SUFFIX","RESOURCE_DELIM","NO_ACCOUNT","CLAIMS","CONSUMER_UTID","OPENID_SCOPE","PROFILE_SCOPE","OFFLINE_ACCESS_SCOPE","EMAIL_SCOPE","CODE_RESPONSE_TYPE","CODE_GRANT_TYPE","RT_GRANT_TYPE","FRAGMENT_RESPONSE_MODE","S256_CODE_CHALLENGE_METHOD","URL_FORM_CONTENT_TYPE","AUTHORIZATION_PENDING","NOT_DEFINED","EMPTY_STRING","NOT_APPLICABLE","FORWARD_SLASH","IMDS_ENDPOINT","IMDS_VERSION","IMDS_TIMEOUT","AZURE_REGION_AUTO_DISCOVER_FLAG","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","KNOWN_PUBLIC_CLOUDS","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","SHR_NONCE_VALIDITY","INVALID_INSTANCE","HttpStatus","SUCCESS_RANGE_START","SUCCESS_RANGE_END","REDIRECT","CLIENT_ERROR_RANGE_START","CLIENT_ERROR_RANGE_END","SERVER_ERROR_RANGE_START","SERVER_ERROR_RANGE_END","OIDC_DEFAULT_SCOPES","OIDC_SCOPES","HeaderNames","CONTENT_TYPE","RETRY_AFTER","CCS_HEADER","WWWAuthenticate","AuthenticationInfo","X_MS_REQUEST_ID","X_MS_HTTP_VERSION","PersistentCacheKeys","ID_TOKEN","CLIENT_INFO","ADAL_ID_TOKEN","ERROR","ERROR_DESC","ACTIVE_ACCOUNT","ACTIVE_ACCOUNT_FILTERS","AADAuthorityConstants","COMMON","ORGANIZATIONS","CONSUMERS","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","PromptValue","LOGIN","SELECT_ACCOUNT","CONSENT","NONE","CREATE","NO_SESSION","CodeChallengeMethodValues","PLAIN","S256","ServerResponseType","QUERY","FRAGMENT","ResponseMode","FORM_POST","GrantType","IMPLICIT_GRANT","AUTHORIZATION_CODE_GRANT","CLIENT_CREDENTIALS_GRANT","RESOURCE_OWNER_PASSWORD_GRANT","REFRESH_TOKEN_GRANT","DEVICE_CODE_GRANT","JWT_BEARER","CacheAccountType","MSSTS_ACCOUNT_TYPE","ADFS_ACCOUNT_TYPE","MSAV1_ACCOUNT_TYPE","GENERIC_ACCOUNT_TYPE","Separators","CACHE_KEY_SEPARATOR","CLIENT_INFO_SEPARATOR","CredentialType","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","CacheType","MSA","MSSTS","GENERIC","APP_METADATA","UNDEFINED","THE_FAMILY_ID","AUTHORITY_METADATA_CONSTANTS","CACHE_KEY","REFRESH_TIME_SECONDS","AuthorityMetadataSource","CONFIG","CACHE","NETWORK","HARDCODED_VALUES","SERVER_TELEM_CONSTANTS","SCHEMA_VERSION","MAX_CUR_HEADER_BYTES","MAX_LAST_HEADER_BYTES","MAX_CACHED_ERRORS","CATEGORY_SEPARATOR","VALUE_SEPARATOR","OVERFLOW_TRUE","OVERFLOW_FALSE","UNKNOWN_ERROR","AuthenticationScheme","BEARER","POP","SSH","ThrottlingConstants","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","THROTTLING_PREFIX","X_MS_LIB_CAPABILITY_VALUE","Errors","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","PasswordGrantConstants","username","password","ResponseCodes","httpSuccess","httpBadRequest","RegionDiscoverySources","FAILED_AUTO_DETECTION","INTERNAL_CACHE","ENVIRONMENT_VARIABLE","IMDS","RegionDiscoveryOutcomes","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NO_AUTO_DETECTION","CONFIGURED_NOT_DETECTED","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","CacheOutcome","FORCE_REFRESH_OR_CLAIMS","NO_CACHED_ACCESS_TOKEN","CACHED_ACCESS_TOKEN_EXPIRED","PROACTIVELY_REFRESHED","JsonWebTokenTypes","Jwt","Jwk","Pop","ONE_DAY_IN_MS"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\utils\\Constants.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport const Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // Prefix for all library cache entries\r\n    CACHE_PREFIX: \"msal\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    DEFAULT_COMMON_TENANT: \"common\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    DSTS: \"dstsv2\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT:\r\n        \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // CIAM URL\r\n    CIAM_AUTH_URL: \".ciamlogin.com\",\r\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    // Default response type for authorization code flow\r\n    CODE_RESPONSE_TYPE: \"code\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    NOT_APPLICABLE: \"N/A\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\r\n        \"login.microsoftonline.com\",\r\n        \"login.windows.net\",\r\n        \"login.microsoft.com\",\r\n        \"sts.windows.net\",\r\n    ],\r\n    TOKEN_RESPONSE_TYPE: \"token\",\r\n    ID_TOKEN_RESPONSE_TYPE: \"id_token\",\r\n    SHR_NONCE_VALIDITY: 240,\r\n    INVALID_INSTANCE: \"invalid_instance\",\r\n};\r\n\r\nexport const HttpStatus = {\r\n    SUCCESS_RANGE_START: 200,\r\n    SUCCESS_RANGE_END: 299,\r\n    REDIRECT: 302,\r\n    CLIENT_ERROR_RANGE_START: 400,\r\n    CLIENT_ERROR_RANGE_END: 499,\r\n    SERVER_ERROR_RANGE_START: 500,\r\n    SERVER_ERROR_RANGE_END: 599,\r\n} as const;\r\nexport type HttpStatus = (typeof HttpStatus)[keyof typeof HttpStatus];\r\n\r\nexport const OIDC_DEFAULT_SCOPES = [\r\n    Constants.OPENID_SCOPE,\r\n    Constants.PROFILE_SCOPE,\r\n    Constants.OFFLINE_ACCESS_SCOPE,\r\n];\r\n\r\nexport const OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\r\n\r\n/**\r\n * Request header names\r\n */\r\nexport const HeaderNames = {\r\n    CONTENT_TYPE: \"Content-Type\",\r\n    RETRY_AFTER: \"Retry-After\",\r\n    CCS_HEADER: \"X-AnchorMailbox\",\r\n    WWWAuthenticate: \"WWW-Authenticate\",\r\n    AuthenticationInfo: \"Authentication-Info\",\r\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\r\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\r\n} as const;\r\nexport type HeaderNames = (typeof HeaderNames)[keyof typeof HeaderNames];\r\n\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nexport const PersistentCacheKeys = {\r\n    ID_TOKEN: \"idtoken\",\r\n    CLIENT_INFO: \"client.info\",\r\n    ADAL_ID_TOKEN: \"adal.idtoken\",\r\n    ERROR: \"error\",\r\n    ERROR_DESC: \"error.description\",\r\n    ACTIVE_ACCOUNT: \"active-account\", // Legacy active-account cache key, use new key instead\r\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\", // new cache entry for active_account for a more robust version for browser\r\n} as const;\r\nexport type PersistentCacheKeys =\r\n    (typeof PersistentCacheKeys)[keyof typeof PersistentCacheKeys];\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport const AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\",\r\n} as const;\r\nexport type AADAuthorityConstants =\r\n    (typeof AADAuthorityConstants)[keyof typeof AADAuthorityConstants];\r\n\r\n/**\r\n * Claims request keys\r\n */\r\nexport const ClaimsRequestKeys = {\r\n    ACCESS_TOKEN: \"access_token\",\r\n    XMS_CC: \"xms_cc\",\r\n} as const;\r\nexport type ClaimsRequestKeys =\r\n    (typeof ClaimsRequestKeys)[keyof typeof ClaimsRequestKeys];\r\n\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nexport const PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\",\r\n    NO_SESSION: \"no_session\",\r\n};\r\n\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nexport const CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\",\r\n};\r\n\r\n/**\r\n * allowed values for server response type\r\n */\r\nexport const ServerResponseType = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n} as const;\r\nexport type ServerResponseType =\r\n    (typeof ServerResponseType)[keyof typeof ServerResponseType];\r\n\r\n/**\r\n * allowed values for response_mode\r\n */\r\nexport const ResponseMode = {\r\n    ...ServerResponseType,\r\n    FORM_POST: \"form_post\",\r\n} as const;\r\nexport type ResponseMode = (typeof ResponseMode)[keyof typeof ResponseMode];\r\n\r\n/**\r\n * allowed grant_type\r\n */\r\nexport const GrantType = {\r\n    IMPLICIT_GRANT: \"implicit\",\r\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\r\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\r\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\r\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\r\n    DEVICE_CODE_GRANT: \"device_code\",\r\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\r\n} as const;\r\nexport type GrantType = (typeof GrantType)[keyof typeof GrantType];\r\n\r\n/**\r\n * Account types in Cache\r\n */\r\nexport const CacheAccountType = {\r\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\r\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\r\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\r\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\r\n} as const;\r\nexport type CacheAccountType =\r\n    (typeof CacheAccountType)[keyof typeof CacheAccountType];\r\n\r\n/**\r\n * Separators used in cache\r\n */\r\nexport const Separators = {\r\n    CACHE_KEY_SEPARATOR: \"-\",\r\n    CLIENT_INFO_SEPARATOR: \".\",\r\n} as const;\r\nexport type Separators = (typeof Separators)[keyof typeof Separators];\r\n\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nexport const CredentialType = {\r\n    ID_TOKEN: \"IdToken\",\r\n    ACCESS_TOKEN: \"AccessToken\",\r\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\r\n    REFRESH_TOKEN: \"RefreshToken\",\r\n} as const;\r\nexport type CredentialType =\r\n    (typeof CredentialType)[keyof typeof CredentialType];\r\n\r\n/**\r\n * Combine all cache types\r\n */\r\nexport const CacheType = {\r\n    ADFS: 1001,\r\n    MSA: 1002,\r\n    MSSTS: 1003,\r\n    GENERIC: 1004,\r\n    ACCESS_TOKEN: 2001,\r\n    REFRESH_TOKEN: 2002,\r\n    ID_TOKEN: 2003,\r\n    APP_METADATA: 3001,\r\n    UNDEFINED: 9999,\r\n} as const;\r\nexport type CacheType = (typeof CacheType)[keyof typeof CacheType];\r\n\r\n/**\r\n * More Cache related constants\r\n */\r\nexport const APP_METADATA = \"appmetadata\";\r\nexport const CLIENT_INFO = \"client_info\";\r\nexport const THE_FAMILY_ID = \"1\";\r\n\r\nexport const AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\r\n};\r\n\r\nexport const AuthorityMetadataSource = {\r\n    CONFIG: \"config\",\r\n    CACHE: \"cache\",\r\n    NETWORK: \"network\",\r\n    HARDCODED_VALUES: \"hardcoded_values\",\r\n} as const;\r\nexport type AuthorityMetadataSource =\r\n    (typeof AuthorityMetadataSource)[keyof typeof AuthorityMetadataSource];\r\n\r\nexport const SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_CUR_HEADER_BYTES: 80, // ESTS limit is 100B, set to 80 to provide a 20B buffer\r\n    MAX_LAST_HEADER_BYTES: 330, // ESTS limit is 350B, set to 330 to provide a 20B buffer,\r\n    MAX_CACHED_ERRORS: 50, // Limit the number of errors that can be stored to prevent uncontrolled size gains\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\",\r\n};\r\n\r\n/**\r\n * Type of the authentication request\r\n */\r\nexport const AuthenticationScheme = {\r\n    BEARER: \"Bearer\",\r\n    POP: \"pop\",\r\n    SSH: \"ssh-cert\",\r\n} as const;\r\nexport type AuthenticationScheme =\r\n    (typeof AuthenticationScheme)[keyof typeof AuthenticationScheme];\r\n\r\n/**\r\n * Constants related to throttling\r\n */\r\nexport const ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\r\n};\r\n\r\nexport const Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n\r\n/**\r\n * Password grant parameters\r\n */\r\nexport const PasswordGrantConstants = {\r\n    username: \"username\",\r\n    password: \"password\",\r\n} as const;\r\nexport type PasswordGrantConstants =\r\n    (typeof PasswordGrantConstants)[keyof typeof PasswordGrantConstants];\r\n\r\n/**\r\n * Response codes\r\n */\r\nexport const ResponseCodes = {\r\n    httpSuccess: 200,\r\n    httpBadRequest: 400,\r\n} as const;\r\nexport type ResponseCodes = (typeof ResponseCodes)[keyof typeof ResponseCodes];\r\n\r\n/**\r\n * Region Discovery Sources\r\n */\r\nexport const RegionDiscoverySources = {\r\n    FAILED_AUTO_DETECTION: \"1\",\r\n    INTERNAL_CACHE: \"2\",\r\n    ENVIRONMENT_VARIABLE: \"3\",\r\n    IMDS: \"4\",\r\n} as const;\r\nexport type RegionDiscoverySources =\r\n    (typeof RegionDiscoverySources)[keyof typeof RegionDiscoverySources];\r\n\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nexport const RegionDiscoveryOutcomes = {\r\n    CONFIGURED_MATCHES_DETECTED: \"1\",\r\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\r\n    CONFIGURED_NOT_DETECTED: \"3\",\r\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\r\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\r\n} as const;\r\nexport type RegionDiscoveryOutcomes =\r\n    (typeof RegionDiscoveryOutcomes)[keyof typeof RegionDiscoveryOutcomes];\r\n\r\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\r\nexport const CacheOutcome = {\r\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\r\n    NOT_APPLICABLE: \"0\",\r\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\r\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\r\n    // When the token request goes to the identity provider because no cached access token exists\r\n    NO_CACHED_ACCESS_TOKEN: \"2\",\r\n    // When the token request goes to the identity provider because cached access token expired\r\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\r\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\r\n    PROACTIVELY_REFRESHED: \"4\",\r\n} as const;\r\nexport type CacheOutcome = (typeof CacheOutcome)[keyof typeof CacheOutcome];\r\n\r\nexport const JsonWebTokenTypes = {\r\n    Jwt: \"JWT\",\r\n    Jwk: \"JWK\",\r\n    Pop: \"pop\",\r\n} as const;\r\nexport type JsonWebTokenTypes =\r\n    (typeof JsonWebTokenTypes)[keyof typeof JsonWebTokenTypes];\r\n\r\nexport const ONE_DAY_IN_MS = 86400000;\r\n"],"mappings":";;;AAAA;;;AAGG;AAEU,MAAAA,SAAS,GAAG;EACrBC,YAAY,EAAE,SAAS;EACvBC,GAAG,EAAE,gBAAgB;;EAErBC,YAAY,EAAE,MAAM;;EAEpBC,iBAAiB,EAAE,2CAA2C;EAC9DC,sBAAsB,EAAE,2BAA2B;EACnDC,qBAAqB,EAAE,QAAQ;;EAE/BC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,QAAQ;;EAEdC,4BAA4B,EACxB,qGAAqG;;EAEzGC,aAAa,EAAE,gBAAgB;EAC/BC,wBAAwB,EAAE,kBAAkB;;EAE5CC,cAAc,EAAE,GAAG;;EAEnBC,UAAU,EAAE,YAAY;;EAExBC,MAAM,EAAE,QAAQ;;EAEhBC,aAAa,EAAE,sCAAsC;;EAErDC,YAAY,EAAE,QAAQ;EACtBC,aAAa,EAAE,SAAS;EACxBC,oBAAoB,EAAE,gBAAgB;EACtCC,WAAW,EAAE,OAAO;;EAEpBC,kBAAkB,EAAE,MAAM;EAC1BC,eAAe,EAAE,oBAAoB;EACrCC,aAAa,EAAE,eAAe;EAC9BC,sBAAsB,EAAE,UAAU;EAClCC,0BAA0B,EAAE,MAAM;EAClCC,qBAAqB,EAAE,iDAAiD;EACxEC,qBAAqB,EAAE,uBAAuB;EAC9CC,WAAW,EAAE,aAAa;EAC1BC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,KAAK;EACrBC,aAAa,EAAE,GAAG;EAClBC,aAAa,EAAE,2DAA2D;EAC1EC,YAAY,EAAE,YAAY;EAC1BC,YAAY,EAAE,IAAI;EAClBC,+BAA+B,EAAE,eAAe;EAChDC,iCAAiC,EAAE,qBAAqB;EACxDC,mBAAmB,EAAE,CACjB,2BAA2B,EAC3B,mBAAmB,EACnB,qBAAqB,EACrB,iBAAiB,CACpB;EACDC,mBAAmB,EAAE,OAAO;EAC5BC,sBAAsB,EAAE,UAAU;EAClCC,kBAAkB,EAAE,GAAG;EACvBC,gBAAgB,EAAE;;AAGT,MAAAC,UAAU,GAAG;EACtBC,mBAAmB,EAAE,GAAG;EACxBC,iBAAiB,EAAE,GAAG;EACtBC,QAAQ,EAAE,GAAG;EACbC,wBAAwB,EAAE,GAAG;EAC7BC,sBAAsB,EAAE,GAAG;EAC3BC,wBAAwB,EAAE,GAAG;EAC7BC,sBAAsB,EAAE;;AAIf,MAAAC,mBAAmB,GAAG,CAC/BjD,SAAS,CAACgB,YAAY,EACtBhB,SAAS,CAACiB,aAAa,EACvBjB,SAAS,CAACkB,oBAAoB,C;AAG3B,MAAMgC,WAAW,GAAG,CAAC,GAAGD,mBAAmB,EAAEjD,SAAS,CAACmB,WAAW;AAEzE;;AAEG;AACU,MAAAgC,WAAW,GAAG;EACvBC,YAAY,EAAE,cAAc;EAC5BC,WAAW,EAAE,aAAa;EAC1BC,UAAU,EAAE,iBAAiB;EAC7BC,eAAe,EAAE,kBAAkB;EACnCC,kBAAkB,EAAE,qBAAqB;EACzCC,eAAe,EAAE,iBAAiB;EAClCC,iBAAiB,EAAE;;AAIvB;;AAEG;AACU,MAAAC,mBAAmB,GAAG;EAC/BC,QAAQ,EAAE,SAAS;EACnBC,WAAW,EAAE,aAAa;EAC1BC,aAAa,EAAE,cAAc;EAC7BC,KAAK,EAAE,OAAO;EACdC,UAAU,EAAE,mBAAmB;EAC/BC,cAAc,EAAE,gBAAgB;EAChCC,sBAAsB,EAAE,wBAAwB;;AAKpD;;AAEG;AACU,MAAAC,qBAAqB,GAAG;EACjCC,MAAM,EAAE,QAAQ;EAChBC,aAAa,EAAE,eAAe;EAC9BC,SAAS,EAAE;;AAKf;;AAEG;AACU,MAAAC,iBAAiB,GAAG;EAC7BC,YAAY,EAAE,cAAc;EAC5BC,MAAM,EAAE;;AAKZ;;;;AAIG;AACU,MAAAC,WAAW,GAAG;EACvBC,KAAK,EAAE,OAAO;EACdC,cAAc,EAAE,gBAAgB;EAChCC,OAAO,EAAE,SAAS;EAClBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,QAAQ;EAChBC,UAAU,EAAE;;AAGhB;;AAEG;AACU,MAAAC,yBAAyB,GAAG;EACrCC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE;;AAGV;;AAEG;AACU,MAAAC,kBAAkB,GAAG;EAC9BC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE;;AAKd;;AAEG;AACU,MAAAC,YAAY,GAAG;EACxB,GAAGH,kBAAkB;EACrBI,SAAS,EAAE;;AAIf;;AAEG;AACU,MAAAC,SAAS,GAAG;EACrBC,cAAc,EAAE,UAAU;EAC1BC,wBAAwB,EAAE,oBAAoB;EAC9CC,wBAAwB,EAAE,oBAAoB;EAC9CC,6BAA6B,EAAE,UAAU;EACzCC,mBAAmB,EAAE,eAAe;EACpCC,iBAAiB,EAAE,aAAa;EAChCC,UAAU,EAAE;;AAIhB;;AAEG;AACU,MAAAC,gBAAgB,GAAG;EAC5BC,kBAAkB,EAAE,OAAO;EAC3BC,iBAAiB,EAAE,MAAM;EACzBC,kBAAkB,EAAE,KAAK;EACzBC,oBAAoB,EAAE,SAAS;;AAKnC;;AAEG;AACU,MAAAC,UAAU,GAAG;EACtBC,mBAAmB,EAAE,GAAG;EACxBC,qBAAqB,EAAE;;AAI3B;;AAEG;AACU,MAAAC,cAAc,GAAG;EAC1B7C,QAAQ,EAAE,SAAS;EACnBY,YAAY,EAAE,aAAa;EAC3BkC,6BAA6B,EAAE,6BAA6B;EAC5DC,aAAa,EAAE;;AAKnB;;AAEG;AACU,MAAAC,SAAS,GAAG;EACrBrG,IAAI,EAAE,IAAI;EACVsG,GAAG,EAAE,IAAI;EACTC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,IAAI;EACbvC,YAAY,EAAE,IAAI;EAClBmC,aAAa,EAAE,IAAI;EACnB/C,QAAQ,EAAE,IAAI;EACdoD,YAAY,EAAE,IAAI;EAClBC,SAAS,EAAE;;AAIf;;AAEG;AACI,MAAMD,YAAY,GAAG;AACrB,MAAMnD,WAAW,GAAG;AACpB,MAAMqD,aAAa,GAAG;AAEhB,MAAAC,4BAA4B,GAAG;EACxCC,SAAS,EAAE,oBAAoB;EAC/BC,oBAAoB,EAAE,IAAI,GAAG,EAAE;;AAGtB,MAAAC,uBAAuB,GAAG;EACnCC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,SAAS;EAClBC,gBAAgB,EAAE;;AAKT,MAAAC,sBAAsB,GAAG;EAClCC,cAAc,EAAE,CAAC;EACjBC,oBAAoB,EAAE,EAAE;EACxBC,qBAAqB,EAAE,GAAG;EAC1BC,iBAAiB,EAAE,EAAE;EACrBX,SAAS,EAAE,kBAAkB;EAC7BY,kBAAkB,EAAE,GAAG;EACvBC,eAAe,EAAE,GAAG;EACpBC,aAAa,EAAE,GAAG;EAClBC,cAAc,EAAE,GAAG;EACnBC,aAAa,EAAE;;AAGnB;;AAEG;AACU,MAAAC,oBAAoB,GAAG;EAChCC,MAAM,EAAE,QAAQ;EAChBC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE;;AAKT;;AAEG;AACU,MAAAC,mBAAmB,GAAG;;EAE/BC,6BAA6B,EAAE,EAAE;;EAEjCC,iCAAiC,EAAE,IAAI;;EAEvCC,iBAAiB,EAAE,YAAY;;EAE/BC,yBAAyB,EAAE;;AAGlB,MAAAC,MAAM,GAAG;EAClBC,mBAAmB,EAAE,eAAe;EACpCC,qBAAqB,EAAE;;AAG3B;;AAEG;AACU,MAAAC,sBAAsB,GAAG;EAClCC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE;;AAKd;;AAEG;AACU,MAAAC,aAAa,GAAG;EACzBC,WAAW,EAAE,GAAG;EAChBC,cAAc,EAAE;;AAIpB;;AAEG;AACU,MAAAC,sBAAsB,GAAG;EAClCC,qBAAqB,EAAE,GAAG;EAC1BC,cAAc,EAAE,GAAG;EACnBC,oBAAoB,EAAE,GAAG;EACzBC,IAAI,EAAE;;AAKV;;AAEG;AACU,MAAAC,uBAAuB,GAAG;EACnCC,2BAA2B,EAAE,GAAG;EAChCC,4BAA4B,EAAE,GAAG;EACjCC,uBAAuB,EAAE,GAAG;EAC5BC,mCAAmC,EAAE,GAAG;EACxCC,+BAA+B,EAAE;;AAKrC;;AAEG;AACU,MAAAC,YAAY,GAAG;;EAExBrI,cAAc,EAAE,GAAG;;EAEnBsI,uBAAuB,EAAE,GAAG;;EAE5BC,sBAAsB,EAAE,GAAG;;EAE3BC,2BAA2B,EAAE,GAAG;;EAEhCC,qBAAqB,EAAE;;AAId,MAAAC,iBAAiB,GAAG;EAC7BC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE;;AAKF,MAAMC,aAAa,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}