{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { Constants } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Log message level.\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n  LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\nclass Logger {\n  constructor(loggerOptions, packageName, packageVersion) {\n    // Current log level, defaults to info.\n    this.level = LogLevel.Info;\n    const defaultLoggerCallback = () => {\n      return;\n    };\n    const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\n    this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;\n    this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n    this.level = typeof setLoggerOptions.logLevel === \"number\" ? setLoggerOptions.logLevel : LogLevel.Info;\n    this.correlationId = setLoggerOptions.correlationId || Constants.EMPTY_STRING;\n    this.packageName = packageName || Constants.EMPTY_STRING;\n    this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n  }\n  static createDefaultLoggerOptions() {\n    return {\n      loggerCallback: () => {\n        // allow users to not set loggerCallback\n      },\n      piiLoggingEnabled: false,\n      logLevel: LogLevel.Info\n    };\n  }\n  /**\r\n   * Create new Logger with existing configurations.\r\n   */\n  clone(packageName, packageVersion, correlationId) {\n    return new Logger({\n      loggerCallback: this.localCallback,\n      piiLoggingEnabled: this.piiLoggingEnabled,\n      logLevel: this.level,\n      correlationId: correlationId || this.correlationId\n    }, packageName, packageVersion);\n  }\n  /**\r\n   * Log message with required options.\r\n   */\n  logMessage(logMessage, options) {\n    if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n      return;\n    }\n    const timestamp = new Date().toUTCString();\n    // Add correlationId to logs if set, correlationId provided on log messages take precedence\n    const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\n    const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n    // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n    this.executeCallback(options.logLevel, log, options.containsPii || false);\n  }\n  /**\r\n   * Execute callback with message.\r\n   */\n  executeCallback(level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  }\n  /**\r\n   * Logs error messages.\r\n   */\n  error(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs error messages with PII.\r\n   */\n  errorPii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs warning messages.\r\n   */\n  warning(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs warning messages with PII.\r\n   */\n  warningPii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs info messages.\r\n   */\n  info(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs info messages with PII.\r\n   */\n  infoPii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs verbose messages.\r\n   */\n  verbose(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs verbose messages with PII.\r\n   */\n  verbosePii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs trace messages.\r\n   */\n  trace(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs trace messages with PII.\r\n   */\n  tracePii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Returns whether PII Logging is enabled or not.\r\n   */\n  isPiiLoggingEnabled() {\n    return this.piiLoggingEnabled || false;\n  }\n}\nexport { LogLevel, Logger };","map":{"version":3,"names":["LogLevel","Logger","constructor","loggerOptions","packageName","packageVersion","level","Info","defaultLoggerCallback","setLoggerOptions","createDefaultLoggerOptions","localCallback","loggerCallback","piiLoggingEnabled","logLevel","correlationId","Constants","EMPTY_STRING","clone","logMessage","options","containsPii","timestamp","Date","toUTCString","logHeader","log","executeCallback","message","error","Error","errorPii","warning","Warning","warningPii","info","infoPii","verbose","Verbose","verbosePii","trace","Trace","tracePii","isPiiLoggingEnabled"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\logger\\Logger.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\r\nimport { Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Options for logger messages.\r\n */\r\nexport type LoggerMessageOptions = {\r\n    logLevel: LogLevel;\r\n    containsPii?: boolean;\r\n    context?: string;\r\n    correlationId?: string;\r\n};\r\n\r\n/**\r\n * Log message level.\r\n */\r\nexport enum LogLevel {\r\n    Error,\r\n    Warning,\r\n    Info,\r\n    Verbose,\r\n    Trace,\r\n}\r\n\r\n/**\r\n * Callback to send the messages to.\r\n */\r\nexport interface ILoggerCallback {\r\n    (level: LogLevel, message: string, containsPii: boolean): void;\r\n}\r\n\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nexport class Logger {\r\n    // Correlation ID for request, usually set by user.\r\n    private correlationId: string;\r\n\r\n    // Current log level, defaults to info.\r\n    private level: LogLevel = LogLevel.Info;\r\n\r\n    // Boolean describing whether PII logging is allowed.\r\n    private piiLoggingEnabled: boolean;\r\n\r\n    // Callback to send messages to.\r\n    private localCallback: ILoggerCallback;\r\n\r\n    // Package name implementing this logger\r\n    private packageName: string;\r\n\r\n    // Package version implementing this logger\r\n    private packageVersion: string;\r\n\r\n    constructor(\r\n        loggerOptions: LoggerOptions,\r\n        packageName?: string,\r\n        packageVersion?: string\r\n    ) {\r\n        const defaultLoggerCallback = () => {\r\n            return;\r\n        };\r\n        const setLoggerOptions =\r\n            loggerOptions || Logger.createDefaultLoggerOptions();\r\n        this.localCallback =\r\n            setLoggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\r\n        this.level =\r\n            typeof setLoggerOptions.logLevel === \"number\"\r\n                ? setLoggerOptions.logLevel\r\n                : LogLevel.Info;\r\n        this.correlationId =\r\n            setLoggerOptions.correlationId || Constants.EMPTY_STRING;\r\n        this.packageName = packageName || Constants.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\r\n    }\r\n\r\n    private static createDefaultLoggerOptions(): LoggerOptions {\r\n        return {\r\n            loggerCallback: () => {\r\n                // allow users to not set loggerCallback\r\n            },\r\n            piiLoggingEnabled: false,\r\n            logLevel: LogLevel.Info,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    public clone(\r\n        packageName: string,\r\n        packageVersion: string,\r\n        correlationId?: string\r\n    ): Logger {\r\n        return new Logger(\r\n            {\r\n                loggerCallback: this.localCallback,\r\n                piiLoggingEnabled: this.piiLoggingEnabled,\r\n                logLevel: this.level,\r\n                correlationId: correlationId || this.correlationId,\r\n            },\r\n            packageName,\r\n            packageVersion\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    private logMessage(\r\n        logMessage: string,\r\n        options: LoggerMessageOptions\r\n    ): void {\r\n        if (\r\n            options.logLevel > this.level ||\r\n            (!this.piiLoggingEnabled && options.containsPii)\r\n        ) {\r\n            return;\r\n        }\r\n        const timestamp = new Date().toUTCString();\r\n\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        const logHeader = `[${timestamp}] : [${\r\n            options.correlationId || this.correlationId || \"\"\r\n        }]`;\r\n\r\n        const log = `${logHeader} : ${this.packageName}@${\r\n            this.packageVersion\r\n        } : ${LogLevel[options.logLevel]} - ${logMessage}`;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\r\n        this.executeCallback(\r\n            options.logLevel,\r\n            log,\r\n            options.containsPii || false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    executeCallback(\r\n        level: LogLevel,\r\n        message: string,\r\n        containsPii: boolean\r\n    ): void {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    error(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    errorPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    warning(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    warningPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    info(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    infoPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    verbose(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    verbosePii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    trace(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    tracePii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    isPiiLoggingEnabled(): boolean {\r\n        return this.piiLoggingEnabled || false;\r\n    }\r\n}\r\n"],"mappings":";;;;;AAAA;;;AAGG;AAeH;;AAEG;IACSA,QAAA;AAAZ,WAAYA,QAAQ;EAChBA,QAAA,CAAAA,QAAA,wBAAK;EACLA,QAAA,CAAAA,QAAA,4BAAO;EACPA,QAAA,CAAAA,QAAA,sBAAI;EACJA,QAAA,CAAAA,QAAA,4BAAO;EACPA,QAAA,CAAAA,QAAA,wBAAK;AACT,CAAC,EANWA,QAAQ,KAARA,QAAQ,GAMnB;AASD;;AAEG;MACUC,MAAM;EAmBfC,YACIC,aAA4B,EAC5BC,WAAoB,EACpBC,cAAuB;;IAjBnB,KAAAC,KAAK,GAAaN,QAAQ,CAACO,IAAI;IAmBnC,MAAMC,qBAAqB,GAAGA,CAAA,KAAK;MAC/B;IACJ,CAAC;IACD,MAAMC,gBAAgB,GAClBN,aAAa,IAAIF,MAAM,CAACS,0BAA0B,EAAE;IACxD,IAAI,CAACC,aAAa,GACdF,gBAAgB,CAACG,cAAc,IAAIJ,qBAAqB;IAC5D,IAAI,CAACK,iBAAiB,GAAGJ,gBAAgB,CAACI,iBAAiB,IAAI,KAAK;IACpE,IAAI,CAACP,KAAK,GACN,OAAOG,gBAAgB,CAACK,QAAQ,KAAK,QAAQ,GACvCL,gBAAgB,CAACK,QAAQ,GACzBd,QAAQ,CAACO,IAAI;IACvB,IAAI,CAACQ,aAAa,GACdN,gBAAgB,CAACM,aAAa,IAAIC,SAAS,CAACC,YAAY;IAC5D,IAAI,CAACb,WAAW,GAAGA,WAAW,IAAIY,SAAS,CAACC,YAAY;IACxD,IAAI,CAACZ,cAAc,GAAGA,cAAc,IAAIW,SAAS,CAACC,YAAY;;EAG1D,OAAOP,0BAA0BA,CAAA;IACrC,OAAO;MACHE,cAAc,EAAEA,CAAA,KAAK;;OAEpB;MACDC,iBAAiB,EAAE,KAAK;MACxBC,QAAQ,EAAEd,QAAQ,CAACO;KACtB;;EAGL;;AAEG;EACIW,KAAKA,CACRd,WAAmB,EACnBC,cAAsB,EACtBU,aAAsB;IAEtB,OAAO,IAAId,MAAM,CACb;MACIW,cAAc,EAAE,IAAI,CAACD,aAAa;MAClCE,iBAAiB,EAAE,IAAI,CAACA,iBAAiB;MACzCC,QAAQ,EAAE,IAAI,CAACR,KAAK;MACpBS,aAAa,EAAEA,aAAa,IAAI,IAAI,CAACA;IACxC,GACDX,WAAW,EACXC,cAAc,CACjB;;EAGL;;AAEG;EACKc,UAAUA,CACdA,UAAkB,EAClBC,OAA6B;IAE7B,IACIA,OAAO,CAACN,QAAQ,GAAG,IAAI,CAACR,KAAK,IAC5B,CAAC,IAAI,CAACO,iBAAiB,IAAIO,OAAO,CAACC,WAAY,EAClD;MACE;IACH;IACD,MAAMC,SAAS,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;;IAG1C,MAAMC,SAAS,GAAO,IAAAH,SAAS,QAC3BF,OAAO,CAACL,aAAa,IAAI,IAAI,CAACA,aAAa,IAAI,EACnD,GAAG;IAEH,MAAMW,GAAG,GAAM,GAAAD,SAAS,MAAM,IAAI,CAACrB,WAAW,IAC1C,IAAI,CAACC,cACH,MAAAL,QAAQ,CAACoB,OAAO,CAACN,QAAQ,CAAC,MAAMK,UAAU,EAAE;;IAElD,IAAI,CAACQ,eAAe,CAChBP,OAAO,CAACN,QAAQ,EAChBY,GAAG,EACHN,OAAO,CAACC,WAAW,IAAI,KAAK,CAC/B;;EAGL;;AAEG;EACHM,eAAeA,CACXrB,KAAe,EACfsB,OAAe,EACfP,WAAoB;IAEpB,IAAI,IAAI,CAACV,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAACL,KAAK,EAAEsB,OAAO,EAAEP,WAAW,CAAC;IAClD;;EAGL;;AAEG;EACHQ,KAAKA,CAACD,OAAe,EAAEb,aAAsB;IACzC,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAAC8B,KAAK;MACxBT,WAAW,EAAE,KAAK;MAClBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHc,QAAQA,CAACH,OAAe,EAAEb,aAAsB;IAC5C,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAAC8B,KAAK;MACxBT,WAAW,EAAE,IAAI;MACjBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHe,OAAOA,CAACJ,OAAe,EAAEb,aAAsB;IAC3C,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACiC,OAAO;MAC1BZ,WAAW,EAAE,KAAK;MAClBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHiB,UAAUA,CAACN,OAAe,EAAEb,aAAsB;IAC9C,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACiC,OAAO;MAC1BZ,WAAW,EAAE,IAAI;MACjBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHkB,IAAIA,CAACP,OAAe,EAAEb,aAAsB;IACxC,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACO,IAAI;MACvBc,WAAW,EAAE,KAAK;MAClBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHmB,OAAOA,CAACR,OAAe,EAAEb,aAAsB;IAC3C,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACO,IAAI;MACvBc,WAAW,EAAE,IAAI;MACjBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHoB,OAAOA,CAACT,OAAe,EAAEb,aAAsB;IAC3C,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACsC,OAAO;MAC1BjB,WAAW,EAAE,KAAK;MAClBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHsB,UAAUA,CAACX,OAAe,EAAEb,aAAsB;IAC9C,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACsC,OAAO;MAC1BjB,WAAW,EAAE,IAAI;MACjBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHuB,KAAKA,CAACZ,OAAe,EAAEb,aAAsB;IACzC,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACyC,KAAK;MACxBpB,WAAW,EAAE,KAAK;MAClBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACHyB,QAAQA,CAACd,OAAe,EAAEb,aAAsB;IAC5C,IAAI,CAACI,UAAU,CAACS,OAAO,EAAE;MACrBd,QAAQ,EAAEd,QAAQ,CAACyC,KAAK;MACxBpB,WAAW,EAAE,IAAI;MACjBN,aAAa,EAAEA,aAAa,IAAIC,SAAS,CAACC;IAC7C,EAAC;;EAGN;;AAEG;EACH0B,mBAAmBA,CAAA;IACf,OAAO,IAAI,CAAC9B,iBAAiB,IAAI,KAAK;;AAE7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}