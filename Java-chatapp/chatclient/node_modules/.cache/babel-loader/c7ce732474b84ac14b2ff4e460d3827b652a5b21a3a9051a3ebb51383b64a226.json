{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass UnknownOperatingContext extends BaseOperatingContext {\n  /**\r\n   * Return the module name.  Intended for use with import() to enable dynamic import\r\n   * of the implementation associated with this operating context\r\n   * @returns\r\n   */\n  getModuleName() {\n    return UnknownOperatingContext.MODULE_NAME;\n  }\n  /**\r\n   * Returns the unique identifier for this operating context\r\n   * @returns string\r\n   */\n  getId() {\n    return UnknownOperatingContext.ID;\n  }\n  /**\r\n   * Checks whether the operating context is available.\r\n   * Confirms that the code is running a browser rather.  This is required.\r\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n   */\n  async initialize() {\n    /**\r\n     * This operating context is in use when we have not checked for what the operating context is.\r\n     * The context is unknown until we check it.\r\n     */\n    return true;\n  }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */\nUnknownOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */\nUnknownOperatingContext.ID = \"UnknownOperatingContext\";\nexport { UnknownOperatingContext };","map":{"version":3,"names":["UnknownOperatingContext","BaseOperatingContext","getModuleName","MODULE_NAME","getId","ID","initialize"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\operatingcontext\\UnknownOperatingContext.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\r\n\r\nexport class UnknownOperatingContext extends BaseOperatingContext {\r\n    /*\r\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n     * containing the implementation for this operating context\r\n     */\r\n    static readonly MODULE_NAME: string = \"\";\r\n\r\n    /**\r\n     * Unique identifier for the operating context\r\n     */\r\n    static readonly ID: string = \"UnknownOperatingContext\";\r\n\r\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */\r\n    getModuleName(): string {\r\n        return UnknownOperatingContext.MODULE_NAME;\r\n    }\r\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */\r\n    getId(): string {\r\n        return UnknownOperatingContext.ID;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */\r\n    async initialize(): Promise<boolean> {\r\n        /**\r\n         * This operating context is in use when we have not checked for what the operating context is.\r\n         * The context is unknown until we check it.\r\n         */\r\n        return true;\r\n    }\r\n}\r\n"],"mappings":";;;;;AAAA;;;AAGG;AAIG,MAAOA,uBAAwB,SAAQC,oBAAoB;EAY7D;;;;AAIG;EACHC,aAAaA,CAAA;IACT,OAAOF,uBAAuB,CAACG,WAAW;;EAE9C;;;AAGG;EACHC,KAAKA,CAAA;IACD,OAAOJ,uBAAuB,CAACK,EAAE;;EAGrC;;;;AAIG;EACH,MAAMC,UAAUA,CAAA;IACZ;;;AAGG;IACH,OAAO,IAAI;;;AArCf;;;AAGG;AACaN,uBAAW,CAAAG,WAAA,GAAW,EAAE;AAExC;;AAEG;AACaH,uBAAE,CAAAK,EAAA,GAAW,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}