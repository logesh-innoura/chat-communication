{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { Separators, GrantType, AuthenticationScheme, PromptValue, HeaderNames } from '../utils/Constants.mjs';\nimport { CLIENT_ID, RETURN_SPA_CODE } from '../constants/AADServerParamKeys.mjs';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from '../request/RequestValidator.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { requestCannotBeMade, authorizationCodeMissingFromServerResponse } from '../error/ClientAuthErrorCodes.mjs';\nimport { logoutRequestEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */\nclass AuthorizationCodeClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    this.includeRedirectUri = true;\n    this.oidcDefaultScopes = this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  async getAuthCodeUrl(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n    const queryString = await invokeAsync(this.createAuthCodeUrlQueryString.bind(this), PerformanceEvents.AuthClientCreateQueryString, this.logger, this.performanceClient, request.correlationId)(request);\n    return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n  }\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  async acquireToken(request, authCodePayload) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n    if (!request.code) {\n      throw createClientAuthError(requestCannotBeMade);\n    }\n    const reqTimestamp = TimeUtils.nowSeconds();\n    const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\n    // Retrieve requestId from response headers\n    const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n    // Validate response. This function throws a server error if an error is returned by the server.\n    responseHandler.validateTokenResponse(response.body);\n    return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\n  }\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  handleFragmentResponse(serverParams, cachedState) {\n    // Handle responses.\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw createClientAuthError(authorizationCodeMissingFromServerResponse);\n    }\n    return serverParams;\n  }\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  getLogoutUri(logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw createClientConfigurationError(logoutRequestEmpty);\n    }\n    const queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  }\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  async executeTokenRequest(authority, request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n    const queryParametersString = this.createTokenQueryParameters(request);\n    const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n    const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n    let ccsCredential = undefined;\n    if (request.clientInfo) {\n      try {\n        const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\n        ccsCredential = {\n          credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n          type: CcsCredentialType.HOME_ACCOUNT_ID\n        };\n      } catch (e) {\n        this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n      }\n    }\n    const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n    const thumbprint = {\n      clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n      authority: authority.canonicalAuthority,\n      scopes: request.scopes,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\n  }\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  async createTokenRequestBody(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n    const parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(request.tokenBodyParameters?.[CLIENT_ID] || this.config.authOptions.clientId);\n    /*\r\n     * For hybrid spa flow, there will be a code but no verifier\r\n     * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n     */\n    if (!this.includeRedirectUri) {\n      // Just validate\n      RequestValidator.validateRedirectUri(request.redirectUri);\n    } else {\n      // Validate and include redirect uri\n      parameterBuilder.addRedirectUri(request.redirectUri);\n    }\n    // Add scope array, parameter builder will add default scopes and dedupe\n    parameterBuilder.addScopes(request.scopes, true, this.oidcDefaultScopes);\n    // add code: user set, not validated\n    parameterBuilder.addAuthorizationCode(request.code);\n    // Add library metadata\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    // add code_verifier if passed\n    if (request.codeVerifier) {\n      parameterBuilder.addCodeVerifier(request.codeVerifier);\n    }\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      const clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n    parameterBuilder.addClientInfo();\n    if (request.authenticationScheme === AuthenticationScheme.POP) {\n      const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n      const reqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n      // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n      parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n    } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n      if (request.sshJwk) {\n        parameterBuilder.addSshJwk(request.sshJwk);\n      } else {\n        throw createClientConfigurationError(missingSshJwk);\n      }\n    }\n    const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    let ccsCred = undefined;\n    if (request.clientInfo) {\n      try {\n        const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\n        ccsCred = {\n          credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n          type: CcsCredentialType.HOME_ACCOUNT_ID\n        };\n      } catch (e) {\n        this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n      }\n    } else {\n      ccsCred = request.ccsCredential;\n    }\n    // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n    if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          parameterBuilder.addCcsUpn(ccsCred.credential);\n          break;\n      }\n    }\n    if (request.tokenBodyParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n    }\n    // Add hybrid spa parameters if not already provided\n    if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[RETURN_SPA_CODE])) {\n      parameterBuilder.addExtraQueryParameters({\n        [RETURN_SPA_CODE]: \"1\"\n      });\n    }\n    return parameterBuilder.createQueryString();\n  }\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  async createAuthCodeUrlQueryString(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n    const parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(request.extraQueryParameters?.[CLIENT_ID] || this.config.authOptions.clientId);\n    const requestScopes = [...(request.scopes || []), ...(request.extraScopesToConsent || [])];\n    parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n    // validate the redirectUri (to be a non null value)\n    parameterBuilder.addRedirectUri(request.redirectUri);\n    // generate the correlationId if not set by the user and add\n    const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    // add response_mode. If not passed in it defaults to query.\n    parameterBuilder.addResponseMode(request.responseMode);\n    // add response_type = code\n    parameterBuilder.addResponseTypeCode();\n    // add library info parameters\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    if (!isOidcProtocolMode(this.config)) {\n      parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    }\n    // add client_info=1\n    parameterBuilder.addClientInfo();\n    if (request.codeChallenge && request.codeChallengeMethod) {\n      parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n    }\n    if (request.prompt) {\n      parameterBuilder.addPrompt(request.prompt);\n    }\n    if (request.domainHint) {\n      parameterBuilder.addDomainHint(request.domainHint);\n    }\n    // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n      // AAD will throw if prompt=select_account is passed with an account hint\n      if (request.sid && request.prompt === PromptValue.NONE) {\n        // SessionID is only used in silent calls\n        this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n        parameterBuilder.addSid(request.sid);\n      } else if (request.account) {\n        const accountSid = this.extractAccountSid(request.account);\n        const accountLoginHintClaim = this.extractLoginHint(request.account);\n        // If login_hint claim is present, use it over sid/username\n        if (accountLoginHintClaim) {\n          this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n          parameterBuilder.addLoginHint(accountLoginHintClaim);\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n          }\n        } else if (accountSid && request.prompt === PromptValue.NONE) {\n          /*\r\n           * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n           * SessionId is only used in silent calls\r\n           */\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n          parameterBuilder.addSid(accountSid);\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n          }\n        } else if (request.loginHint) {\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n          parameterBuilder.addLoginHint(request.loginHint);\n          parameterBuilder.addCcsUpn(request.loginHint);\n        } else if (request.account.username) {\n          // Fallback to account username if provided\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n          parameterBuilder.addLoginHint(request.account.username);\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n          }\n        }\n      } else if (request.loginHint) {\n        this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n        parameterBuilder.addLoginHint(request.loginHint);\n        parameterBuilder.addCcsUpn(request.loginHint);\n      }\n    } else {\n      this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n    }\n    if (request.nonce) {\n      parameterBuilder.addNonce(request.nonce);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    if (request.nativeBroker) {\n      // signal ests that this is a WAM call\n      parameterBuilder.addNativeBroker();\n      // pass the req_cnf for POP\n      if (request.authenticationScheme === AuthenticationScheme.POP) {\n        const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n        // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n        const reqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n        parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n      }\n    }\n    return parameterBuilder.createQueryString();\n  }\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  createLogoutUrlQueryString(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  extractAccountSid(account) {\n    return account.idTokenClaims?.sid || null;\n  }\n  extractLoginHint(account) {\n    return account.idTokenClaims?.login_hint || null;\n  }\n}\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["AuthorizationCodeClient","BaseClient","constructor","configuration","performanceClient","includeRedirectUri","oidcDefaultScopes","config","authOptions","authority","options","OIDCOptions","defaultScopes","getAuthCodeUrl","request","addQueueMeasurement","PerformanceEvents","GetAuthCodeUrl","correlationId","queryString","invokeAsync","createAuthCodeUrlQueryString","bind","AuthClientCreateQueryString","logger","UrlString","appendQueryString","authorizationEndpoint","acquireToken","authCodePayload","AuthClientAcquireToken","code","createClientAuthError","requestCannotBeMade","reqTimestamp","TimeUtils","nowSeconds","response","executeTokenRequest","AuthClientExecuteTokenRequest","requestId","headers","HeaderNames","X_MS_REQUEST_ID","responseHandler","ResponseHandler","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","HandleServerTokenResponse","undefined","handleFragmentResponse","serverParams","cachedState","validateServerAuthorizationCodeResponse","authorizationCodeMissingFromServerResponse","getLogoutUri","logoutRequest","createClientConfigurationError","logoutRequestEmpty","createLogoutUrlQueryString","endSessionEndpoint","queryParametersString","createTokenQueryParameters","endpoint","tokenEndpoint","requestBody","createTokenRequestBody","AuthClientCreateTokenRequestBody","ccsCredential","clientInfo","buildClientInfo","base64Decode","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","verbose","createTokenRequestHeaders","thumbprint","tokenBodyParameters","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","AuthorizationCodeClientExecutePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","CLIENT_ID","RequestValidator","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","isOidcProtocolMode","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","reqCnfData","generateCnf","PopTokenGenerateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","missingSshJwk","cryptoInterface","createNewGuid","addCorrelationId","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","addExtraQueryParameters","enableSpaAuthorizationCode","RETURN_SPA_CODE","createQueryString","extraQueryParameters","requestScopes","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\client\\AuthorizationCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\r\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport {\r\n    GrantType,\r\n    AuthenticationScheme,\r\n    PromptValue,\r\n    Separators,\r\n    HeaderNames,\r\n} from \"../utils/Constants\";\r\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys\";\r\nimport {\r\n    ClientConfiguration,\r\n    isOidcProtocolMode,\r\n} from \"../config/ClientConfiguration\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport {\r\n    ClientAuthErrorCodes,\r\n    createClientAuthError,\r\n} from \"../error/ClientAuthError\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\r\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport {\r\n    buildClientInfoFromHomeAccountId,\r\n    buildClientInfo,\r\n} from \"../account/ClientInfo\";\r\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\r\nimport {\r\n    createClientConfigurationError,\r\n    ClientConfigurationErrorCodes,\r\n} from \"../error/ClientConfigurationError\";\r\nimport { RequestValidator } from \"../request/RequestValidator\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\r\n\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */\r\nexport class AuthorizationCodeClient extends BaseClient {\r\n    // Flag to indicate if client is for hybrid spa auth code redemption\r\n    protected includeRedirectUri: boolean = true;\r\n    private oidcDefaultScopes;\r\n\r\n    constructor(\r\n        configuration: ClientConfiguration,\r\n        performanceClient?: IPerformanceClient\r\n    ) {\r\n        super(configuration, performanceClient);\r\n        this.oidcDefaultScopes =\r\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\r\n    }\r\n\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    async getAuthCodeUrl(\r\n        request: CommonAuthorizationUrlRequest\r\n    ): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.GetAuthCodeUrl,\r\n            request.correlationId\r\n        );\r\n\r\n        const queryString = await invokeAsync(\r\n            this.createAuthCodeUrlQueryString.bind(this),\r\n            PerformanceEvents.AuthClientCreateQueryString,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request);\r\n\r\n        return UrlString.appendQueryString(\r\n            this.authority.authorizationEndpoint,\r\n            queryString\r\n        );\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(\r\n        request: CommonAuthorizationCodeRequest,\r\n        authCodePayload?: AuthorizationCodePayload\r\n    ): Promise<AuthenticationResult> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.AuthClientAcquireToken,\r\n            request.correlationId\r\n        );\r\n\r\n        if (!request.code) {\r\n            throw createClientAuthError(\r\n                ClientAuthErrorCodes.requestCannotBeMade\r\n            );\r\n        }\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await invokeAsync(\r\n            this.executeTokenRequest.bind(this),\r\n            PerformanceEvents.AuthClientExecuteTokenRequest,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(this.authority, request);\r\n\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin,\r\n            this.performanceClient\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n\r\n        return invokeAsync(\r\n            responseHandler.handleServerTokenResponse.bind(responseHandler),\r\n            PerformanceEvents.HandleServerTokenResponse,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            authCodePayload,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            requestId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    handleFragmentResponse(\r\n        serverParams: ServerAuthorizationCodeResponse,\r\n        cachedState: string\r\n    ): AuthorizationCodePayload {\r\n        // Handle responses.\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            null,\r\n            null\r\n        );\r\n\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(\r\n            serverParams,\r\n            cachedState\r\n        );\r\n\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw createClientAuthError(\r\n                ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse\r\n            );\r\n        }\r\n\r\n        return serverParams as AuthorizationCodePayload;\r\n    }\r\n\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.logoutRequestEmpty\r\n            );\r\n        }\r\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(\r\n            this.authority.endSessionEndpoint,\r\n            queryString\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(\r\n        authority: Authority,\r\n        request: CommonAuthorizationCodeRequest\r\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.AuthClientExecuteTokenRequest,\r\n            request.correlationId\r\n        );\r\n\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(\r\n            authority.tokenEndpoint,\r\n            queryParametersString\r\n        );\r\n\r\n        const requestBody = await invokeAsync(\r\n            this.createTokenRequestBody.bind(this),\r\n            PerformanceEvents.AuthClientCreateTokenRequestBody,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request);\r\n\r\n        let ccsCredential: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(\r\n                    request.clientInfo,\r\n                    this.cryptoUtils.base64Decode\r\n                );\r\n                ccsCredential = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\r\n                    \"Could not parse client info for CCS Header: \" + e\r\n                );\r\n            }\r\n        }\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(\r\n            ccsCredential || request.ccsCredential\r\n        );\r\n\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId:\r\n                request.tokenBodyParameters?.clientId ||\r\n                this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid,\r\n        };\r\n\r\n        return invokeAsync(\r\n            this.executePostToTokenEndpoint.bind(this),\r\n            PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(\r\n            endpoint,\r\n            requestBody,\r\n            headers,\r\n            thumbprint,\r\n            request.correlationId,\r\n            PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(\r\n        request: CommonAuthorizationCodeRequest\r\n    ): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.AuthClientCreateTokenRequestBody,\r\n            request.correlationId\r\n        );\r\n\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(\r\n            request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\r\n                this.config.authOptions.clientId\r\n        );\r\n\r\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */\r\n        if (!this.includeRedirectUri) {\r\n            // Just validate\r\n            RequestValidator.validateRedirectUri(request.redirectUri);\r\n        } else {\r\n            // Validate and include redirect uri\r\n            parameterBuilder.addRedirectUri(request.redirectUri);\r\n        }\r\n\r\n        // Add scope array, parameter builder will add default scopes and dedupe\r\n        parameterBuilder.addScopes(\r\n            request.scopes,\r\n            true,\r\n            this.oidcDefaultScopes\r\n        );\r\n\r\n        // add code: user set, not validated\r\n        parameterBuilder.addAuthorizationCode(request.code);\r\n\r\n        // Add library metadata\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(\r\n            this.config.telemetry.application\r\n        );\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        // add code_verifier if passed\r\n        if (request.codeVerifier) {\r\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(\r\n                this.config.clientCredentials.clientSecret\r\n            );\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion =\r\n                this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(\r\n                clientAssertion.assertionType\r\n            );\r\n        }\r\n\r\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(\r\n                this.cryptoUtils,\r\n                this.performanceClient\r\n            );\r\n\r\n            const reqCnfData = await invokeAsync(\r\n                popTokenGenerator.generateCnf.bind(popTokenGenerator),\r\n                PerformanceEvents.PopTokenGenerateCnf,\r\n                this.logger,\r\n                this.performanceClient,\r\n                request.correlationId\r\n            )(request, this.logger);\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                parameterBuilder.addSshJwk(request.sshJwk);\r\n            } else {\r\n                throw createClientConfigurationError(\r\n                    ClientConfigurationErrorCodes.missingSshJwk\r\n                );\r\n            }\r\n        }\r\n\r\n        const correlationId =\r\n            request.correlationId ||\r\n            this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (\r\n            !StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)\r\n        ) {\r\n            parameterBuilder.addClaims(\r\n                request.claims,\r\n                this.config.authOptions.clientCapabilities\r\n            );\r\n        }\r\n\r\n        let ccsCred: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(\r\n                    request.clientInfo,\r\n                    this.cryptoUtils.base64Decode\r\n                );\r\n                ccsCred = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\r\n                    \"Could not parse client info for CCS Header: \" + e\r\n                );\r\n            }\r\n        } else {\r\n            ccsCred = request.ccsCredential;\r\n        }\r\n\r\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(\r\n                            ccsCred.credential\r\n                        );\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\r\n                            \"Could not parse home account ID for CCS Header: \" +\r\n                                e\r\n                        );\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (request.tokenBodyParameters) {\r\n            parameterBuilder.addExtraQueryParameters(\r\n                request.tokenBodyParameters\r\n            );\r\n        }\r\n\r\n        // Add hybrid spa parameters if not already provided\r\n        if (\r\n            request.enableSpaAuthorizationCode &&\r\n            (!request.tokenBodyParameters ||\r\n                !request.tokenBodyParameters[\r\n                    AADServerParamKeys.RETURN_SPA_CODE\r\n                ])\r\n        ) {\r\n            parameterBuilder.addExtraQueryParameters({\r\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\",\r\n            });\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private async createAuthCodeUrlQueryString(\r\n        request: CommonAuthorizationUrlRequest\r\n    ): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.AuthClientCreateQueryString,\r\n            request.correlationId\r\n        );\r\n\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(\r\n            request.extraQueryParameters?.[AADServerParamKeys.CLIENT_ID] ||\r\n                this.config.authOptions.clientId\r\n        );\r\n\r\n        const requestScopes = [\r\n            ...(request.scopes || []),\r\n            ...(request.extraScopesToConsent || []),\r\n        ];\r\n        parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\r\n\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n\r\n        // generate the correlationId if not set by the user and add\r\n        const correlationId =\r\n            request.correlationId ||\r\n            this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        // add response_mode. If not passed in it defaults to query.\r\n        parameterBuilder.addResponseMode(request.responseMode);\r\n\r\n        // add response_type = code\r\n        parameterBuilder.addResponseTypeCode();\r\n\r\n        // add library info parameters\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        if (!isOidcProtocolMode(this.config)) {\r\n            parameterBuilder.addApplicationTelemetry(\r\n                this.config.telemetry.application\r\n            );\r\n        }\r\n\r\n        // add client_info=1\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.codeChallenge && request.codeChallengeMethod) {\r\n            parameterBuilder.addCodeChallengeParams(\r\n                request.codeChallenge,\r\n                request.codeChallengeMethod\r\n            );\r\n        }\r\n\r\n        if (request.prompt) {\r\n            parameterBuilder.addPrompt(request.prompt);\r\n        }\r\n\r\n        if (request.domainHint) {\r\n            parameterBuilder.addDomainHint(request.domainHint);\r\n        }\r\n\r\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n            // AAD will throw if prompt=select_account is passed with an account hint\r\n            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                // SessionID is only used in silent calls\r\n                this.logger.verbose(\r\n                    \"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\"\r\n                );\r\n                parameterBuilder.addSid(request.sid);\r\n            } else if (request.account) {\r\n                const accountSid = this.extractAccountSid(request.account);\r\n                const accountLoginHintClaim = this.extractLoginHint(\r\n                    request.account\r\n                );\r\n                // If login_hint claim is present, use it over sid/username\r\n                if (accountLoginHintClaim) {\r\n                    this.logger.verbose(\r\n                        \"createAuthCodeUrlQueryString: login_hint claim present on account\"\r\n                    );\r\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(\r\n                            request.account.homeAccountId\r\n                        );\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\r\n                            \"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\"\r\n                        );\r\n                    }\r\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                    /*\r\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                     * SessionId is only used in silent calls\r\n                     */\r\n                    this.logger.verbose(\r\n                        \"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\"\r\n                    );\r\n                    parameterBuilder.addSid(accountSid);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(\r\n                            request.account.homeAccountId\r\n                        );\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\r\n                            \"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\"\r\n                        );\r\n                    }\r\n                } else if (request.loginHint) {\r\n                    this.logger.verbose(\r\n                        \"createAuthCodeUrlQueryString: Adding login_hint from request\"\r\n                    );\r\n                    parameterBuilder.addLoginHint(request.loginHint);\r\n                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                } else if (request.account.username) {\r\n                    // Fallback to account username if provided\r\n                    this.logger.verbose(\r\n                        \"createAuthCodeUrlQueryString: Adding login_hint from account\"\r\n                    );\r\n                    parameterBuilder.addLoginHint(request.account.username);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(\r\n                            request.account.homeAccountId\r\n                        );\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\r\n                            \"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\"\r\n                        );\r\n                    }\r\n                }\r\n            } else if (request.loginHint) {\r\n                this.logger.verbose(\r\n                    \"createAuthCodeUrlQueryString: No account, adding login_hint from request\"\r\n                );\r\n                parameterBuilder.addLoginHint(request.loginHint);\r\n                parameterBuilder.addCcsUpn(request.loginHint);\r\n            }\r\n        } else {\r\n            this.logger.verbose(\r\n                \"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\"\r\n            );\r\n        }\r\n\r\n        if (request.nonce) {\r\n            parameterBuilder.addNonce(request.nonce);\r\n        }\r\n\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n\r\n        if (\r\n            request.claims ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)\r\n        ) {\r\n            parameterBuilder.addClaims(\r\n                request.claims,\r\n                this.config.authOptions.clientCapabilities\r\n            );\r\n        }\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(\r\n                request.extraQueryParameters\r\n            );\r\n        }\r\n\r\n        if (request.nativeBroker) {\r\n            // signal ests that this is a WAM call\r\n            parameterBuilder.addNativeBroker();\r\n\r\n            // pass the req_cnf for POP\r\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n                const popTokenGenerator = new PopTokenGenerator(\r\n                    this.cryptoUtils\r\n                );\r\n                // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\r\n                const reqCnfData = await invokeAsync(\r\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\r\n                    PerformanceEvents.PopTokenGenerateCnf,\r\n                    this.logger,\r\n                    this.performanceClient,\r\n                    request.correlationId\r\n                )(request, this.logger);\r\n                parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\r\n            }\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private createLogoutUrlQueryString(\r\n        request: CommonEndSessionRequest\r\n    ): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(\r\n                request.postLogoutRedirectUri\r\n            );\r\n        }\r\n\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n\r\n        if (request.logoutHint) {\r\n            parameterBuilder.addLogoutHint(request.logoutHint);\r\n        }\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(\r\n                request.extraQueryParameters\r\n            );\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    private extractAccountSid(account: AccountInfo): string | null {\r\n        return account.idTokenClaims?.sid || null;\r\n    }\r\n\r\n    private extractLoginHint(account: AccountInfo): string | null {\r\n        return account.idTokenClaims?.login_hint || null;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}