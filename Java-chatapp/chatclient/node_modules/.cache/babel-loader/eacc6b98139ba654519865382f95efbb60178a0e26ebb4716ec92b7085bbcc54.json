{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { PerformanceEvents, invokeAsync, invoke, ServerResponseType } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from '../config/Configuration.mjs';\nimport { emptyNavigateUri, monitorWindowTimeout } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n * @param urlNavigate\r\n * @param userRequestScopes\r\n */\nasync function initiateAuthRequest(requestUrl, performanceClient, logger, correlationId, navigateFrameWait) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerInitiateAuthRequest, correlationId);\n  if (!requestUrl) {\n    // Throw error if request URL is empty.\n    logger.info(\"Navigate url is empty\");\n    throw createBrowserAuthError(emptyNavigateUri);\n  }\n  if (navigateFrameWait) {\n    return invokeAsync(loadFrame, PerformanceEvents.SilentHandlerLoadFrame, logger, performanceClient, correlationId)(requestUrl, navigateFrameWait, performanceClient, correlationId);\n  }\n  return invoke(loadFrameSync, PerformanceEvents.SilentHandlerLoadFrameSync, logger, performanceClient, correlationId)(requestUrl);\n}\n/**\r\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n * @param iframe\r\n * @param timeout\r\n */\nasync function monitorIframeForHash(iframe, timeout, pollIntervalMilliseconds, performanceClient, logger, correlationId, responseType) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerMonitorIframeForHash, correlationId);\n  return new Promise((resolve, reject) => {\n    if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n      logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n    }\n    /*\r\n     * Polling for iframes can be purely timing based,\r\n     * since we don't need to account for interaction.\r\n     */\n    const timeoutId = window.setTimeout(() => {\n      window.clearInterval(intervalId);\n      reject(createBrowserAuthError(monitorWindowTimeout));\n    }, timeout);\n    const intervalId = window.setInterval(() => {\n      let href = \"\";\n      const contentWindow = iframe.contentWindow;\n      try {\n        /*\r\n         * Will throw if cross origin,\r\n         * which should be caught and ignored\r\n         * since we need the interval to keep running while on STS UI.\r\n         */\n        href = contentWindow ? contentWindow.location.href : \"\";\n      } catch (e) {}\n      if (!href || href === \"about:blank\") {\n        return;\n      }\n      let responseString = \"\";\n      if (contentWindow) {\n        if (responseType === ServerResponseType.QUERY) {\n          responseString = contentWindow.location.search;\n        } else {\n          responseString = contentWindow.location.hash;\n        }\n      }\n      window.clearTimeout(timeoutId);\n      window.clearInterval(intervalId);\n      resolve(responseString);\n    }, pollIntervalMilliseconds);\n  }).finally(() => {\n    invoke(removeHiddenIframe, PerformanceEvents.RemoveHiddenIframe, logger, performanceClient, correlationId)(iframe);\n  });\n}\n/**\r\n * @hidden\r\n * Loads iframe with authorization endpoint URL\r\n * @ignore\r\n * @deprecated\r\n */\nfunction loadFrame(urlNavigate, navigateFrameWait, performanceClient, correlationId) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerLoadFrame, correlationId);\n  /*\r\n   * This trick overcomes iframe navigation in IE\r\n   * IE does not load the page consistently in iframe\r\n   */\n  return new Promise((resolve, reject) => {\n    const frameHandle = createHiddenIframe();\n    window.setTimeout(() => {\n      if (!frameHandle) {\n        reject(\"Unable to load iframe\");\n        return;\n      }\n      frameHandle.src = urlNavigate;\n      resolve(frameHandle);\n    }, navigateFrameWait);\n  });\n}\n/**\r\n * @hidden\r\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n * @param urlNavigate\r\n * @param frameName\r\n * @param logger\r\n */\nfunction loadFrameSync(urlNavigate) {\n  const frameHandle = createHiddenIframe();\n  frameHandle.src = urlNavigate;\n  return frameHandle;\n}\n/**\r\n * @hidden\r\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n * @ignore\r\n */\nfunction createHiddenIframe() {\n  const authFrame = document.createElement(\"iframe\");\n  authFrame.style.visibility = \"hidden\";\n  authFrame.style.position = \"absolute\";\n  authFrame.style.width = authFrame.style.height = \"0\";\n  authFrame.style.border = \"0\";\n  authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n  document.body.appendChild(authFrame);\n  return authFrame;\n}\n/**\r\n * @hidden\r\n * Removes a hidden iframe from the page.\r\n * @ignore\r\n */\nfunction removeHiddenIframe(iframe) {\n  if (document.body === iframe.parentNode) {\n    document.body.removeChild(iframe);\n  }\n}\nexport { initiateAuthRequest, monitorIframeForHash };","map":{"version":3,"names":["initiateAuthRequest","requestUrl","performanceClient","logger","correlationId","navigateFrameWait","addQueueMeasurement","PerformanceEvents","SilentHandlerInitiateAuthRequest","info","createBrowserAuthError","emptyNavigateUri","invokeAsync","loadFrame","SilentHandlerLoadFrame","invoke","loadFrameSync","SilentHandlerLoadFrameSync","monitorIframeForHash","iframe","timeout","pollIntervalMilliseconds","responseType","SilentHandlerMonitorIframeForHash","Promise","resolve","reject","DEFAULT_IFRAME_TIMEOUT_MS","warning","timeoutId","window","setTimeout","clearInterval","intervalId","monitorWindowTimeout","setInterval","href","contentWindow","location","e","responseString","ServerResponseType","QUERY","search","hash","clearTimeout","finally","removeHiddenIframe","RemoveHiddenIframe","urlNavigate","frameHandle","createHiddenIframe","src","authFrame","document","createElement","style","visibility","position","width","height","border","setAttribute","body","appendChild","parentNode","removeChild"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\SilentHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    Logger,\r\n    IPerformanceClient,\r\n    PerformanceEvents,\r\n    invokeAsync,\r\n    invoke,\r\n    ServerResponseType,\r\n} from \"@azure/msal-common\";\r\nimport {\r\n    createBrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError\";\r\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from \"../config/Configuration\";\r\n\r\n/**\r\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n * @param urlNavigate\r\n * @param userRequestScopes\r\n */\r\nexport async function initiateAuthRequest(\r\n    requestUrl: string,\r\n    performanceClient: IPerformanceClient,\r\n    logger: Logger,\r\n    correlationId: string,\r\n    navigateFrameWait?: number\r\n): Promise<HTMLIFrameElement> {\r\n    performanceClient.addQueueMeasurement(\r\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\r\n        correlationId\r\n    );\r\n\r\n    if (!requestUrl) {\r\n        // Throw error if request URL is empty.\r\n        logger.info(\"Navigate url is empty\");\r\n        throw createBrowserAuthError(BrowserAuthErrorCodes.emptyNavigateUri);\r\n    }\r\n    if (navigateFrameWait) {\r\n        return invokeAsync(\r\n            loadFrame,\r\n            PerformanceEvents.SilentHandlerLoadFrame,\r\n            logger,\r\n            performanceClient,\r\n            correlationId\r\n        )(requestUrl, navigateFrameWait, performanceClient, correlationId);\r\n    }\r\n    return invoke(\r\n        loadFrameSync,\r\n        PerformanceEvents.SilentHandlerLoadFrameSync,\r\n        logger,\r\n        performanceClient,\r\n        correlationId\r\n    )(requestUrl);\r\n}\r\n\r\n/**\r\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n * @param iframe\r\n * @param timeout\r\n */\r\nexport async function monitorIframeForHash(\r\n    iframe: HTMLIFrameElement,\r\n    timeout: number,\r\n    pollIntervalMilliseconds: number,\r\n    performanceClient: IPerformanceClient,\r\n    logger: Logger,\r\n    correlationId: string,\r\n    responseType: ServerResponseType\r\n): Promise<string> {\r\n    performanceClient.addQueueMeasurement(\r\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\r\n        correlationId\r\n    );\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n        if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\r\n            logger.warning(\r\n                `system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`\r\n            );\r\n        }\r\n\r\n        /*\r\n         * Polling for iframes can be purely timing based,\r\n         * since we don't need to account for interaction.\r\n         */\r\n        const timeoutId = window.setTimeout(() => {\r\n            window.clearInterval(intervalId);\r\n            reject(\r\n                createBrowserAuthError(\r\n                    BrowserAuthErrorCodes.monitorWindowTimeout\r\n                )\r\n            );\r\n        }, timeout);\r\n\r\n        const intervalId = window.setInterval(() => {\r\n            let href: string = \"\";\r\n            const contentWindow = iframe.contentWindow;\r\n            try {\r\n                /*\r\n                 * Will throw if cross origin,\r\n                 * which should be caught and ignored\r\n                 * since we need the interval to keep running while on STS UI.\r\n                 */\r\n                href = contentWindow ? contentWindow.location.href : \"\";\r\n            } catch (e) {}\r\n\r\n            if (!href || href === \"about:blank\") {\r\n                return;\r\n            }\r\n\r\n            let responseString = \"\";\r\n            if (contentWindow) {\r\n                if (responseType === ServerResponseType.QUERY) {\r\n                    responseString = contentWindow.location.search;\r\n                } else {\r\n                    responseString = contentWindow.location.hash;\r\n                }\r\n            }\r\n            window.clearTimeout(timeoutId);\r\n            window.clearInterval(intervalId);\r\n            resolve(responseString);\r\n        }, pollIntervalMilliseconds);\r\n    }).finally(() => {\r\n        invoke(\r\n            removeHiddenIframe,\r\n            PerformanceEvents.RemoveHiddenIframe,\r\n            logger,\r\n            performanceClient,\r\n            correlationId\r\n        )(iframe);\r\n    });\r\n}\r\n\r\n/**\r\n * @hidden\r\n * Loads iframe with authorization endpoint URL\r\n * @ignore\r\n * @deprecated\r\n */\r\nfunction loadFrame(\r\n    urlNavigate: string,\r\n    navigateFrameWait: number,\r\n    performanceClient: IPerformanceClient,\r\n    correlationId: string\r\n): Promise<HTMLIFrameElement> {\r\n    performanceClient.addQueueMeasurement(\r\n        PerformanceEvents.SilentHandlerLoadFrame,\r\n        correlationId\r\n    );\r\n\r\n    /*\r\n     * This trick overcomes iframe navigation in IE\r\n     * IE does not load the page consistently in iframe\r\n     */\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const frameHandle = createHiddenIframe();\r\n\r\n        window.setTimeout(() => {\r\n            if (!frameHandle) {\r\n                reject(\"Unable to load iframe\");\r\n                return;\r\n            }\r\n\r\n            frameHandle.src = urlNavigate;\r\n\r\n            resolve(frameHandle);\r\n        }, navigateFrameWait);\r\n    });\r\n}\r\n/**\r\n * @hidden\r\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n * @param urlNavigate\r\n * @param frameName\r\n * @param logger\r\n */\r\nfunction loadFrameSync(urlNavigate: string): HTMLIFrameElement {\r\n    const frameHandle = createHiddenIframe();\r\n\r\n    frameHandle.src = urlNavigate;\r\n\r\n    return frameHandle;\r\n}\r\n\r\n/**\r\n * @hidden\r\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n * @ignore\r\n */\r\nfunction createHiddenIframe(): HTMLIFrameElement {\r\n    const authFrame = document.createElement(\"iframe\");\r\n\r\n    authFrame.style.visibility = \"hidden\";\r\n    authFrame.style.position = \"absolute\";\r\n    authFrame.style.width = authFrame.style.height = \"0\";\r\n    authFrame.style.border = \"0\";\r\n    authFrame.setAttribute(\r\n        \"sandbox\",\r\n        \"allow-scripts allow-same-origin allow-forms\"\r\n    );\r\n    document.body.appendChild(authFrame);\r\n\r\n    return authFrame;\r\n}\r\n\r\n/**\r\n * @hidden\r\n * Removes a hidden iframe from the page.\r\n * @ignore\r\n */\r\nfunction removeHiddenIframe(iframe: HTMLIFrameElement): void {\r\n    if (document.body === iframe.parentNode) {\r\n        document.body.removeChild(iframe);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}