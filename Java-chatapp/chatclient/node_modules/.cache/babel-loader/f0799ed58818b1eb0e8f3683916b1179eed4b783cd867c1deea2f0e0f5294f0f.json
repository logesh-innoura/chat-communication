{"ast":null,"code":"/*! @azure/msal-browser v3.7.0 2024-01-09 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, invokeAsync, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SilentRefreshClient extends StandardInteractionClient {\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n    const baseRequest = await invokeAsync(this.initializeBaseRequest.bind(this), PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, request.correlationId)(request, request.account);\n    const silentRequest = {\n      ...request,\n      ...baseRequest\n    };\n    if (request.redirectUri) {\n      // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n      silentRequest.redirectUri = this.getRedirectUri(request.redirectUri);\n    }\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n    // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n    return invokeAsync(refreshTokenClient.acquireTokenByRefreshToken.bind(refreshTokenClient), PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, this.logger, this.performanceClient, request.correlationId)(silentRequest).catch(e => {\n      e.setCorrelationId(this.correlationId);\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    });\n  }\n  /**\r\n   * Currently Unsupported\r\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  async createRefreshTokenClient(serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    // Create auth module.\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, authorityUrl, azureCloudOptions);\n    return new RefreshTokenClient(clientConfig, this.performanceClient);\n  }\n}\nexport { SilentRefreshClient };","map":{"version":3,"names":["SilentRefreshClient","StandardInteractionClient","acquireToken","request","performanceClient","addQueueMeasurement","PerformanceEvents","SilentRefreshClientAcquireToken","correlationId","baseRequest","invokeAsync","initializeBaseRequest","bind","InitializeBaseRequest","logger","account","silentRequest","redirectUri","getRedirectUri","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","refreshTokenClient","createRefreshTokenClient","authority","azureCloudOptions","acquireTokenByRefreshToken","RefreshTokenClientAcquireTokenByRefreshToken","catch","e","setCorrelationId","cacheFailedRequest","logout","Promise","reject","createBrowserAuthError","silentLogoutUnsupported","authorityUrl","clientConfig","getClientConfiguration","StandardInteractionClientGetClientConfiguration","RefreshTokenClient"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentRefreshClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport {\r\n    CommonSilentFlowRequest,\r\n    ServerTelemetryManager,\r\n    RefreshTokenClient,\r\n    AuthError,\r\n    AzureCloudOptions,\r\n    PerformanceEvents,\r\n    invokeAsync,\r\n} from \"@azure/msal-common\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport {\r\n    createBrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\n\r\nexport class SilentRefreshClient extends StandardInteractionClient {\r\n    /**\r\n     * Exchanges the refresh token for new tokens\r\n     * @param request\r\n     */\r\n    async acquireToken(\r\n        request: CommonSilentFlowRequest\r\n    ): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(\r\n            PerformanceEvents.SilentRefreshClientAcquireToken,\r\n            request.correlationId\r\n        );\r\n\r\n        const baseRequest = await invokeAsync(\r\n            this.initializeBaseRequest.bind(this),\r\n            PerformanceEvents.InitializeBaseRequest,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request, request.account);\r\n        const silentRequest: CommonSilentFlowRequest = {\r\n            ...request,\r\n            ...baseRequest,\r\n        };\r\n\r\n        if (request.redirectUri) {\r\n            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\r\n            silentRequest.redirectUri = this.getRedirectUri(\r\n                request.redirectUri\r\n            );\r\n        }\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\r\n            ApiId.acquireTokenSilent_silentFlow\r\n        );\r\n\r\n        const refreshTokenClient = await this.createRefreshTokenClient(\r\n            serverTelemetryManager,\r\n            silentRequest.authority,\r\n            silentRequest.azureCloudOptions\r\n        );\r\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\r\n        return invokeAsync(\r\n            refreshTokenClient.acquireTokenByRefreshToken.bind(\r\n                refreshTokenClient\r\n            ),\r\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(silentRequest).catch((e: AuthError) => {\r\n            (e as AuthError).setCorrelationId(this.correlationId);\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }) as Promise<AuthenticationResult>;\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(\r\n            createBrowserAuthError(\r\n                BrowserAuthErrorCodes.silentLogoutUnsupported\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a Refresh Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createRefreshTokenClient(\r\n        serverTelemetryManager: ServerTelemetryManager,\r\n        authorityUrl?: string,\r\n        azureCloudOptions?: AzureCloudOptions\r\n    ): Promise<RefreshTokenClient> {\r\n        // Create auth module.\r\n        const clientConfig = await invokeAsync(\r\n            this.getClientConfiguration.bind(this),\r\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\r\n            this.logger,\r\n            this.performanceClient,\r\n            this.correlationId\r\n        )(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAmBG,MAAOA,mBAAoB,SAAQC,yBAAyB;EAC9D;;;AAGG;EACH,MAAMC,YAAYA,CACdC,OAAgC;IAEhC,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACC,+BAA+B,EACjDJ,OAAO,CAACK,aAAa,CACxB;IAED,MAAMC,WAAW,GAAG,MAAMC,WAAW,CACjC,IAAI,CAACC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC,EACrCN,iBAAiB,CAACO,qBAAqB,EACvC,IAAI,CAACC,MAAM,EACX,IAAI,CAACV,iBAAiB,EACtBD,OAAO,CAACK,aAAa,CACxB,CAACL,OAAO,EAAEA,OAAO,CAACY,OAAO,CAAC;IAC3B,MAAMC,aAAa,GAA4B;MAC3C,GAAGb,OAAO;MACV,GAAGM;KACN;IAED,IAAIN,OAAO,CAACc,WAAW,EAAE;;MAErBD,aAAa,CAACC,WAAW,GAAG,IAAI,CAACC,cAAc,CAC3Cf,OAAO,CAACc,WAAW,CACtB;IACJ;IAED,MAAME,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChEC,KAAK,CAACC,6BAA6B,CACtC;IAED,MAAMC,kBAAkB,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAC1DL,sBAAsB,EACtBH,aAAa,CAACS,SAAS,EACvBT,aAAa,CAACU,iBAAiB,CAClC;;IAED,OAAOhB,WAAW,CACda,kBAAkB,CAACI,0BAA0B,CAACf,IAAI,CAC9CW,kBAAkB,CACrB,EACDjB,iBAAiB,CAACsB,4CAA4C,EAC9D,IAAI,CAACd,MAAM,EACX,IAAI,CAACV,iBAAiB,EACtBD,OAAO,CAACK,aAAa,CACxB,CAACQ,aAAa,CAAC,CAACa,KAAK,CAAEC,CAAY,IAAI;MACnCA,CAAe,CAACC,gBAAgB,CAAC,IAAI,CAACvB,aAAa,CAAC;MACrDW,sBAAsB,CAACa,kBAAkB,CAACF,CAAC,CAAC;MAC5C,MAAMA,CAAC;IACX,CAAC,CAAkC;;EAGvC;;AAEG;EACHG,MAAMA,CAAA;;IAEF,OAAOC,OAAO,CAACC,MAAM,CACjBC,sBAAsB,CAClBC,uBAA6C,CAChD,CACJ;;EAGL;;;;AAIG;EACO,MAAMb,wBAAwBA,CACpCL,sBAA8C,EAC9CmB,YAAqB,EACrBZ,iBAAqC;;IAGrC,MAAMa,YAAY,GAAG,MAAM7B,WAAW,CAClC,IAAI,CAAC8B,sBAAsB,CAAC5B,IAAI,CAAC,IAAI,CAAC,EACtCN,iBAAiB,CAACmC,+CAA+C,EACjE,IAAI,CAAC3B,MAAM,EACX,IAAI,CAACV,iBAAiB,EACtB,IAAI,CAACI,aAAa,CACrB,CAACW,sBAAsB,EAAEmB,YAAY,EAAEZ,iBAAiB,CAAC;IAC1D,OAAO,IAAIgB,kBAAkB,CAACH,YAAY,EAAE,IAAI,CAACnC,iBAAiB,CAAC;;AAE1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}