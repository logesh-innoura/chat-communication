{"ast":null,"code":"/*! @azure/msal-common v14.6.0 2024-01-09 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Separators, Constants } from '../utils/Constants.mjs';\nimport { clientInfoEmptyError, clientInfoDecodingError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\nfunction buildClientInfo(rawClientInfo, base64Decode) {\n  if (!rawClientInfo) {\n    throw createClientAuthError(clientInfoEmptyError);\n  }\n  try {\n    const decodedClientInfo = base64Decode(rawClientInfo);\n    return JSON.parse(decodedClientInfo);\n  } catch (e) {\n    throw createClientAuthError(clientInfoDecodingError);\n  }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n  if (!homeAccountId) {\n    throw createClientAuthError(clientInfoDecodingError);\n  }\n  const clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n  return {\n    uid: clientInfoParts[0],\n    utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n  };\n}\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };","map":{"version":3,"names":["buildClientInfo","rawClientInfo","base64Decode","createClientAuthError","clientInfoEmptyError","decodedClientInfo","JSON","parse","e","clientInfoDecodingError","buildClientInfoFromHomeAccountId","homeAccountId","clientInfoParts","split","Separators","CLIENT_INFO_SEPARATOR","uid","utid","length","Constants","EMPTY_STRING"],"sources":["D:\\selvakumar\\java-chat-repo\\websocket-springboot-01\\Java-chatapp\\chatclient\\node_modules\\@azure\\msal-common\\src\\account\\ClientInfo.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    createClientAuthError,\r\n    ClientAuthErrorCodes,\r\n} from \"../error/ClientAuthError\";\r\nimport { Separators, Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Client info object which consists of two IDs. Need to add more info here.\r\n */\r\nexport type ClientInfo = {\r\n    uid: string;\r\n    utid: string;\r\n};\r\n\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nexport function buildClientInfo(\r\n    rawClientInfo: string,\r\n    base64Decode: (input: string) => string\r\n): ClientInfo {\r\n    if (!rawClientInfo) {\r\n        throw createClientAuthError(ClientAuthErrorCodes.clientInfoEmptyError);\r\n    }\r\n\r\n    try {\r\n        const decodedClientInfo: string = base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo) as ClientInfo;\r\n    } catch (e) {\r\n        throw createClientAuthError(\r\n            ClientAuthErrorCodes.clientInfoDecodingError\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\r\nexport function buildClientInfoFromHomeAccountId(\r\n    homeAccountId: string\r\n): ClientInfo {\r\n    if (!homeAccountId) {\r\n        throw createClientAuthError(\r\n            ClientAuthErrorCodes.clientInfoDecodingError\r\n        );\r\n    }\r\n    const clientInfoParts: string[] = homeAccountId.split(\r\n        Separators.CLIENT_INFO_SEPARATOR,\r\n        2\r\n    );\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid:\r\n            clientInfoParts.length < 2\r\n                ? Constants.EMPTY_STRING\r\n                : clientInfoParts[1],\r\n    };\r\n}\r\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAgBH;;;;AAIG;AACa,SAAAA,eAAeA,CAC3BC,aAAqB,EACrBC,YAAuC;EAEvC,IAAI,CAACD,aAAa,EAAE;IAChB,MAAME,qBAAqB,CAACC,oBAAyC,CAAC;EACzE;EAED,IAAI;IACA,MAAMC,iBAAiB,GAAWH,YAAY,CAACD,aAAa,CAAC;IAC7D,OAAOK,IAAI,CAACC,KAAK,CAACF,iBAAiB,CAAe;EACrD,EAAC,OAAOG,CAAC,EAAE;IACR,MAAML,qBAAqB,CACvBM,uBAA4C,CAC/C;EACJ;AACL;AAEA;;;AAGG;AACG,SAAUC,gCAAgCA,CAC5CC,aAAqB;EAErB,IAAI,CAACA,aAAa,EAAE;IAChB,MAAMR,qBAAqB,CACvBM,uBAA4C,CAC/C;EACJ;EACD,MAAMG,eAAe,GAAaD,aAAa,CAACE,KAAK,CACjDC,UAAU,CAACC,qBAAqB,EAChC,CAAC,CACJ;EACD,OAAO;IACHC,GAAG,EAAEJ,eAAe,CAAC,CAAC,CAAC;IACvBK,IAAI,EACAL,eAAe,CAACM,MAAM,GAAG,CAAC,GACpBC,SAAS,CAACC,YAAY,GACtBR,eAAe,CAAC,CAAC;GAC9B;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}